// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/type_network.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "../../binary";
import { DeepPartial, Exact, isSet } from "../../helpers";
export const protobufPackage = "types";

export interface Network {
  bondRewardRune: string;
  totalBondUnits: string;
  LPIncomeSplit: number;
  NodeIncomeSplit: number;
  outboundGasSpentRune: number;
  outboundGasWithheldRune: number;
}

function createBaseNetwork(): Network {
  return {
    bondRewardRune: "",
    totalBondUnits: "",
    LPIncomeSplit: 0,
    NodeIncomeSplit: 0,
    outboundGasSpentRune: 0,
    outboundGasWithheldRune: 0,
  };
}

export const Network = {
  encode(
    message: Network,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.bondRewardRune !== "") {
      writer.uint32(10).string(message.bondRewardRune);
    }
    if (message.totalBondUnits !== "") {
      writer.uint32(18).string(message.totalBondUnits);
    }
    if (message.LPIncomeSplit !== 0) {
      writer.uint32(40).int64(message.LPIncomeSplit);
    }
    if (message.NodeIncomeSplit !== 0) {
      writer.uint32(48).int64(message.NodeIncomeSplit);
    }
    if (message.outboundGasSpentRune !== 0) {
      writer.uint32(56).uint64(message.outboundGasSpentRune);
    }
    if (message.outboundGasWithheldRune !== 0) {
      writer.uint32(64).uint64(message.outboundGasWithheldRune);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Network {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetwork();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bondRewardRune = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.totalBondUnits = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.LPIncomeSplit = Number(reader.int64());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.NodeIncomeSplit = Number(reader.int64());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.outboundGasSpentRune = Number(reader.uint64());
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.outboundGasWithheldRune = Number(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Network {
    return {
      bondRewardRune: isSet(object.bondRewardRune)
        ? globalThis.String(object.bondRewardRune)
        : "",
      totalBondUnits: isSet(object.totalBondUnits)
        ? globalThis.String(object.totalBondUnits)
        : "",
      LPIncomeSplit: isSet(object.LPIncomeSplit)
        ? globalThis.Number(object.LPIncomeSplit)
        : 0,
      NodeIncomeSplit: isSet(object.NodeIncomeSplit)
        ? globalThis.Number(object.NodeIncomeSplit)
        : 0,
      outboundGasSpentRune: isSet(object.outboundGasSpentRune)
        ? globalThis.Number(object.outboundGasSpentRune)
        : 0,
      outboundGasWithheldRune: isSet(object.outboundGasWithheldRune)
        ? globalThis.Number(object.outboundGasWithheldRune)
        : 0,
    };
  },

  toJSON(message: Network): unknown {
    const obj: any = {};
    if (message.bondRewardRune !== "") {
      obj.bondRewardRune = message.bondRewardRune;
    }
    if (message.totalBondUnits !== "") {
      obj.totalBondUnits = message.totalBondUnits;
    }
    if (message.LPIncomeSplit !== 0) {
      obj.LPIncomeSplit = Math.round(message.LPIncomeSplit);
    }
    if (message.NodeIncomeSplit !== 0) {
      obj.NodeIncomeSplit = Math.round(message.NodeIncomeSplit);
    }
    if (message.outboundGasSpentRune !== 0) {
      obj.outboundGasSpentRune = Math.round(message.outboundGasSpentRune);
    }
    if (message.outboundGasWithheldRune !== 0) {
      obj.outboundGasWithheldRune = Math.round(message.outboundGasWithheldRune);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Network>, I>>(base?: I): Network {
    return Network.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Network>, I>>(object: I): Network {
    const message = createBaseNetwork();
    message.bondRewardRune = object.bondRewardRune ?? "";
    message.totalBondUnits = object.totalBondUnits ?? "";
    message.LPIncomeSplit = object.LPIncomeSplit ?? 0;
    message.NodeIncomeSplit = object.NodeIncomeSplit ?? 0;
    message.outboundGasSpentRune = object.outboundGasSpentRune ?? 0;
    message.outboundGasWithheldRune = object.outboundGasWithheldRune ?? 0;
    return message;
  },
};
