// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/type_secured_asset.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "../../binary";
import { DeepPartial, Exact, isSet } from "../../helpers";
import { Asset } from "../common/common";

export const protobufPackage = "types";

export interface SecuredAsset {
  asset: Asset | undefined;
  depth: string;
}

function createBaseSecuredAsset(): SecuredAsset {
  return { asset: undefined, depth: "" };
}

export const SecuredAsset = {
  encode(
    message: SecuredAsset,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.asset !== undefined) {
      Asset.encode(message.asset, writer.uint32(10).fork()).ldelim();
    }
    if (message.depth !== "") {
      writer.uint32(18).string(message.depth);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SecuredAsset {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSecuredAsset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.asset = Asset.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.depth = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SecuredAsset {
    return {
      asset: isSet(object.asset) ? Asset.fromJSON(object.asset) : undefined,
      depth: isSet(object.depth) ? globalThis.String(object.depth) : "",
    };
  },

  toJSON(message: SecuredAsset): unknown {
    const obj: any = {};
    if (message.asset !== undefined) {
      obj.asset = Asset.toJSON(message.asset);
    }
    if (message.depth !== "") {
      obj.depth = message.depth;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SecuredAsset>, I>>(
    base?: I
  ): SecuredAsset {
    return SecuredAsset.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SecuredAsset>, I>>(
    object: I
  ): SecuredAsset {
    const message = createBaseSecuredAsset();
    message.asset =
      object.asset !== undefined && object.asset !== null
        ? Asset.fromPartial(object.asset)
        : undefined;
    message.depth = object.depth ?? "";
    return message;
  },
};
