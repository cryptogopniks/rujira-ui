// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/query_secured_asset.proto

import { BinaryReader, BinaryWriter } from "../../binary";
import { DeepPartial, Exact, isSet } from "../../helpers";

/* eslint-disable */

export const protobufPackage = "types";

export interface QuerySecuredAssetRequest {
  asset: string;
  height: string;
}

export interface QuerySecuredAssetResponse {
  /** bridge account asset with \"-\" separator */
  asset: string;
  /** total share tokens issued for the pool */
  supply: string;
  /** total depth of bridge asset */
  depth: string;
}

export interface QuerySecuredAssetsRequest {
  height: string;
}

export interface QuerySecuredAssetsResponse {
  assets: QuerySecuredAssetResponse[];
}

function createBaseQuerySecuredAssetRequest(): QuerySecuredAssetRequest {
  return { asset: "", height: "" };
}

export const QuerySecuredAssetRequest = {
  encode(
    message: QuerySecuredAssetRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.asset !== "") {
      writer.uint32(10).string(message.asset);
    }
    if (message.height !== "") {
      writer.uint32(18).string(message.height);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QuerySecuredAssetRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQuerySecuredAssetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.asset = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QuerySecuredAssetRequest {
    return {
      asset: isSet(object.asset) ? globalThis.String(object.asset) : "",
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QuerySecuredAssetRequest): unknown {
    const obj: any = {};
    if (message.asset !== "") {
      obj.asset = message.asset;
    }
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QuerySecuredAssetRequest>, I>>(
    base?: I
  ): QuerySecuredAssetRequest {
    return QuerySecuredAssetRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QuerySecuredAssetRequest>, I>>(
    object: I
  ): QuerySecuredAssetRequest {
    const message = createBaseQuerySecuredAssetRequest();
    message.asset = object.asset ?? "";
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseQuerySecuredAssetResponse(): QuerySecuredAssetResponse {
  return { asset: "", supply: "", depth: "" };
}

export const QuerySecuredAssetResponse = {
  encode(
    message: QuerySecuredAssetResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.asset !== "") {
      writer.uint32(10).string(message.asset);
    }
    if (message.supply !== "") {
      writer.uint32(18).string(message.supply);
    }
    if (message.depth !== "") {
      writer.uint32(26).string(message.depth);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QuerySecuredAssetResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQuerySecuredAssetResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.asset = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.supply = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.depth = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QuerySecuredAssetResponse {
    return {
      asset: isSet(object.asset) ? globalThis.String(object.asset) : "",
      supply: isSet(object.supply) ? globalThis.String(object.supply) : "",
      depth: isSet(object.depth) ? globalThis.String(object.depth) : "",
    };
  },

  toJSON(message: QuerySecuredAssetResponse): unknown {
    const obj: any = {};
    if (message.asset !== "") {
      obj.asset = message.asset;
    }
    if (message.supply !== "") {
      obj.supply = message.supply;
    }
    if (message.depth !== "") {
      obj.depth = message.depth;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QuerySecuredAssetResponse>, I>>(
    base?: I
  ): QuerySecuredAssetResponse {
    return QuerySecuredAssetResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QuerySecuredAssetResponse>, I>>(
    object: I
  ): QuerySecuredAssetResponse {
    const message = createBaseQuerySecuredAssetResponse();
    message.asset = object.asset ?? "";
    message.supply = object.supply ?? "";
    message.depth = object.depth ?? "";
    return message;
  },
};

function createBaseQuerySecuredAssetsRequest(): QuerySecuredAssetsRequest {
  return { height: "" };
}

export const QuerySecuredAssetsRequest = {
  encode(
    message: QuerySecuredAssetsRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.height !== "") {
      writer.uint32(10).string(message.height);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QuerySecuredAssetsRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQuerySecuredAssetsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QuerySecuredAssetsRequest {
    return {
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QuerySecuredAssetsRequest): unknown {
    const obj: any = {};
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QuerySecuredAssetsRequest>, I>>(
    base?: I
  ): QuerySecuredAssetsRequest {
    return QuerySecuredAssetsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QuerySecuredAssetsRequest>, I>>(
    object: I
  ): QuerySecuredAssetsRequest {
    const message = createBaseQuerySecuredAssetsRequest();
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseQuerySecuredAssetsResponse(): QuerySecuredAssetsResponse {
  return { assets: [] };
}

export const QuerySecuredAssetsResponse = {
  encode(
    message: QuerySecuredAssetsResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    for (const v of message.assets) {
      QuerySecuredAssetResponse.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QuerySecuredAssetsResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQuerySecuredAssetsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.assets.push(
            QuerySecuredAssetResponse.decode(reader, reader.uint32())
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QuerySecuredAssetsResponse {
    return {
      assets: globalThis.Array.isArray(object?.assets)
        ? object.assets.map((e: any) => QuerySecuredAssetResponse.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QuerySecuredAssetsResponse): unknown {
    const obj: any = {};
    if (message.assets?.length) {
      obj.assets = message.assets.map((e) =>
        QuerySecuredAssetResponse.toJSON(e)
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QuerySecuredAssetsResponse>, I>>(
    base?: I
  ): QuerySecuredAssetsResponse {
    return QuerySecuredAssetsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QuerySecuredAssetsResponse>, I>>(
    object: I
  ): QuerySecuredAssetsResponse {
    const message = createBaseQuerySecuredAssetsResponse();
    message.assets =
      object.assets?.map((e) => QuerySecuredAssetResponse.fromPartial(e)) || [];
    return message;
  },
};
