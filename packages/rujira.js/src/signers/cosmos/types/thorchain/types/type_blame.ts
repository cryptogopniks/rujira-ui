// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/type_blame.proto

import { BinaryReader, BinaryWriter } from "../../binary";
import {
  base64FromBytes,
  bytesFromBase64,
  DeepPartial,
  Exact,
  isSet,
} from "../../helpers";

/* eslint-disable */

export const protobufPackage = "types";

export interface Node {
  pubkey: string;
  blameData: Uint8Array;
  blameSignature: Uint8Array;
}

export interface Blame {
  failReason: string;
  isUnicast: boolean;
  blameNodes: Node[];
  round: string;
}

function createBaseNode(): Node {
  return {
    pubkey: "",
    blameData: new Uint8Array(0),
    blameSignature: new Uint8Array(0),
  };
}

export const Node = {
  encode(
    message: Node,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.pubkey !== "") {
      writer.uint32(10).string(message.pubkey);
    }
    if (message.blameData.length !== 0) {
      writer.uint32(18).bytes(message.blameData);
    }
    if (message.blameSignature.length !== 0) {
      writer.uint32(26).bytes(message.blameSignature);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Node {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pubkey = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.blameData = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.blameSignature = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Node {
    return {
      pubkey: isSet(object.pubkey) ? globalThis.String(object.pubkey) : "",
      blameData: isSet(object.blameData)
        ? bytesFromBase64(object.blameData)
        : new Uint8Array(0),
      blameSignature: isSet(object.blameSignature)
        ? bytesFromBase64(object.blameSignature)
        : new Uint8Array(0),
    };
  },

  toJSON(message: Node): unknown {
    const obj: any = {};
    if (message.pubkey !== "") {
      obj.pubkey = message.pubkey;
    }
    if (message.blameData.length !== 0) {
      obj.blameData = base64FromBytes(message.blameData);
    }
    if (message.blameSignature.length !== 0) {
      obj.blameSignature = base64FromBytes(message.blameSignature);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Node>, I>>(base?: I): Node {
    return Node.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Node>, I>>(object: I): Node {
    const message = createBaseNode();
    message.pubkey = object.pubkey ?? "";
    message.blameData = object.blameData ?? new Uint8Array(0);
    message.blameSignature = object.blameSignature ?? new Uint8Array(0);
    return message;
  },
};

function createBaseBlame(): Blame {
  return { failReason: "", isUnicast: false, blameNodes: [], round: "" };
}

export const Blame = {
  encode(
    message: Blame,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.failReason !== "") {
      writer.uint32(10).string(message.failReason);
    }
    if (message.isUnicast !== false) {
      writer.uint32(16).bool(message.isUnicast);
    }
    for (const v of message.blameNodes) {
      Node.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    if (message.round !== "") {
      writer.uint32(34).string(message.round);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Blame {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlame();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.failReason = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isUnicast = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.blameNodes.push(Node.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.round = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Blame {
    return {
      failReason: isSet(object.failReason)
        ? globalThis.String(object.failReason)
        : "",
      isUnicast: isSet(object.isUnicast)
        ? globalThis.Boolean(object.isUnicast)
        : false,
      blameNodes: globalThis.Array.isArray(object?.blameNodes)
        ? object.blameNodes.map((e: any) => Node.fromJSON(e))
        : [],
      round: isSet(object.round) ? globalThis.String(object.round) : "",
    };
  },

  toJSON(message: Blame): unknown {
    const obj: any = {};
    if (message.failReason !== "") {
      obj.failReason = message.failReason;
    }
    if (message.isUnicast !== false) {
      obj.isUnicast = message.isUnicast;
    }
    if (message.blameNodes?.length) {
      obj.blameNodes = message.blameNodes.map((e) => Node.toJSON(e));
    }
    if (message.round !== "") {
      obj.round = message.round;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Blame>, I>>(base?: I): Blame {
    return Blame.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Blame>, I>>(object: I): Blame {
    const message = createBaseBlame();
    message.failReason = object.failReason ?? "";
    message.isUnicast = object.isUnicast ?? false;
    message.blameNodes =
      object.blameNodes?.map((e) => Node.fromPartial(e)) || [];
    message.round = object.round ?? "";
    return message;
  },
};
