// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/query_trade_unit.proto

import { BinaryReader, BinaryWriter } from "../../binary";
import { DeepPartial, Exact, isSet } from "../../helpers";

/* eslint-disable */

export const protobufPackage = "types";

export interface QueryTradeUnitRequest {
  asset: string;
  height: string;
}

export interface QueryTradeUnitResponse {
  /** trade account asset with \"~\" separator */
  asset: string;
  /** total units of trade asset */
  units: string;
  /** total depth of trade asset */
  depth: string;
}

export interface QueryTradeUnitsRequest {
  height: string;
}

export interface QueryTradeUnitsResponse {
  tradeUnits: QueryTradeUnitResponse[];
}

function createBaseQueryTradeUnitRequest(): QueryTradeUnitRequest {
  return { asset: "", height: "" };
}

export const QueryTradeUnitRequest = {
  encode(
    message: QueryTradeUnitRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.asset !== "") {
      writer.uint32(10).string(message.asset);
    }
    if (message.height !== "") {
      writer.uint32(18).string(message.height);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryTradeUnitRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTradeUnitRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.asset = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTradeUnitRequest {
    return {
      asset: isSet(object.asset) ? globalThis.String(object.asset) : "",
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QueryTradeUnitRequest): unknown {
    const obj: any = {};
    if (message.asset !== "") {
      obj.asset = message.asset;
    }
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryTradeUnitRequest>, I>>(
    base?: I
  ): QueryTradeUnitRequest {
    return QueryTradeUnitRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryTradeUnitRequest>, I>>(
    object: I
  ): QueryTradeUnitRequest {
    const message = createBaseQueryTradeUnitRequest();
    message.asset = object.asset ?? "";
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseQueryTradeUnitResponse(): QueryTradeUnitResponse {
  return { asset: "", units: "", depth: "" };
}

export const QueryTradeUnitResponse = {
  encode(
    message: QueryTradeUnitResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.asset !== "") {
      writer.uint32(10).string(message.asset);
    }
    if (message.units !== "") {
      writer.uint32(18).string(message.units);
    }
    if (message.depth !== "") {
      writer.uint32(26).string(message.depth);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryTradeUnitResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTradeUnitResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.asset = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.units = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.depth = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTradeUnitResponse {
    return {
      asset: isSet(object.asset) ? globalThis.String(object.asset) : "",
      units: isSet(object.units) ? globalThis.String(object.units) : "",
      depth: isSet(object.depth) ? globalThis.String(object.depth) : "",
    };
  },

  toJSON(message: QueryTradeUnitResponse): unknown {
    const obj: any = {};
    if (message.asset !== "") {
      obj.asset = message.asset;
    }
    if (message.units !== "") {
      obj.units = message.units;
    }
    if (message.depth !== "") {
      obj.depth = message.depth;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryTradeUnitResponse>, I>>(
    base?: I
  ): QueryTradeUnitResponse {
    return QueryTradeUnitResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryTradeUnitResponse>, I>>(
    object: I
  ): QueryTradeUnitResponse {
    const message = createBaseQueryTradeUnitResponse();
    message.asset = object.asset ?? "";
    message.units = object.units ?? "";
    message.depth = object.depth ?? "";
    return message;
  },
};

function createBaseQueryTradeUnitsRequest(): QueryTradeUnitsRequest {
  return { height: "" };
}

export const QueryTradeUnitsRequest = {
  encode(
    message: QueryTradeUnitsRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.height !== "") {
      writer.uint32(10).string(message.height);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryTradeUnitsRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTradeUnitsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTradeUnitsRequest {
    return {
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QueryTradeUnitsRequest): unknown {
    const obj: any = {};
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryTradeUnitsRequest>, I>>(
    base?: I
  ): QueryTradeUnitsRequest {
    return QueryTradeUnitsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryTradeUnitsRequest>, I>>(
    object: I
  ): QueryTradeUnitsRequest {
    const message = createBaseQueryTradeUnitsRequest();
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseQueryTradeUnitsResponse(): QueryTradeUnitsResponse {
  return { tradeUnits: [] };
}

export const QueryTradeUnitsResponse = {
  encode(
    message: QueryTradeUnitsResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    for (const v of message.tradeUnits) {
      QueryTradeUnitResponse.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryTradeUnitsResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTradeUnitsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tradeUnits.push(
            QueryTradeUnitResponse.decode(reader, reader.uint32())
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTradeUnitsResponse {
    return {
      tradeUnits: globalThis.Array.isArray(object?.tradeUnits)
        ? object.tradeUnits.map((e: any) => QueryTradeUnitResponse.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryTradeUnitsResponse): unknown {
    const obj: any = {};
    if (message.tradeUnits?.length) {
      obj.tradeUnits = message.tradeUnits.map((e) =>
        QueryTradeUnitResponse.toJSON(e)
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryTradeUnitsResponse>, I>>(
    base?: I
  ): QueryTradeUnitsResponse {
    return QueryTradeUnitsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryTradeUnitsResponse>, I>>(
    object: I
  ): QueryTradeUnitsResponse {
    const message = createBaseQueryTradeUnitsResponse();
    message.tradeUnits =
      object.tradeUnits?.map((e) => QueryTradeUnitResponse.fromPartial(e)) ||
      [];
    return message;
  },
};
