// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/query_keystore.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "../../binary";
import { DeepPartial, Exact, isSet } from "../../helpers";
import { KeygenBlock } from "./type_keygen";
import { TxOut } from "./type_tx_out";

export const protobufPackage = "types";

export interface QueryKeysignRequest {
  height: string;
}

export interface QueryKeysignPubkeyRequest {
  height: string;
  pubKey: string;
}

export interface QueryKeysignResponse {
  keysign: TxOut | undefined;
  signature: string;
}

export interface QueryKeygenRequest {
  height: string;
  pubKey: string;
}

export interface QueryKeygenResponse {
  keygenBlock: KeygenBlock | undefined;
  signature: string;
}

function createBaseQueryKeysignRequest(): QueryKeysignRequest {
  return { height: "" };
}

export const QueryKeysignRequest = {
  encode(
    message: QueryKeysignRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.height !== "") {
      writer.uint32(10).string(message.height);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryKeysignRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryKeysignRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryKeysignRequest {
    return {
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QueryKeysignRequest): unknown {
    const obj: any = {};
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryKeysignRequest>, I>>(
    base?: I
  ): QueryKeysignRequest {
    return QueryKeysignRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryKeysignRequest>, I>>(
    object: I
  ): QueryKeysignRequest {
    const message = createBaseQueryKeysignRequest();
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseQueryKeysignPubkeyRequest(): QueryKeysignPubkeyRequest {
  return { height: "", pubKey: "" };
}

export const QueryKeysignPubkeyRequest = {
  encode(
    message: QueryKeysignPubkeyRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.height !== "") {
      writer.uint32(10).string(message.height);
    }
    if (message.pubKey !== "") {
      writer.uint32(18).string(message.pubKey);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryKeysignPubkeyRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryKeysignPubkeyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.height = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pubKey = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryKeysignPubkeyRequest {
    return {
      height: isSet(object.height) ? globalThis.String(object.height) : "",
      pubKey: isSet(object.pubKey) ? globalThis.String(object.pubKey) : "",
    };
  },

  toJSON(message: QueryKeysignPubkeyRequest): unknown {
    const obj: any = {};
    if (message.height !== "") {
      obj.height = message.height;
    }
    if (message.pubKey !== "") {
      obj.pubKey = message.pubKey;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryKeysignPubkeyRequest>, I>>(
    base?: I
  ): QueryKeysignPubkeyRequest {
    return QueryKeysignPubkeyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryKeysignPubkeyRequest>, I>>(
    object: I
  ): QueryKeysignPubkeyRequest {
    const message = createBaseQueryKeysignPubkeyRequest();
    message.height = object.height ?? "";
    message.pubKey = object.pubKey ?? "";
    return message;
  },
};

function createBaseQueryKeysignResponse(): QueryKeysignResponse {
  return { keysign: undefined, signature: "" };
}

export const QueryKeysignResponse = {
  encode(
    message: QueryKeysignResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.keysign !== undefined) {
      TxOut.encode(message.keysign, writer.uint32(10).fork()).ldelim();
    }
    if (message.signature !== "") {
      writer.uint32(18).string(message.signature);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryKeysignResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryKeysignResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.keysign = TxOut.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.signature = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryKeysignResponse {
    return {
      keysign: isSet(object.keysign)
        ? TxOut.fromJSON(object.keysign)
        : undefined,
      signature: isSet(object.signature)
        ? globalThis.String(object.signature)
        : "",
    };
  },

  toJSON(message: QueryKeysignResponse): unknown {
    const obj: any = {};
    if (message.keysign !== undefined) {
      obj.keysign = TxOut.toJSON(message.keysign);
    }
    if (message.signature !== "") {
      obj.signature = message.signature;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryKeysignResponse>, I>>(
    base?: I
  ): QueryKeysignResponse {
    return QueryKeysignResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryKeysignResponse>, I>>(
    object: I
  ): QueryKeysignResponse {
    const message = createBaseQueryKeysignResponse();
    message.keysign =
      object.keysign !== undefined && object.keysign !== null
        ? TxOut.fromPartial(object.keysign)
        : undefined;
    message.signature = object.signature ?? "";
    return message;
  },
};

function createBaseQueryKeygenRequest(): QueryKeygenRequest {
  return { height: "", pubKey: "" };
}

export const QueryKeygenRequest = {
  encode(
    message: QueryKeygenRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.height !== "") {
      writer.uint32(10).string(message.height);
    }
    if (message.pubKey !== "") {
      writer.uint32(18).string(message.pubKey);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryKeygenRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryKeygenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.height = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pubKey = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryKeygenRequest {
    return {
      height: isSet(object.height) ? globalThis.String(object.height) : "",
      pubKey: isSet(object.pubKey) ? globalThis.String(object.pubKey) : "",
    };
  },

  toJSON(message: QueryKeygenRequest): unknown {
    const obj: any = {};
    if (message.height !== "") {
      obj.height = message.height;
    }
    if (message.pubKey !== "") {
      obj.pubKey = message.pubKey;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryKeygenRequest>, I>>(
    base?: I
  ): QueryKeygenRequest {
    return QueryKeygenRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryKeygenRequest>, I>>(
    object: I
  ): QueryKeygenRequest {
    const message = createBaseQueryKeygenRequest();
    message.height = object.height ?? "";
    message.pubKey = object.pubKey ?? "";
    return message;
  },
};

function createBaseQueryKeygenResponse(): QueryKeygenResponse {
  return { keygenBlock: undefined, signature: "" };
}

export const QueryKeygenResponse = {
  encode(
    message: QueryKeygenResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.keygenBlock !== undefined) {
      KeygenBlock.encode(
        message.keygenBlock,
        writer.uint32(10).fork()
      ).ldelim();
    }
    if (message.signature !== "") {
      writer.uint32(18).string(message.signature);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryKeygenResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryKeygenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.keygenBlock = KeygenBlock.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.signature = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryKeygenResponse {
    return {
      keygenBlock: isSet(object.keygenBlock)
        ? KeygenBlock.fromJSON(object.keygenBlock)
        : undefined,
      signature: isSet(object.signature)
        ? globalThis.String(object.signature)
        : "",
    };
  },

  toJSON(message: QueryKeygenResponse): unknown {
    const obj: any = {};
    if (message.keygenBlock !== undefined) {
      obj.keygenBlock = KeygenBlock.toJSON(message.keygenBlock);
    }
    if (message.signature !== "") {
      obj.signature = message.signature;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryKeygenResponse>, I>>(
    base?: I
  ): QueryKeygenResponse {
    return QueryKeygenResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryKeygenResponse>, I>>(
    object: I
  ): QueryKeygenResponse {
    const message = createBaseQueryKeygenResponse();
    message.keygenBlock =
      object.keygenBlock !== undefined && object.keygenBlock !== null
        ? KeygenBlock.fromPartial(object.keygenBlock)
        : undefined;
    message.signature = object.signature ?? "";
    return message;
  },
};
