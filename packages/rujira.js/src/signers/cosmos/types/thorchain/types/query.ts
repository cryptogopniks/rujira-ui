// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/query.proto

/* eslint-disable */
import { BinaryReader } from "../../binary";
import { QueryAccountRequest, QueryAccountResponse } from "./query_account";
import {
  QueryBalanceModuleRequest,
  QueryBalanceModuleResponse,
} from "./query_balance_module";
import { QueryBanRequest } from "./query_ban";
import { QueryBalancesRequest, QueryBalancesResponse } from "./query_bank";
import { QueryBlockRequest, QueryBlockResponse } from "./query_block";
import {
  QueryBorrowerRequest,
  QueryBorrowerResponse,
  QueryBorrowersRequest,
  QueryBorrowersResponse,
} from "./query_borrower";
import {
  QueryConstantValuesRequest,
  QueryConstantValuesResponse,
} from "./query_constant_values";
import {
  QueryDerivedPoolRequest,
  QueryDerivedPoolResponse,
  QueryDerivedPoolsRequest,
  QueryDerivedPoolsResponse,
} from "./query_derived_pool";
import { QueryExportRequest, QueryExportResponse } from "./query_export";
import {
  QueryInboundAddressesRequest,
  QueryInboundAddressesResponse,
} from "./query_inbound_address";
import {
  QueryInvariantRequest,
  QueryInvariantResponse,
  QueryInvariantsRequest,
  QueryInvariantsResponse,
} from "./query_invariants";
import {
  QueryKeygenRequest,
  QueryKeygenResponse,
  QueryKeysignPubkeyRequest,
  QueryKeysignRequest,
  QueryKeysignResponse,
} from "./query_keystore";
import {
  QueryChainsLastBlockRequest,
  QueryLastBlocksRequest,
  QueryLastBlocksResponse,
} from "./query_last_block";
import {
  QueryLiquidityProviderRequest,
  QueryLiquidityProviderResponse,
  QueryLiquidityProvidersRequest,
  QueryLiquidityProvidersResponse,
} from "./query_liquidity_provider";
import {
  QueryMimirAdminValuesRequest,
  QueryMimirAdminValuesResponse,
  QueryMimirNodesAllValuesRequest,
  QueryMimirNodesAllValuesResponse,
  QueryMimirNodesValuesRequest,
  QueryMimirNodesValuesResponse,
  QueryMimirNodeValuesRequest,
  QueryMimirNodeValuesResponse,
  QueryMimirValuesRequest,
  QueryMimirValuesResponse,
  QueryMimirWithKeyRequest,
  QueryMimirWithKeyResponse,
} from "./query_mimir";
import { QueryNetworkRequest, QueryNetworkResponse } from "./query_network";
import {
  QueryNodeRequest,
  QueryNodeResponse,
  QueryNodesRequest,
  QueryNodesResponse,
} from "./query_node";
import {
  QueryOutboundResponse,
  QueryPendingOutboundRequest,
  QueryScheduledOutboundRequest,
} from "./query_outbound";
import {
  QueryOutboundFeeRequest,
  QueryOutboundFeesRequest,
  QueryOutboundFeesResponse,
} from "./query_outbound_fee";
import {
  QueryPoolRequest,
  QueryPoolResponse,
  QueryPoolsRequest,
  QueryPoolsResponse,
} from "./query_pool";
import {
  QueryPoolSlipRequest,
  QueryPoolSlipsRequest,
  QueryPoolSlipsResponse,
} from "./query_pool_slip";
import { QueryQueueRequest, QueryQueueResponse } from "./query_queue";
import {
  QueryQuoteLoanCloseRequest,
  QueryQuoteLoanCloseResponse,
  QueryQuoteLoanOpenRequest,
  QueryQuoteLoanOpenResponse,
  QueryQuoteSaverDepositRequest,
  QueryQuoteSaverDepositResponse,
  QueryQuoteSaverWithdrawRequest,
  QueryQuoteSaverWithdrawResponse,
  QueryQuoteSwapRequest,
  QueryQuoteSwapResponse,
} from "./query_quotes";
import { QueryRagnarokRequest, QueryRagnarokResponse } from "./query_ragnarok";
import { QueryRunePoolRequest, QueryRunePoolResponse } from "./query_rune_pool";
import {
  QueryRuneProviderRequest,
  QueryRuneProviderResponse,
  QueryRuneProvidersRequest,
  QueryRuneProvidersResponse,
} from "./query_rune_provider";
import {
  QuerySaverRequest,
  QuerySaverResponse,
  QuerySaversRequest,
  QuerySaversResponse,
} from "./query_saver";
import {
  QuerySecuredAssetRequest,
  QuerySecuredAssetResponse,
  QuerySecuredAssetsRequest,
  QuerySecuredAssetsResponse,
} from "./query_secured_asset";
import {
  QueryStreamingSwapRequest,
  QueryStreamingSwapResponse,
  QueryStreamingSwapsRequest,
  QueryStreamingSwapsResponse,
} from "./query_streaming_swap";
import {
  QuerySwapQueueRequest,
  QuerySwapQueueResponse,
} from "./query_swap_queue";
import { QuerySwapperCloutRequest } from "./query_swapper_clout";
import { QueryThornameRequest, QueryThornameResponse } from "./query_thorname";
import {
  QueryTradeAccountRequest,
  QueryTradeAccountsRequest,
  QueryTradeAccountsResponse,
} from "./query_trade_account";
import {
  QueryTradeUnitRequest,
  QueryTradeUnitResponse,
  QueryTradeUnitsRequest,
  QueryTradeUnitsResponse,
} from "./query_trade_unit";
import {
  QueryTssKeygenMetricRequest,
  QueryTssKeygenMetricResponse,
  QueryTssMetricRequest,
  QueryTssMetricResponse,
} from "./query_tss";
import {
  QueryObservedTxVoter,
  QueryTxRequest,
  QueryTxResponse,
  QueryTxStagesRequest,
  QueryTxStagesResponse,
  QueryTxStatusRequest,
  QueryTxStatusResponse,
  QueryTxVotersRequest,
} from "./query_tx";
import {
  QueryUpgradeProposalRequest,
  QueryUpgradeProposalResponse,
  QueryUpgradeProposalsRequest,
  QueryUpgradeProposalsResponse,
  QueryUpgradeVotesRequest,
  QueryUpgradeVotesResponse,
} from "./query_upgrade";
import {
  QueryAsgardVaultsRequest,
  QueryAsgardVaultsResponse,
  QueryVaultRequest,
  QueryVaultResponse,
  QueryVaultsPubkeysRequest,
  QueryVaultsPubkeysResponse,
} from "./query_vault";
import { QueryVersionRequest, QueryVersionResponse } from "./query_version";
import { BanVoter } from "./type_ban_voter";
import { SwapperClout } from "./type_clout";

export const protobufPackage = "types";

/** Query defines the gRPC querier service. */
export interface Query {
  /** Account returns account details for a given address. */
  Account(request: QueryAccountRequest): Promise<QueryAccountResponse>;
  /** Balances returns the bank module balances for a given address. */
  Balances(request: QueryBalancesRequest): Promise<QueryBalancesResponse>;
  /** Export returns the content of the export file (regression test only). */
  Export(request: QueryExportRequest): Promise<QueryExportResponse>;
  /** Returns the extended pool information for the provided asset. */
  Pool(request: QueryPoolRequest): Promise<QueryPoolResponse>;
  /** Pools returns all extended pools */
  Pools(request: QueryPoolsRequest): Promise<QueryPoolsResponse>;
  DerivedPool(
    request: QueryDerivedPoolRequest
  ): Promise<QueryDerivedPoolResponse>;
  DerivedPools(
    request: QueryDerivedPoolsRequest
  ): Promise<QueryDerivedPoolsResponse>;
  LiquidityProvider(
    request: QueryLiquidityProviderRequest
  ): Promise<QueryLiquidityProviderResponse>;
  LiquidityProviders(
    request: QueryLiquidityProvidersRequest
  ): Promise<QueryLiquidityProvidersResponse>;
  Saver(request: QuerySaverRequest): Promise<QuerySaverResponse>;
  Savers(request: QuerySaversRequest): Promise<QuerySaversResponse>;
  Borrower(request: QueryBorrowerRequest): Promise<QueryBorrowerResponse>;
  Borrowers(request: QueryBorrowersRequest): Promise<QueryBorrowersResponse>;
  TradeUnit(request: QueryTradeUnitRequest): Promise<QueryTradeUnitResponse>;
  TradeUnits(request: QueryTradeUnitsRequest): Promise<QueryTradeUnitsResponse>;
  TradeAccount(
    request: QueryTradeAccountRequest
  ): Promise<QueryTradeAccountsResponse>;
  TradeAccounts(
    request: QueryTradeAccountsRequest
  ): Promise<QueryTradeAccountsResponse>;
  SecuredAsset(
    request: QuerySecuredAssetRequest
  ): Promise<QuerySecuredAssetResponse>;
  SecuredAssets(
    request: QuerySecuredAssetsRequest
  ): Promise<QuerySecuredAssetsResponse>;
  Node(request: QueryNodeRequest): Promise<QueryNodeResponse>;
  Nodes(request: QueryNodesRequest): Promise<QueryNodesResponse>;
  PoolSlip(request: QueryPoolSlipRequest): Promise<QueryPoolSlipsResponse>;
  PoolSlips(request: QueryPoolSlipsRequest): Promise<QueryPoolSlipsResponse>;
  OutboundFee(
    request: QueryOutboundFeeRequest
  ): Promise<QueryOutboundFeesResponse>;
  OutboundFees(
    request: QueryOutboundFeesRequest
  ): Promise<QueryOutboundFeesResponse>;
  StreamingSwap(
    request: QueryStreamingSwapRequest
  ): Promise<QueryStreamingSwapResponse>;
  StreamingSwaps(
    request: QueryStreamingSwapsRequest
  ): Promise<QueryStreamingSwapsResponse>;
  Ban(request: QueryBanRequest): Promise<BanVoter>;
  Ragnarok(request: QueryRagnarokRequest): Promise<QueryRagnarokResponse>;
  RunePool(request: QueryRunePoolRequest): Promise<QueryRunePoolResponse>;
  RuneProvider(
    request: QueryRuneProviderRequest
  ): Promise<QueryRuneProviderResponse>;
  RuneProviders(
    request: QueryRuneProvidersRequest
  ): Promise<QueryRuneProvidersResponse>;
  MimirValues(
    request: QueryMimirValuesRequest
  ): Promise<QueryMimirValuesResponse>;
  MimirWithKey(
    request: QueryMimirWithKeyRequest
  ): Promise<QueryMimirWithKeyResponse>;
  MimirAdminValues(
    request: QueryMimirAdminValuesRequest
  ): Promise<QueryMimirAdminValuesResponse>;
  MimirNodesAllValues(
    request: QueryMimirNodesAllValuesRequest
  ): Promise<QueryMimirNodesAllValuesResponse>;
  MimirNodesValues(
    request: QueryMimirNodesValuesRequest
  ): Promise<QueryMimirNodesValuesResponse>;
  MimirNodeValues(
    request: QueryMimirNodeValuesRequest
  ): Promise<QueryMimirNodeValuesResponse>;
  InboundAddresses(
    request: QueryInboundAddressesRequest
  ): Promise<QueryInboundAddressesResponse>;
  Version(request: QueryVersionRequest): Promise<QueryVersionResponse>;
  Thorname(request: QueryThornameRequest): Promise<QueryThornameResponse>;
  Invariant(request: QueryInvariantRequest): Promise<QueryInvariantResponse>;
  Invariants(request: QueryInvariantsRequest): Promise<QueryInvariantsResponse>;
  Network(request: QueryNetworkRequest): Promise<QueryNetworkResponse>;
  BalanceModule(
    request: QueryBalanceModuleRequest
  ): Promise<QueryBalanceModuleResponse>;
  QuoteSwap(request: QueryQuoteSwapRequest): Promise<QueryQuoteSwapResponse>;
  QuoteSaverDeposit(
    request: QueryQuoteSaverDepositRequest
  ): Promise<QueryQuoteSaverDepositResponse>;
  QuoteSaverWithdraw(
    request: QueryQuoteSaverWithdrawRequest
  ): Promise<QueryQuoteSaverWithdrawResponse>;
  QuoteLoanOpen(
    request: QueryQuoteLoanOpenRequest
  ): Promise<QueryQuoteLoanOpenResponse>;
  QuoteLoanClose(
    request: QueryQuoteLoanCloseRequest
  ): Promise<QueryQuoteLoanCloseResponse>;
  ConstantValues(
    request: QueryConstantValuesRequest
  ): Promise<QueryConstantValuesResponse>;
  SwapQueue(request: QuerySwapQueueRequest): Promise<QuerySwapQueueResponse>;
  LastBlocks(request: QueryLastBlocksRequest): Promise<QueryLastBlocksResponse>;
  ChainsLastBlock(
    request: QueryChainsLastBlockRequest
  ): Promise<QueryLastBlocksResponse>;
  Vault(request: QueryVaultRequest): Promise<QueryVaultResponse>;
  AsgardVaults(
    request: QueryAsgardVaultsRequest
  ): Promise<QueryAsgardVaultsResponse>;
  VaultsPubkeys(
    request: QueryVaultsPubkeysRequest
  ): Promise<QueryVaultsPubkeysResponse>;
  TxStages(request: QueryTxStagesRequest): Promise<QueryTxStagesResponse>;
  TxStatus(request: QueryTxStatusRequest): Promise<QueryTxStatusResponse>;
  Tx(request: QueryTxRequest): Promise<QueryTxResponse>;
  TxVoters(request: QueryTxVotersRequest): Promise<QueryObservedTxVoter>;
  TxVotersOld(request: QueryTxVotersRequest): Promise<QueryObservedTxVoter>;
  Clout(request: QuerySwapperCloutRequest): Promise<SwapperClout>;
  Queue(request: QueryQueueRequest): Promise<QueryQueueResponse>;
  ScheduledOutbound(
    request: QueryScheduledOutboundRequest
  ): Promise<QueryOutboundResponse>;
  PendingOutbound(
    request: QueryPendingOutboundRequest
  ): Promise<QueryOutboundResponse>;
  Block(request: QueryBlockRequest): Promise<QueryBlockResponse>;
  TssKeygenMetric(
    request: QueryTssKeygenMetricRequest
  ): Promise<QueryTssKeygenMetricResponse>;
  TssMetric(request: QueryTssMetricRequest): Promise<QueryTssMetricResponse>;
  Keysign(request: QueryKeysignRequest): Promise<QueryKeysignResponse>;
  KeysignPubkey(
    request: QueryKeysignPubkeyRequest
  ): Promise<QueryKeysignResponse>;
  Keygen(request: QueryKeygenRequest): Promise<QueryKeygenResponse>;
  UpgradeProposals(
    request: QueryUpgradeProposalsRequest
  ): Promise<QueryUpgradeProposalsResponse>;
  UpgradeProposal(
    request: QueryUpgradeProposalRequest
  ): Promise<QueryUpgradeProposalResponse>;
  UpgradeVotes(
    request: QueryUpgradeVotesRequest
  ): Promise<QueryUpgradeVotesResponse>;
}

export const QueryServiceName = "types.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Account = this.Account.bind(this);
    this.Balances = this.Balances.bind(this);
    this.Export = this.Export.bind(this);
    this.Pool = this.Pool.bind(this);
    this.Pools = this.Pools.bind(this);
    this.DerivedPool = this.DerivedPool.bind(this);
    this.DerivedPools = this.DerivedPools.bind(this);
    this.LiquidityProvider = this.LiquidityProvider.bind(this);
    this.LiquidityProviders = this.LiquidityProviders.bind(this);
    this.Saver = this.Saver.bind(this);
    this.Savers = this.Savers.bind(this);
    this.Borrower = this.Borrower.bind(this);
    this.Borrowers = this.Borrowers.bind(this);
    this.TradeUnit = this.TradeUnit.bind(this);
    this.TradeUnits = this.TradeUnits.bind(this);
    this.TradeAccount = this.TradeAccount.bind(this);
    this.TradeAccounts = this.TradeAccounts.bind(this);
    this.SecuredAsset = this.SecuredAsset.bind(this);
    this.SecuredAssets = this.SecuredAssets.bind(this);
    this.Node = this.Node.bind(this);
    this.Nodes = this.Nodes.bind(this);
    this.PoolSlip = this.PoolSlip.bind(this);
    this.PoolSlips = this.PoolSlips.bind(this);
    this.OutboundFee = this.OutboundFee.bind(this);
    this.OutboundFees = this.OutboundFees.bind(this);
    this.StreamingSwap = this.StreamingSwap.bind(this);
    this.StreamingSwaps = this.StreamingSwaps.bind(this);
    this.Ban = this.Ban.bind(this);
    this.Ragnarok = this.Ragnarok.bind(this);
    this.RunePool = this.RunePool.bind(this);
    this.RuneProvider = this.RuneProvider.bind(this);
    this.RuneProviders = this.RuneProviders.bind(this);
    this.MimirValues = this.MimirValues.bind(this);
    this.MimirWithKey = this.MimirWithKey.bind(this);
    this.MimirAdminValues = this.MimirAdminValues.bind(this);
    this.MimirNodesAllValues = this.MimirNodesAllValues.bind(this);
    this.MimirNodesValues = this.MimirNodesValues.bind(this);
    this.MimirNodeValues = this.MimirNodeValues.bind(this);
    this.InboundAddresses = this.InboundAddresses.bind(this);
    this.Version = this.Version.bind(this);
    this.Thorname = this.Thorname.bind(this);
    this.Invariant = this.Invariant.bind(this);
    this.Invariants = this.Invariants.bind(this);
    this.Network = this.Network.bind(this);
    this.BalanceModule = this.BalanceModule.bind(this);
    this.QuoteSwap = this.QuoteSwap.bind(this);
    this.QuoteSaverDeposit = this.QuoteSaverDeposit.bind(this);
    this.QuoteSaverWithdraw = this.QuoteSaverWithdraw.bind(this);
    this.QuoteLoanOpen = this.QuoteLoanOpen.bind(this);
    this.QuoteLoanClose = this.QuoteLoanClose.bind(this);
    this.ConstantValues = this.ConstantValues.bind(this);
    this.SwapQueue = this.SwapQueue.bind(this);
    this.LastBlocks = this.LastBlocks.bind(this);
    this.ChainsLastBlock = this.ChainsLastBlock.bind(this);
    this.Vault = this.Vault.bind(this);
    this.AsgardVaults = this.AsgardVaults.bind(this);
    this.VaultsPubkeys = this.VaultsPubkeys.bind(this);
    this.TxStages = this.TxStages.bind(this);
    this.TxStatus = this.TxStatus.bind(this);
    this.Tx = this.Tx.bind(this);
    this.TxVoters = this.TxVoters.bind(this);
    this.TxVotersOld = this.TxVotersOld.bind(this);
    this.Clout = this.Clout.bind(this);
    this.Queue = this.Queue.bind(this);
    this.ScheduledOutbound = this.ScheduledOutbound.bind(this);
    this.PendingOutbound = this.PendingOutbound.bind(this);
    this.Block = this.Block.bind(this);
    this.TssKeygenMetric = this.TssKeygenMetric.bind(this);
    this.TssMetric = this.TssMetric.bind(this);
    this.Keysign = this.Keysign.bind(this);
    this.KeysignPubkey = this.KeysignPubkey.bind(this);
    this.Keygen = this.Keygen.bind(this);
    this.UpgradeProposals = this.UpgradeProposals.bind(this);
    this.UpgradeProposal = this.UpgradeProposal.bind(this);
    this.UpgradeVotes = this.UpgradeVotes.bind(this);
  }
  Account(request: QueryAccountRequest): Promise<QueryAccountResponse> {
    const data = QueryAccountRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Account", data);
    return promise.then((data) =>
      QueryAccountResponse.decode(new BinaryReader(data))
    );
  }

  Balances(request: QueryBalancesRequest): Promise<QueryBalancesResponse> {
    const data = QueryBalancesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Balances", data);
    return promise.then((data) =>
      QueryBalancesResponse.decode(new BinaryReader(data))
    );
  }

  Export(request: QueryExportRequest): Promise<QueryExportResponse> {
    const data = QueryExportRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Export", data);
    return promise.then((data) =>
      QueryExportResponse.decode(new BinaryReader(data))
    );
  }

  Pool(request: QueryPoolRequest): Promise<QueryPoolResponse> {
    const data = QueryPoolRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Pool", data);
    return promise.then((data) =>
      QueryPoolResponse.decode(new BinaryReader(data))
    );
  }

  Pools(request: QueryPoolsRequest): Promise<QueryPoolsResponse> {
    const data = QueryPoolsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Pools", data);
    return promise.then((data) =>
      QueryPoolsResponse.decode(new BinaryReader(data))
    );
  }

  DerivedPool(
    request: QueryDerivedPoolRequest
  ): Promise<QueryDerivedPoolResponse> {
    const data = QueryDerivedPoolRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DerivedPool", data);
    return promise.then((data) =>
      QueryDerivedPoolResponse.decode(new BinaryReader(data))
    );
  }

  DerivedPools(
    request: QueryDerivedPoolsRequest
  ): Promise<QueryDerivedPoolsResponse> {
    const data = QueryDerivedPoolsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DerivedPools", data);
    return promise.then((data) =>
      QueryDerivedPoolsResponse.decode(new BinaryReader(data))
    );
  }

  LiquidityProvider(
    request: QueryLiquidityProviderRequest
  ): Promise<QueryLiquidityProviderResponse> {
    const data = QueryLiquidityProviderRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "LiquidityProvider", data);
    return promise.then((data) =>
      QueryLiquidityProviderResponse.decode(new BinaryReader(data))
    );
  }

  LiquidityProviders(
    request: QueryLiquidityProvidersRequest
  ): Promise<QueryLiquidityProvidersResponse> {
    const data = QueryLiquidityProvidersRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "LiquidityProviders", data);
    return promise.then((data) =>
      QueryLiquidityProvidersResponse.decode(new BinaryReader(data))
    );
  }

  Saver(request: QuerySaverRequest): Promise<QuerySaverResponse> {
    const data = QuerySaverRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Saver", data);
    return promise.then((data) =>
      QuerySaverResponse.decode(new BinaryReader(data))
    );
  }

  Savers(request: QuerySaversRequest): Promise<QuerySaversResponse> {
    const data = QuerySaversRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Savers", data);
    return promise.then((data) =>
      QuerySaversResponse.decode(new BinaryReader(data))
    );
  }

  Borrower(request: QueryBorrowerRequest): Promise<QueryBorrowerResponse> {
    const data = QueryBorrowerRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Borrower", data);
    return promise.then((data) =>
      QueryBorrowerResponse.decode(new BinaryReader(data))
    );
  }

  Borrowers(request: QueryBorrowersRequest): Promise<QueryBorrowersResponse> {
    const data = QueryBorrowersRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Borrowers", data);
    return promise.then((data) =>
      QueryBorrowersResponse.decode(new BinaryReader(data))
    );
  }

  TradeUnit(request: QueryTradeUnitRequest): Promise<QueryTradeUnitResponse> {
    const data = QueryTradeUnitRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "TradeUnit", data);
    return promise.then((data) =>
      QueryTradeUnitResponse.decode(new BinaryReader(data))
    );
  }

  TradeUnits(
    request: QueryTradeUnitsRequest
  ): Promise<QueryTradeUnitsResponse> {
    const data = QueryTradeUnitsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "TradeUnits", data);
    return promise.then((data) =>
      QueryTradeUnitsResponse.decode(new BinaryReader(data))
    );
  }

  TradeAccount(
    request: QueryTradeAccountRequest
  ): Promise<QueryTradeAccountsResponse> {
    const data = QueryTradeAccountRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "TradeAccount", data);
    return promise.then((data) =>
      QueryTradeAccountsResponse.decode(new BinaryReader(data))
    );
  }

  TradeAccounts(
    request: QueryTradeAccountsRequest
  ): Promise<QueryTradeAccountsResponse> {
    const data = QueryTradeAccountsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "TradeAccounts", data);
    return promise.then((data) =>
      QueryTradeAccountsResponse.decode(new BinaryReader(data))
    );
  }

  SecuredAsset(
    request: QuerySecuredAssetRequest
  ): Promise<QuerySecuredAssetResponse> {
    const data = QuerySecuredAssetRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SecuredAsset", data);
    return promise.then((data) =>
      QuerySecuredAssetResponse.decode(new BinaryReader(data))
    );
  }

  SecuredAssets(
    request: QuerySecuredAssetsRequest
  ): Promise<QuerySecuredAssetsResponse> {
    const data = QuerySecuredAssetsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SecuredAssets", data);
    return promise.then((data) =>
      QuerySecuredAssetsResponse.decode(new BinaryReader(data))
    );
  }

  Node(request: QueryNodeRequest): Promise<QueryNodeResponse> {
    const data = QueryNodeRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Node", data);
    return promise.then((data) =>
      QueryNodeResponse.decode(new BinaryReader(data))
    );
  }

  Nodes(request: QueryNodesRequest): Promise<QueryNodesResponse> {
    const data = QueryNodesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Nodes", data);
    return promise.then((data) =>
      QueryNodesResponse.decode(new BinaryReader(data))
    );
  }

  PoolSlip(request: QueryPoolSlipRequest): Promise<QueryPoolSlipsResponse> {
    const data = QueryPoolSlipRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "PoolSlip", data);
    return promise.then((data) =>
      QueryPoolSlipsResponse.decode(new BinaryReader(data))
    );
  }

  PoolSlips(request: QueryPoolSlipsRequest): Promise<QueryPoolSlipsResponse> {
    const data = QueryPoolSlipsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "PoolSlips", data);
    return promise.then((data) =>
      QueryPoolSlipsResponse.decode(new BinaryReader(data))
    );
  }

  OutboundFee(
    request: QueryOutboundFeeRequest
  ): Promise<QueryOutboundFeesResponse> {
    const data = QueryOutboundFeeRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "OutboundFee", data);
    return promise.then((data) =>
      QueryOutboundFeesResponse.decode(new BinaryReader(data))
    );
  }

  OutboundFees(
    request: QueryOutboundFeesRequest
  ): Promise<QueryOutboundFeesResponse> {
    const data = QueryOutboundFeesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "OutboundFees", data);
    return promise.then((data) =>
      QueryOutboundFeesResponse.decode(new BinaryReader(data))
    );
  }

  StreamingSwap(
    request: QueryStreamingSwapRequest
  ): Promise<QueryStreamingSwapResponse> {
    const data = QueryStreamingSwapRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "StreamingSwap", data);
    return promise.then((data) =>
      QueryStreamingSwapResponse.decode(new BinaryReader(data))
    );
  }

  StreamingSwaps(
    request: QueryStreamingSwapsRequest
  ): Promise<QueryStreamingSwapsResponse> {
    const data = QueryStreamingSwapsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "StreamingSwaps", data);
    return promise.then((data) =>
      QueryStreamingSwapsResponse.decode(new BinaryReader(data))
    );
  }

  Ban(request: QueryBanRequest): Promise<BanVoter> {
    const data = QueryBanRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Ban", data);
    return promise.then((data) => BanVoter.decode(new BinaryReader(data)));
  }

  Ragnarok(request: QueryRagnarokRequest): Promise<QueryRagnarokResponse> {
    const data = QueryRagnarokRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Ragnarok", data);
    return promise.then((data) =>
      QueryRagnarokResponse.decode(new BinaryReader(data))
    );
  }

  RunePool(request: QueryRunePoolRequest): Promise<QueryRunePoolResponse> {
    const data = QueryRunePoolRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "RunePool", data);
    return promise.then((data) =>
      QueryRunePoolResponse.decode(new BinaryReader(data))
    );
  }

  RuneProvider(
    request: QueryRuneProviderRequest
  ): Promise<QueryRuneProviderResponse> {
    const data = QueryRuneProviderRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "RuneProvider", data);
    return promise.then((data) =>
      QueryRuneProviderResponse.decode(new BinaryReader(data))
    );
  }

  RuneProviders(
    request: QueryRuneProvidersRequest
  ): Promise<QueryRuneProvidersResponse> {
    const data = QueryRuneProvidersRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "RuneProviders", data);
    return promise.then((data) =>
      QueryRuneProvidersResponse.decode(new BinaryReader(data))
    );
  }

  MimirValues(
    request: QueryMimirValuesRequest
  ): Promise<QueryMimirValuesResponse> {
    const data = QueryMimirValuesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "MimirValues", data);
    return promise.then((data) =>
      QueryMimirValuesResponse.decode(new BinaryReader(data))
    );
  }

  MimirWithKey(
    request: QueryMimirWithKeyRequest
  ): Promise<QueryMimirWithKeyResponse> {
    const data = QueryMimirWithKeyRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "MimirWithKey", data);
    return promise.then((data) =>
      QueryMimirWithKeyResponse.decode(new BinaryReader(data))
    );
  }

  MimirAdminValues(
    request: QueryMimirAdminValuesRequest
  ): Promise<QueryMimirAdminValuesResponse> {
    const data = QueryMimirAdminValuesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "MimirAdminValues", data);
    return promise.then((data) =>
      QueryMimirAdminValuesResponse.decode(new BinaryReader(data))
    );
  }

  MimirNodesAllValues(
    request: QueryMimirNodesAllValuesRequest
  ): Promise<QueryMimirNodesAllValuesResponse> {
    const data = QueryMimirNodesAllValuesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "MimirNodesAllValues", data);
    return promise.then((data) =>
      QueryMimirNodesAllValuesResponse.decode(new BinaryReader(data))
    );
  }

  MimirNodesValues(
    request: QueryMimirNodesValuesRequest
  ): Promise<QueryMimirNodesValuesResponse> {
    const data = QueryMimirNodesValuesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "MimirNodesValues", data);
    return promise.then((data) =>
      QueryMimirNodesValuesResponse.decode(new BinaryReader(data))
    );
  }

  MimirNodeValues(
    request: QueryMimirNodeValuesRequest
  ): Promise<QueryMimirNodeValuesResponse> {
    const data = QueryMimirNodeValuesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "MimirNodeValues", data);
    return promise.then((data) =>
      QueryMimirNodeValuesResponse.decode(new BinaryReader(data))
    );
  }

  InboundAddresses(
    request: QueryInboundAddressesRequest
  ): Promise<QueryInboundAddressesResponse> {
    const data = QueryInboundAddressesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "InboundAddresses", data);
    return promise.then((data) =>
      QueryInboundAddressesResponse.decode(new BinaryReader(data))
    );
  }

  Version(request: QueryVersionRequest): Promise<QueryVersionResponse> {
    const data = QueryVersionRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Version", data);
    return promise.then((data) =>
      QueryVersionResponse.decode(new BinaryReader(data))
    );
  }

  Thorname(request: QueryThornameRequest): Promise<QueryThornameResponse> {
    const data = QueryThornameRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Thorname", data);
    return promise.then((data) =>
      QueryThornameResponse.decode(new BinaryReader(data))
    );
  }

  Invariant(request: QueryInvariantRequest): Promise<QueryInvariantResponse> {
    const data = QueryInvariantRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Invariant", data);
    return promise.then((data) =>
      QueryInvariantResponse.decode(new BinaryReader(data))
    );
  }

  Invariants(
    request: QueryInvariantsRequest
  ): Promise<QueryInvariantsResponse> {
    const data = QueryInvariantsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Invariants", data);
    return promise.then((data) =>
      QueryInvariantsResponse.decode(new BinaryReader(data))
    );
  }

  Network(request: QueryNetworkRequest): Promise<QueryNetworkResponse> {
    const data = QueryNetworkRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Network", data);
    return promise.then((data) =>
      QueryNetworkResponse.decode(new BinaryReader(data))
    );
  }

  BalanceModule(
    request: QueryBalanceModuleRequest
  ): Promise<QueryBalanceModuleResponse> {
    const data = QueryBalanceModuleRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "BalanceModule", data);
    return promise.then((data) =>
      QueryBalanceModuleResponse.decode(new BinaryReader(data))
    );
  }

  QuoteSwap(request: QueryQuoteSwapRequest): Promise<QueryQuoteSwapResponse> {
    const data = QueryQuoteSwapRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "QuoteSwap", data);
    return promise.then((data) =>
      QueryQuoteSwapResponse.decode(new BinaryReader(data))
    );
  }

  QuoteSaverDeposit(
    request: QueryQuoteSaverDepositRequest
  ): Promise<QueryQuoteSaverDepositResponse> {
    const data = QueryQuoteSaverDepositRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "QuoteSaverDeposit", data);
    return promise.then((data) =>
      QueryQuoteSaverDepositResponse.decode(new BinaryReader(data))
    );
  }

  QuoteSaverWithdraw(
    request: QueryQuoteSaverWithdrawRequest
  ): Promise<QueryQuoteSaverWithdrawResponse> {
    const data = QueryQuoteSaverWithdrawRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "QuoteSaverWithdraw", data);
    return promise.then((data) =>
      QueryQuoteSaverWithdrawResponse.decode(new BinaryReader(data))
    );
  }

  QuoteLoanOpen(
    request: QueryQuoteLoanOpenRequest
  ): Promise<QueryQuoteLoanOpenResponse> {
    const data = QueryQuoteLoanOpenRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "QuoteLoanOpen", data);
    return promise.then((data) =>
      QueryQuoteLoanOpenResponse.decode(new BinaryReader(data))
    );
  }

  QuoteLoanClose(
    request: QueryQuoteLoanCloseRequest
  ): Promise<QueryQuoteLoanCloseResponse> {
    const data = QueryQuoteLoanCloseRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "QuoteLoanClose", data);
    return promise.then((data) =>
      QueryQuoteLoanCloseResponse.decode(new BinaryReader(data))
    );
  }

  ConstantValues(
    request: QueryConstantValuesRequest
  ): Promise<QueryConstantValuesResponse> {
    const data = QueryConstantValuesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ConstantValues", data);
    return promise.then((data) =>
      QueryConstantValuesResponse.decode(new BinaryReader(data))
    );
  }

  SwapQueue(request: QuerySwapQueueRequest): Promise<QuerySwapQueueResponse> {
    const data = QuerySwapQueueRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SwapQueue", data);
    return promise.then((data) =>
      QuerySwapQueueResponse.decode(new BinaryReader(data))
    );
  }

  LastBlocks(
    request: QueryLastBlocksRequest
  ): Promise<QueryLastBlocksResponse> {
    const data = QueryLastBlocksRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "LastBlocks", data);
    return promise.then((data) =>
      QueryLastBlocksResponse.decode(new BinaryReader(data))
    );
  }

  ChainsLastBlock(
    request: QueryChainsLastBlockRequest
  ): Promise<QueryLastBlocksResponse> {
    const data = QueryChainsLastBlockRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ChainsLastBlock", data);
    return promise.then((data) =>
      QueryLastBlocksResponse.decode(new BinaryReader(data))
    );
  }

  Vault(request: QueryVaultRequest): Promise<QueryVaultResponse> {
    const data = QueryVaultRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Vault", data);
    return promise.then((data) =>
      QueryVaultResponse.decode(new BinaryReader(data))
    );
  }

  AsgardVaults(
    request: QueryAsgardVaultsRequest
  ): Promise<QueryAsgardVaultsResponse> {
    const data = QueryAsgardVaultsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AsgardVaults", data);
    return promise.then((data) =>
      QueryAsgardVaultsResponse.decode(new BinaryReader(data))
    );
  }

  VaultsPubkeys(
    request: QueryVaultsPubkeysRequest
  ): Promise<QueryVaultsPubkeysResponse> {
    const data = QueryVaultsPubkeysRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "VaultsPubkeys", data);
    return promise.then((data) =>
      QueryVaultsPubkeysResponse.decode(new BinaryReader(data))
    );
  }

  TxStages(request: QueryTxStagesRequest): Promise<QueryTxStagesResponse> {
    const data = QueryTxStagesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "TxStages", data);
    return promise.then((data) =>
      QueryTxStagesResponse.decode(new BinaryReader(data))
    );
  }

  TxStatus(request: QueryTxStatusRequest): Promise<QueryTxStatusResponse> {
    const data = QueryTxStatusRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "TxStatus", data);
    return promise.then((data) =>
      QueryTxStatusResponse.decode(new BinaryReader(data))
    );
  }

  Tx(request: QueryTxRequest): Promise<QueryTxResponse> {
    const data = QueryTxRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Tx", data);
    return promise.then((data) =>
      QueryTxResponse.decode(new BinaryReader(data))
    );
  }

  TxVoters(request: QueryTxVotersRequest): Promise<QueryObservedTxVoter> {
    const data = QueryTxVotersRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "TxVoters", data);
    return promise.then((data) =>
      QueryObservedTxVoter.decode(new BinaryReader(data))
    );
  }

  TxVotersOld(request: QueryTxVotersRequest): Promise<QueryObservedTxVoter> {
    const data = QueryTxVotersRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "TxVotersOld", data);
    return promise.then((data) =>
      QueryObservedTxVoter.decode(new BinaryReader(data))
    );
  }

  Clout(request: QuerySwapperCloutRequest): Promise<SwapperClout> {
    const data = QuerySwapperCloutRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Clout", data);
    return promise.then((data) => SwapperClout.decode(new BinaryReader(data)));
  }

  Queue(request: QueryQueueRequest): Promise<QueryQueueResponse> {
    const data = QueryQueueRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Queue", data);
    return promise.then((data) =>
      QueryQueueResponse.decode(new BinaryReader(data))
    );
  }

  ScheduledOutbound(
    request: QueryScheduledOutboundRequest
  ): Promise<QueryOutboundResponse> {
    const data = QueryScheduledOutboundRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ScheduledOutbound", data);
    return promise.then((data) =>
      QueryOutboundResponse.decode(new BinaryReader(data))
    );
  }

  PendingOutbound(
    request: QueryPendingOutboundRequest
  ): Promise<QueryOutboundResponse> {
    const data = QueryPendingOutboundRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "PendingOutbound", data);
    return promise.then((data) =>
      QueryOutboundResponse.decode(new BinaryReader(data))
    );
  }

  Block(request: QueryBlockRequest): Promise<QueryBlockResponse> {
    const data = QueryBlockRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Block", data);
    return promise.then((data) =>
      QueryBlockResponse.decode(new BinaryReader(data))
    );
  }

  TssKeygenMetric(
    request: QueryTssKeygenMetricRequest
  ): Promise<QueryTssKeygenMetricResponse> {
    const data = QueryTssKeygenMetricRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "TssKeygenMetric", data);
    return promise.then((data) =>
      QueryTssKeygenMetricResponse.decode(new BinaryReader(data))
    );
  }

  TssMetric(request: QueryTssMetricRequest): Promise<QueryTssMetricResponse> {
    const data = QueryTssMetricRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "TssMetric", data);
    return promise.then((data) =>
      QueryTssMetricResponse.decode(new BinaryReader(data))
    );
  }

  Keysign(request: QueryKeysignRequest): Promise<QueryKeysignResponse> {
    const data = QueryKeysignRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Keysign", data);
    return promise.then((data) =>
      QueryKeysignResponse.decode(new BinaryReader(data))
    );
  }

  KeysignPubkey(
    request: QueryKeysignPubkeyRequest
  ): Promise<QueryKeysignResponse> {
    const data = QueryKeysignPubkeyRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "KeysignPubkey", data);
    return promise.then((data) =>
      QueryKeysignResponse.decode(new BinaryReader(data))
    );
  }

  Keygen(request: QueryKeygenRequest): Promise<QueryKeygenResponse> {
    const data = QueryKeygenRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Keygen", data);
    return promise.then((data) =>
      QueryKeygenResponse.decode(new BinaryReader(data))
    );
  }

  UpgradeProposals(
    request: QueryUpgradeProposalsRequest
  ): Promise<QueryUpgradeProposalsResponse> {
    const data = QueryUpgradeProposalsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpgradeProposals", data);
    return promise.then((data) =>
      QueryUpgradeProposalsResponse.decode(new BinaryReader(data))
    );
  }

  UpgradeProposal(
    request: QueryUpgradeProposalRequest
  ): Promise<QueryUpgradeProposalResponse> {
    const data = QueryUpgradeProposalRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpgradeProposal", data);
    return promise.then((data) =>
      QueryUpgradeProposalResponse.decode(new BinaryReader(data))
    );
  }

  UpgradeVotes(
    request: QueryUpgradeVotesRequest
  ): Promise<QueryUpgradeVotesResponse> {
    const data = QueryUpgradeVotesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpgradeVotes", data);
    return promise.then((data) =>
      QueryUpgradeVotesResponse.decode(new BinaryReader(data))
    );
  }
}

interface Rpc {
  request(
    service: string,
    method: string,
    data: Uint8Array
  ): Promise<Uint8Array>;
}
