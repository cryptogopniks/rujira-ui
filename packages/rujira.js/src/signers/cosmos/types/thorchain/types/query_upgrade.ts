// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/query_upgrade.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "../../binary";
import { DeepPartial, Exact, isSet } from "../../helpers";
export const protobufPackage = "types";

export interface QueryUpgradeProposalRequest {
  name: string;
  height: string;
}

export interface QueryUpgradeProposalResponse {
  /** the name of the upgrade */
  name: string;
  /** the block height at which the upgrade will occur */
  height: number;
  /** the description of the upgrade, typically json with URLs to binaries for use with automation tools */
  info: string;
  /** whether the upgrade has been approved by the active validators */
  approved: boolean;
  /** the percentage of active validators that have approved the upgrade */
  approvedPercent: string;
  /** the amount of additional active validators required to reach quorum for the upgrade */
  validatorsToQuorum: number;
}

export interface QueryUpgradeProposalsRequest {
  height: string;
}

export interface QueryUpgradeProposalsResponse {
  upgradeProposals: QueryUpgradeProposalResponse[];
}

export interface QueryUpgradeVotesRequest {
  name: string;
  height: string;
}

export interface UpgradeVote {
  nodeAddress: string;
  vote: string;
}

export interface QueryUpgradeVotesResponse {
  upgradeVotes: UpgradeVote[];
}

function createBaseQueryUpgradeProposalRequest(): QueryUpgradeProposalRequest {
  return { name: "", height: "" };
}

export const QueryUpgradeProposalRequest = {
  encode(
    message: QueryUpgradeProposalRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.height !== "") {
      writer.uint32(18).string(message.height);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryUpgradeProposalRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryUpgradeProposalRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryUpgradeProposalRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QueryUpgradeProposalRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryUpgradeProposalRequest>, I>>(
    base?: I
  ): QueryUpgradeProposalRequest {
    return QueryUpgradeProposalRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryUpgradeProposalRequest>, I>>(
    object: I
  ): QueryUpgradeProposalRequest {
    const message = createBaseQueryUpgradeProposalRequest();
    message.name = object.name ?? "";
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseQueryUpgradeProposalResponse(): QueryUpgradeProposalResponse {
  return {
    name: "",
    height: 0,
    info: "",
    approved: false,
    approvedPercent: "",
    validatorsToQuorum: 0,
  };
}

export const QueryUpgradeProposalResponse = {
  encode(
    message: QueryUpgradeProposalResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.height !== 0) {
      writer.uint32(16).int64(message.height);
    }
    if (message.info !== "") {
      writer.uint32(26).string(message.info);
    }
    if (message.approved !== false) {
      writer.uint32(32).bool(message.approved);
    }
    if (message.approvedPercent !== "") {
      writer.uint32(42).string(message.approvedPercent);
    }
    if (message.validatorsToQuorum !== 0) {
      writer.uint32(48).int64(message.validatorsToQuorum);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryUpgradeProposalResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryUpgradeProposalResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.height = Number(reader.int64());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.info = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.approved = reader.bool();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.approvedPercent = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.validatorsToQuorum = Number(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryUpgradeProposalResponse {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      info: isSet(object.info) ? globalThis.String(object.info) : "",
      approved: isSet(object.approved)
        ? globalThis.Boolean(object.approved)
        : false,
      approvedPercent: isSet(object.approvedPercent)
        ? globalThis.String(object.approvedPercent)
        : "",
      validatorsToQuorum: isSet(object.validatorsToQuorum)
        ? globalThis.Number(object.validatorsToQuorum)
        : 0,
    };
  },

  toJSON(message: QueryUpgradeProposalResponse): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.info !== "") {
      obj.info = message.info;
    }
    if (message.approved !== false) {
      obj.approved = message.approved;
    }
    if (message.approvedPercent !== "") {
      obj.approvedPercent = message.approvedPercent;
    }
    if (message.validatorsToQuorum !== 0) {
      obj.validatorsToQuorum = Math.round(message.validatorsToQuorum);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryUpgradeProposalResponse>, I>>(
    base?: I
  ): QueryUpgradeProposalResponse {
    return QueryUpgradeProposalResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryUpgradeProposalResponse>, I>>(
    object: I
  ): QueryUpgradeProposalResponse {
    const message = createBaseQueryUpgradeProposalResponse();
    message.name = object.name ?? "";
    message.height = object.height ?? 0;
    message.info = object.info ?? "";
    message.approved = object.approved ?? false;
    message.approvedPercent = object.approvedPercent ?? "";
    message.validatorsToQuorum = object.validatorsToQuorum ?? 0;
    return message;
  },
};

function createBaseQueryUpgradeProposalsRequest(): QueryUpgradeProposalsRequest {
  return { height: "" };
}

export const QueryUpgradeProposalsRequest = {
  encode(
    message: QueryUpgradeProposalsRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.height !== "") {
      writer.uint32(10).string(message.height);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryUpgradeProposalsRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryUpgradeProposalsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryUpgradeProposalsRequest {
    return {
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QueryUpgradeProposalsRequest): unknown {
    const obj: any = {};
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryUpgradeProposalsRequest>, I>>(
    base?: I
  ): QueryUpgradeProposalsRequest {
    return QueryUpgradeProposalsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryUpgradeProposalsRequest>, I>>(
    object: I
  ): QueryUpgradeProposalsRequest {
    const message = createBaseQueryUpgradeProposalsRequest();
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseQueryUpgradeProposalsResponse(): QueryUpgradeProposalsResponse {
  return { upgradeProposals: [] };
}

export const QueryUpgradeProposalsResponse = {
  encode(
    message: QueryUpgradeProposalsResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    for (const v of message.upgradeProposals) {
      QueryUpgradeProposalResponse.encode(
        v!,
        writer.uint32(10).fork()
      ).ldelim();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryUpgradeProposalsResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryUpgradeProposalsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.upgradeProposals.push(
            QueryUpgradeProposalResponse.decode(reader, reader.uint32())
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryUpgradeProposalsResponse {
    return {
      upgradeProposals: globalThis.Array.isArray(object?.upgradeProposals)
        ? object.upgradeProposals.map((e: any) =>
            QueryUpgradeProposalResponse.fromJSON(e)
          )
        : [],
    };
  },

  toJSON(message: QueryUpgradeProposalsResponse): unknown {
    const obj: any = {};
    if (message.upgradeProposals?.length) {
      obj.upgradeProposals = message.upgradeProposals.map((e) =>
        QueryUpgradeProposalResponse.toJSON(e)
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryUpgradeProposalsResponse>, I>>(
    base?: I
  ): QueryUpgradeProposalsResponse {
    return QueryUpgradeProposalsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryUpgradeProposalsResponse>, I>>(
    object: I
  ): QueryUpgradeProposalsResponse {
    const message = createBaseQueryUpgradeProposalsResponse();
    message.upgradeProposals =
      object.upgradeProposals?.map((e) =>
        QueryUpgradeProposalResponse.fromPartial(e)
      ) || [];
    return message;
  },
};

function createBaseQueryUpgradeVotesRequest(): QueryUpgradeVotesRequest {
  return { name: "", height: "" };
}

export const QueryUpgradeVotesRequest = {
  encode(
    message: QueryUpgradeVotesRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.height !== "") {
      writer.uint32(18).string(message.height);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryUpgradeVotesRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryUpgradeVotesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryUpgradeVotesRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QueryUpgradeVotesRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryUpgradeVotesRequest>, I>>(
    base?: I
  ): QueryUpgradeVotesRequest {
    return QueryUpgradeVotesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryUpgradeVotesRequest>, I>>(
    object: I
  ): QueryUpgradeVotesRequest {
    const message = createBaseQueryUpgradeVotesRequest();
    message.name = object.name ?? "";
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseUpgradeVote(): UpgradeVote {
  return { nodeAddress: "", vote: "" };
}

export const UpgradeVote = {
  encode(
    message: UpgradeVote,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.nodeAddress !== "") {
      writer.uint32(10).string(message.nodeAddress);
    }
    if (message.vote !== "") {
      writer.uint32(18).string(message.vote);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpgradeVote {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpgradeVote();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.nodeAddress = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.vote = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpgradeVote {
    return {
      nodeAddress: isSet(object.nodeAddress)
        ? globalThis.String(object.nodeAddress)
        : "",
      vote: isSet(object.vote) ? globalThis.String(object.vote) : "",
    };
  },

  toJSON(message: UpgradeVote): unknown {
    const obj: any = {};
    if (message.nodeAddress !== "") {
      obj.nodeAddress = message.nodeAddress;
    }
    if (message.vote !== "") {
      obj.vote = message.vote;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpgradeVote>, I>>(base?: I): UpgradeVote {
    return UpgradeVote.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpgradeVote>, I>>(
    object: I
  ): UpgradeVote {
    const message = createBaseUpgradeVote();
    message.nodeAddress = object.nodeAddress ?? "";
    message.vote = object.vote ?? "";
    return message;
  },
};

function createBaseQueryUpgradeVotesResponse(): QueryUpgradeVotesResponse {
  return { upgradeVotes: [] };
}

export const QueryUpgradeVotesResponse = {
  encode(
    message: QueryUpgradeVotesResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    for (const v of message.upgradeVotes) {
      UpgradeVote.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryUpgradeVotesResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryUpgradeVotesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.upgradeVotes.push(
            UpgradeVote.decode(reader, reader.uint32())
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryUpgradeVotesResponse {
    return {
      upgradeVotes: globalThis.Array.isArray(object?.upgradeVotes)
        ? object.upgradeVotes.map((e: any) => UpgradeVote.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryUpgradeVotesResponse): unknown {
    const obj: any = {};
    if (message.upgradeVotes?.length) {
      obj.upgradeVotes = message.upgradeVotes.map((e) => UpgradeVote.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryUpgradeVotesResponse>, I>>(
    base?: I
  ): QueryUpgradeVotesResponse {
    return QueryUpgradeVotesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryUpgradeVotesResponse>, I>>(
    object: I
  ): QueryUpgradeVotesResponse {
    const message = createBaseQueryUpgradeVotesResponse();
    message.upgradeVotes =
      object.upgradeVotes?.map((e) => UpgradeVote.fromPartial(e)) || [];
    return message;
  },
};
