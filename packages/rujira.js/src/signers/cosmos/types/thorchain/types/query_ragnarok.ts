// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/query_ragnarok.proto

import { BinaryReader, BinaryWriter } from "../../binary";
import { DeepPartial, Exact, isSet } from "../../helpers";

/* eslint-disable */

export const protobufPackage = "types";

export interface QueryRagnarokRequest {
  height: string;
}

export interface QueryRagnarokResponse {
  inProgress: boolean;
}

function createBaseQueryRagnarokRequest(): QueryRagnarokRequest {
  return { height: "" };
}

export const QueryRagnarokRequest = {
  encode(
    message: QueryRagnarokRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.height !== "") {
      writer.uint32(10).string(message.height);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryRagnarokRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryRagnarokRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryRagnarokRequest {
    return {
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QueryRagnarokRequest): unknown {
    const obj: any = {};
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryRagnarokRequest>, I>>(
    base?: I
  ): QueryRagnarokRequest {
    return QueryRagnarokRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryRagnarokRequest>, I>>(
    object: I
  ): QueryRagnarokRequest {
    const message = createBaseQueryRagnarokRequest();
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseQueryRagnarokResponse(): QueryRagnarokResponse {
  return { inProgress: false };
}

export const QueryRagnarokResponse = {
  encode(
    message: QueryRagnarokResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.inProgress !== false) {
      writer.uint32(8).bool(message.inProgress);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryRagnarokResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryRagnarokResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.inProgress = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryRagnarokResponse {
    return {
      inProgress: isSet(object.inProgress)
        ? globalThis.Boolean(object.inProgress)
        : false,
    };
  },

  toJSON(message: QueryRagnarokResponse): unknown {
    const obj: any = {};
    if (message.inProgress !== false) {
      obj.inProgress = message.inProgress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryRagnarokResponse>, I>>(
    base?: I
  ): QueryRagnarokResponse {
    return QueryRagnarokResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryRagnarokResponse>, I>>(
    object: I
  ): QueryRagnarokResponse {
    const message = createBaseQueryRagnarokResponse();
    message.inProgress = object.inProgress ?? false;
    return message;
  },
};
