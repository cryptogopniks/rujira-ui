// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/type_trade_account.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "../../binary";
import {
  base64FromBytes,
  bytesFromBase64,
  DeepPartial,
  Exact,
  isSet,
} from "../../helpers";
import { Asset } from "../common/common";

export const protobufPackage = "types";

export interface TradeAccount {
  asset: Asset | undefined;
  units: string;
  owner: Uint8Array;
  lastAddHeight: number;
  lastWithdrawHeight: number;
}

export interface TradeUnit {
  asset: Asset | undefined;
  units: string;
  depth: string;
}

function createBaseTradeAccount(): TradeAccount {
  return {
    asset: undefined,
    units: "",
    owner: new Uint8Array(0),
    lastAddHeight: 0,
    lastWithdrawHeight: 0,
  };
}

export const TradeAccount = {
  encode(
    message: TradeAccount,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.asset !== undefined) {
      Asset.encode(message.asset, writer.uint32(10).fork()).ldelim();
    }
    if (message.units !== "") {
      writer.uint32(18).string(message.units);
    }
    if (message.owner.length !== 0) {
      writer.uint32(26).bytes(message.owner);
    }
    if (message.lastAddHeight !== 0) {
      writer.uint32(32).int64(message.lastAddHeight);
    }
    if (message.lastWithdrawHeight !== 0) {
      writer.uint32(40).int64(message.lastWithdrawHeight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TradeAccount {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTradeAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.asset = Asset.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.units = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.owner = reader.bytes();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.lastAddHeight = Number(reader.int64());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.lastWithdrawHeight = Number(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TradeAccount {
    return {
      asset: isSet(object.asset) ? Asset.fromJSON(object.asset) : undefined,
      units: isSet(object.units) ? globalThis.String(object.units) : "",
      owner: isSet(object.owner)
        ? bytesFromBase64(object.owner)
        : new Uint8Array(0),
      lastAddHeight: isSet(object.lastAddHeight)
        ? globalThis.Number(object.lastAddHeight)
        : 0,
      lastWithdrawHeight: isSet(object.lastWithdrawHeight)
        ? globalThis.Number(object.lastWithdrawHeight)
        : 0,
    };
  },

  toJSON(message: TradeAccount): unknown {
    const obj: any = {};
    if (message.asset !== undefined) {
      obj.asset = Asset.toJSON(message.asset);
    }
    if (message.units !== "") {
      obj.units = message.units;
    }
    if (message.owner.length !== 0) {
      obj.owner = base64FromBytes(message.owner);
    }
    if (message.lastAddHeight !== 0) {
      obj.lastAddHeight = Math.round(message.lastAddHeight);
    }
    if (message.lastWithdrawHeight !== 0) {
      obj.lastWithdrawHeight = Math.round(message.lastWithdrawHeight);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TradeAccount>, I>>(
    base?: I
  ): TradeAccount {
    return TradeAccount.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TradeAccount>, I>>(
    object: I
  ): TradeAccount {
    const message = createBaseTradeAccount();
    message.asset =
      object.asset !== undefined && object.asset !== null
        ? Asset.fromPartial(object.asset)
        : undefined;
    message.units = object.units ?? "";
    message.owner = object.owner ?? new Uint8Array(0);
    message.lastAddHeight = object.lastAddHeight ?? 0;
    message.lastWithdrawHeight = object.lastWithdrawHeight ?? 0;
    return message;
  },
};

function createBaseTradeUnit(): TradeUnit {
  return { asset: undefined, units: "", depth: "" };
}

export const TradeUnit = {
  encode(
    message: TradeUnit,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.asset !== undefined) {
      Asset.encode(message.asset, writer.uint32(10).fork()).ldelim();
    }
    if (message.units !== "") {
      writer.uint32(18).string(message.units);
    }
    if (message.depth !== "") {
      writer.uint32(26).string(message.depth);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TradeUnit {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTradeUnit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.asset = Asset.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.units = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.depth = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TradeUnit {
    return {
      asset: isSet(object.asset) ? Asset.fromJSON(object.asset) : undefined,
      units: isSet(object.units) ? globalThis.String(object.units) : "",
      depth: isSet(object.depth) ? globalThis.String(object.depth) : "",
    };
  },

  toJSON(message: TradeUnit): unknown {
    const obj: any = {};
    if (message.asset !== undefined) {
      obj.asset = Asset.toJSON(message.asset);
    }
    if (message.units !== "") {
      obj.units = message.units;
    }
    if (message.depth !== "") {
      obj.depth = message.depth;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TradeUnit>, I>>(base?: I): TradeUnit {
    return TradeUnit.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TradeUnit>, I>>(
    object: I
  ): TradeUnit {
    const message = createBaseTradeUnit();
    message.asset =
      object.asset !== undefined && object.asset !== null
        ? Asset.fromPartial(object.asset)
        : undefined;
    message.units = object.units ?? "";
    message.depth = object.depth ?? "";
    return message;
  },
};
