// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/type_chain_contract.proto

import { BinaryReader, BinaryWriter } from "../../binary";
import { DeepPartial, Exact, isSet } from "../../helpers";

/* eslint-disable */

export const protobufPackage = "types";

export interface ChainContract {
  chain: string;
  router: string;
}

function createBaseChainContract(): ChainContract {
  return { chain: "", router: "" };
}

export const ChainContract = {
  encode(
    message: ChainContract,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.chain !== "") {
      writer.uint32(10).string(message.chain);
    }
    if (message.router !== "") {
      writer.uint32(18).string(message.router);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChainContract {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChainContract();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.chain = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.router = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChainContract {
    return {
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
      router: isSet(object.router) ? globalThis.String(object.router) : "",
    };
  },

  toJSON(message: ChainContract): unknown {
    const obj: any = {};
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    if (message.router !== "") {
      obj.router = message.router;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChainContract>, I>>(
    base?: I
  ): ChainContract {
    return ChainContract.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChainContract>, I>>(
    object: I
  ): ChainContract {
    const message = createBaseChainContract();
    message.chain = object.chain ?? "";
    message.router = object.router ?? "";
    return message;
  },
};
