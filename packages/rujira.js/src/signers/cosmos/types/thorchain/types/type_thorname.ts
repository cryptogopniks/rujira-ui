// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/type_thorname.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "../../binary";
import {
  base64FromBytes,
  bytesFromBase64,
  DeepPartial,
  Exact,
  isSet,
} from "../../helpers";
import { Asset } from "../common/common";

export const protobufPackage = "types";

export interface THORNameAlias {
  chain: string;
  address: string;
}

export interface THORName {
  name: string;
  expireBlockHeight: number;
  owner: Uint8Array;
  preferredAsset: Asset | undefined;
  aliases: THORNameAlias[];
}

function createBaseTHORNameAlias(): THORNameAlias {
  return { chain: "", address: "" };
}

export const THORNameAlias = {
  encode(
    message: THORNameAlias,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.chain !== "") {
      writer.uint32(10).string(message.chain);
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): THORNameAlias {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTHORNameAlias();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.chain = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): THORNameAlias {
    return {
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
    };
  },

  toJSON(message: THORNameAlias): unknown {
    const obj: any = {};
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<THORNameAlias>, I>>(
    base?: I
  ): THORNameAlias {
    return THORNameAlias.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<THORNameAlias>, I>>(
    object: I
  ): THORNameAlias {
    const message = createBaseTHORNameAlias();
    message.chain = object.chain ?? "";
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseTHORName(): THORName {
  return {
    name: "",
    expireBlockHeight: 0,
    owner: new Uint8Array(0),
    preferredAsset: undefined,
    aliases: [],
  };
}

export const THORName = {
  encode(
    message: THORName,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.expireBlockHeight !== 0) {
      writer.uint32(16).int64(message.expireBlockHeight);
    }
    if (message.owner.length !== 0) {
      writer.uint32(26).bytes(message.owner);
    }
    if (message.preferredAsset !== undefined) {
      Asset.encode(message.preferredAsset, writer.uint32(34).fork()).ldelim();
    }
    for (const v of message.aliases) {
      THORNameAlias.encode(v!, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): THORName {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTHORName();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.expireBlockHeight = Number(reader.int64());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.owner = reader.bytes();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.preferredAsset = Asset.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.aliases.push(THORNameAlias.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): THORName {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      expireBlockHeight: isSet(object.expireBlockHeight)
        ? globalThis.Number(object.expireBlockHeight)
        : 0,
      owner: isSet(object.owner)
        ? bytesFromBase64(object.owner)
        : new Uint8Array(0),
      preferredAsset: isSet(object.preferredAsset)
        ? Asset.fromJSON(object.preferredAsset)
        : undefined,
      aliases: globalThis.Array.isArray(object?.aliases)
        ? object.aliases.map((e: any) => THORNameAlias.fromJSON(e))
        : [],
    };
  },

  toJSON(message: THORName): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.expireBlockHeight !== 0) {
      obj.expireBlockHeight = Math.round(message.expireBlockHeight);
    }
    if (message.owner.length !== 0) {
      obj.owner = base64FromBytes(message.owner);
    }
    if (message.preferredAsset !== undefined) {
      obj.preferredAsset = Asset.toJSON(message.preferredAsset);
    }
    if (message.aliases?.length) {
      obj.aliases = message.aliases.map((e) => THORNameAlias.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<THORName>, I>>(base?: I): THORName {
    return THORName.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<THORName>, I>>(object: I): THORName {
    const message = createBaseTHORName();
    message.name = object.name ?? "";
    message.expireBlockHeight = object.expireBlockHeight ?? 0;
    message.owner = object.owner ?? new Uint8Array(0);
    message.preferredAsset =
      object.preferredAsset !== undefined && object.preferredAsset !== null
        ? Asset.fromPartial(object.preferredAsset)
        : undefined;
    message.aliases =
      object.aliases?.map((e) => THORNameAlias.fromPartial(e)) || [];
    return message;
  },
};
