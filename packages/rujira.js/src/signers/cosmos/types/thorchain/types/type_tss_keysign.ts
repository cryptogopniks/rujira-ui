// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/type_tss_keysign.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "../../binary";
import { DeepPartial, Exact, isSet } from "../../helpers";
export const protobufPackage = "types";

export interface TssKeysignFailVoter {
  id: string;
  height: number;
  signers: string[];
  round7Count: number;
}

function createBaseTssKeysignFailVoter(): TssKeysignFailVoter {
  return { id: "", height: 0, signers: [], round7Count: 0 };
}

export const TssKeysignFailVoter = {
  encode(
    message: TssKeysignFailVoter,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.height !== 0) {
      writer.uint32(32).int64(message.height);
    }
    for (const v of message.signers) {
      writer.uint32(50).string(v!);
    }
    if (message.round7Count !== 0) {
      writer.uint32(56).int64(message.round7Count);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): TssKeysignFailVoter {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTssKeysignFailVoter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.height = Number(reader.int64());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.signers.push(reader.string());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.round7Count = Number(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TssKeysignFailVoter {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      signers: globalThis.Array.isArray(object?.signers)
        ? object.signers.map((e: any) => globalThis.String(e))
        : [],
      round7Count: isSet(object.round7Count)
        ? globalThis.Number(object.round7Count)
        : 0,
    };
  },

  toJSON(message: TssKeysignFailVoter): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.signers?.length) {
      obj.signers = message.signers;
    }
    if (message.round7Count !== 0) {
      obj.round7Count = Math.round(message.round7Count);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TssKeysignFailVoter>, I>>(
    base?: I
  ): TssKeysignFailVoter {
    return TssKeysignFailVoter.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TssKeysignFailVoter>, I>>(
    object: I
  ): TssKeysignFailVoter {
    const message = createBaseTssKeysignFailVoter();
    message.id = object.id ?? "";
    message.height = object.height ?? 0;
    message.signers = object.signers?.map((e) => e) || [];
    message.round7Count = object.round7Count ?? 0;
    return message;
  },
};
