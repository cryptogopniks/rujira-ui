// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/query_liquidity_provider.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "../../binary";
import { DeepPartial, Exact, isSet } from "../../helpers";
export const protobufPackage = "types";

export interface QueryLiquidityProviderRequest {
  asset: string;
  address: string;
  height: string;
}

/** Can we replace this with LiquidityProvider proto? Check json fields... */
export interface QueryLiquidityProviderResponse {
  asset: string;
  runeAddress: string;
  assetAddress: string;
  lastAddHeight: number;
  lastWithdrawHeight: number;
  units: string;
  pendingRune: string;
  pendingAsset: string;
  pendingTxId: string;
  runeDepositValue: string;
  assetDepositValue: string;
  runeRedeemValue: string;
  assetRedeemValue: string;
  luviDepositValue: string;
  luviRedeemValue: string;
  luviGrowthPct: string;
}

export interface QueryLiquidityProvidersRequest {
  asset: string;
  height: string;
}

export interface QueryLiquidityProvidersResponse {
  liquidityProviders: QueryLiquidityProviderResponse[];
}

function createBaseQueryLiquidityProviderRequest(): QueryLiquidityProviderRequest {
  return { asset: "", address: "", height: "" };
}

export const QueryLiquidityProviderRequest = {
  encode(
    message: QueryLiquidityProviderRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.asset !== "") {
      writer.uint32(10).string(message.asset);
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    if (message.height !== "") {
      writer.uint32(26).string(message.height);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryLiquidityProviderRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryLiquidityProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.asset = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryLiquidityProviderRequest {
    return {
      asset: isSet(object.asset) ? globalThis.String(object.asset) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QueryLiquidityProviderRequest): unknown {
    const obj: any = {};
    if (message.asset !== "") {
      obj.asset = message.asset;
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryLiquidityProviderRequest>, I>>(
    base?: I
  ): QueryLiquidityProviderRequest {
    return QueryLiquidityProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryLiquidityProviderRequest>, I>>(
    object: I
  ): QueryLiquidityProviderRequest {
    const message = createBaseQueryLiquidityProviderRequest();
    message.asset = object.asset ?? "";
    message.address = object.address ?? "";
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseQueryLiquidityProviderResponse(): QueryLiquidityProviderResponse {
  return {
    asset: "",
    runeAddress: "",
    assetAddress: "",
    lastAddHeight: 0,
    lastWithdrawHeight: 0,
    units: "",
    pendingRune: "",
    pendingAsset: "",
    pendingTxId: "",
    runeDepositValue: "",
    assetDepositValue: "",
    runeRedeemValue: "",
    assetRedeemValue: "",
    luviDepositValue: "",
    luviRedeemValue: "",
    luviGrowthPct: "",
  };
}

export const QueryLiquidityProviderResponse = {
  encode(
    message: QueryLiquidityProviderResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.asset !== "") {
      writer.uint32(10).string(message.asset);
    }
    if (message.runeAddress !== "") {
      writer.uint32(18).string(message.runeAddress);
    }
    if (message.assetAddress !== "") {
      writer.uint32(26).string(message.assetAddress);
    }
    if (message.lastAddHeight !== 0) {
      writer.uint32(32).int64(message.lastAddHeight);
    }
    if (message.lastWithdrawHeight !== 0) {
      writer.uint32(40).int64(message.lastWithdrawHeight);
    }
    if (message.units !== "") {
      writer.uint32(50).string(message.units);
    }
    if (message.pendingRune !== "") {
      writer.uint32(58).string(message.pendingRune);
    }
    if (message.pendingAsset !== "") {
      writer.uint32(66).string(message.pendingAsset);
    }
    if (message.pendingTxId !== "") {
      writer.uint32(74).string(message.pendingTxId);
    }
    if (message.runeDepositValue !== "") {
      writer.uint32(82).string(message.runeDepositValue);
    }
    if (message.assetDepositValue !== "") {
      writer.uint32(90).string(message.assetDepositValue);
    }
    if (message.runeRedeemValue !== "") {
      writer.uint32(98).string(message.runeRedeemValue);
    }
    if (message.assetRedeemValue !== "") {
      writer.uint32(106).string(message.assetRedeemValue);
    }
    if (message.luviDepositValue !== "") {
      writer.uint32(114).string(message.luviDepositValue);
    }
    if (message.luviRedeemValue !== "") {
      writer.uint32(122).string(message.luviRedeemValue);
    }
    if (message.luviGrowthPct !== "") {
      writer.uint32(130).string(message.luviGrowthPct);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryLiquidityProviderResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryLiquidityProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.asset = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.runeAddress = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.assetAddress = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.lastAddHeight = Number(reader.int64());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.lastWithdrawHeight = Number(reader.int64());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.units = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.pendingRune = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.pendingAsset = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.pendingTxId = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.runeDepositValue = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.assetDepositValue = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.runeRedeemValue = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.assetRedeemValue = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.luviDepositValue = reader.string();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.luviRedeemValue = reader.string();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.luviGrowthPct = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryLiquidityProviderResponse {
    return {
      asset: isSet(object.asset) ? globalThis.String(object.asset) : "",
      runeAddress: isSet(object.runeAddress)
        ? globalThis.String(object.runeAddress)
        : "",
      assetAddress: isSet(object.assetAddress)
        ? globalThis.String(object.assetAddress)
        : "",
      lastAddHeight: isSet(object.lastAddHeight)
        ? globalThis.Number(object.lastAddHeight)
        : 0,
      lastWithdrawHeight: isSet(object.lastWithdrawHeight)
        ? globalThis.Number(object.lastWithdrawHeight)
        : 0,
      units: isSet(object.units) ? globalThis.String(object.units) : "",
      pendingRune: isSet(object.pendingRune)
        ? globalThis.String(object.pendingRune)
        : "",
      pendingAsset: isSet(object.pendingAsset)
        ? globalThis.String(object.pendingAsset)
        : "",
      pendingTxId: isSet(object.pendingTxId)
        ? globalThis.String(object.pendingTxId)
        : "",
      runeDepositValue: isSet(object.runeDepositValue)
        ? globalThis.String(object.runeDepositValue)
        : "",
      assetDepositValue: isSet(object.assetDepositValue)
        ? globalThis.String(object.assetDepositValue)
        : "",
      runeRedeemValue: isSet(object.runeRedeemValue)
        ? globalThis.String(object.runeRedeemValue)
        : "",
      assetRedeemValue: isSet(object.assetRedeemValue)
        ? globalThis.String(object.assetRedeemValue)
        : "",
      luviDepositValue: isSet(object.luviDepositValue)
        ? globalThis.String(object.luviDepositValue)
        : "",
      luviRedeemValue: isSet(object.luviRedeemValue)
        ? globalThis.String(object.luviRedeemValue)
        : "",
      luviGrowthPct: isSet(object.luviGrowthPct)
        ? globalThis.String(object.luviGrowthPct)
        : "",
    };
  },

  toJSON(message: QueryLiquidityProviderResponse): unknown {
    const obj: any = {};
    if (message.asset !== "") {
      obj.asset = message.asset;
    }
    if (message.runeAddress !== "") {
      obj.runeAddress = message.runeAddress;
    }
    if (message.assetAddress !== "") {
      obj.assetAddress = message.assetAddress;
    }
    if (message.lastAddHeight !== 0) {
      obj.lastAddHeight = Math.round(message.lastAddHeight);
    }
    if (message.lastWithdrawHeight !== 0) {
      obj.lastWithdrawHeight = Math.round(message.lastWithdrawHeight);
    }
    if (message.units !== "") {
      obj.units = message.units;
    }
    if (message.pendingRune !== "") {
      obj.pendingRune = message.pendingRune;
    }
    if (message.pendingAsset !== "") {
      obj.pendingAsset = message.pendingAsset;
    }
    if (message.pendingTxId !== "") {
      obj.pendingTxId = message.pendingTxId;
    }
    if (message.runeDepositValue !== "") {
      obj.runeDepositValue = message.runeDepositValue;
    }
    if (message.assetDepositValue !== "") {
      obj.assetDepositValue = message.assetDepositValue;
    }
    if (message.runeRedeemValue !== "") {
      obj.runeRedeemValue = message.runeRedeemValue;
    }
    if (message.assetRedeemValue !== "") {
      obj.assetRedeemValue = message.assetRedeemValue;
    }
    if (message.luviDepositValue !== "") {
      obj.luviDepositValue = message.luviDepositValue;
    }
    if (message.luviRedeemValue !== "") {
      obj.luviRedeemValue = message.luviRedeemValue;
    }
    if (message.luviGrowthPct !== "") {
      obj.luviGrowthPct = message.luviGrowthPct;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryLiquidityProviderResponse>, I>>(
    base?: I
  ): QueryLiquidityProviderResponse {
    return QueryLiquidityProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryLiquidityProviderResponse>, I>>(
    object: I
  ): QueryLiquidityProviderResponse {
    const message = createBaseQueryLiquidityProviderResponse();
    message.asset = object.asset ?? "";
    message.runeAddress = object.runeAddress ?? "";
    message.assetAddress = object.assetAddress ?? "";
    message.lastAddHeight = object.lastAddHeight ?? 0;
    message.lastWithdrawHeight = object.lastWithdrawHeight ?? 0;
    message.units = object.units ?? "";
    message.pendingRune = object.pendingRune ?? "";
    message.pendingAsset = object.pendingAsset ?? "";
    message.pendingTxId = object.pendingTxId ?? "";
    message.runeDepositValue = object.runeDepositValue ?? "";
    message.assetDepositValue = object.assetDepositValue ?? "";
    message.runeRedeemValue = object.runeRedeemValue ?? "";
    message.assetRedeemValue = object.assetRedeemValue ?? "";
    message.luviDepositValue = object.luviDepositValue ?? "";
    message.luviRedeemValue = object.luviRedeemValue ?? "";
    message.luviGrowthPct = object.luviGrowthPct ?? "";
    return message;
  },
};

function createBaseQueryLiquidityProvidersRequest(): QueryLiquidityProvidersRequest {
  return { asset: "", height: "" };
}

export const QueryLiquidityProvidersRequest = {
  encode(
    message: QueryLiquidityProvidersRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.asset !== "") {
      writer.uint32(10).string(message.asset);
    }
    if (message.height !== "") {
      writer.uint32(18).string(message.height);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryLiquidityProvidersRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryLiquidityProvidersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.asset = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryLiquidityProvidersRequest {
    return {
      asset: isSet(object.asset) ? globalThis.String(object.asset) : "",
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QueryLiquidityProvidersRequest): unknown {
    const obj: any = {};
    if (message.asset !== "") {
      obj.asset = message.asset;
    }
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryLiquidityProvidersRequest>, I>>(
    base?: I
  ): QueryLiquidityProvidersRequest {
    return QueryLiquidityProvidersRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryLiquidityProvidersRequest>, I>>(
    object: I
  ): QueryLiquidityProvidersRequest {
    const message = createBaseQueryLiquidityProvidersRequest();
    message.asset = object.asset ?? "";
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseQueryLiquidityProvidersResponse(): QueryLiquidityProvidersResponse {
  return { liquidityProviders: [] };
}

export const QueryLiquidityProvidersResponse = {
  encode(
    message: QueryLiquidityProvidersResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    for (const v of message.liquidityProviders) {
      QueryLiquidityProviderResponse.encode(
        v!,
        writer.uint32(10).fork()
      ).ldelim();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryLiquidityProvidersResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryLiquidityProvidersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.liquidityProviders.push(
            QueryLiquidityProviderResponse.decode(reader, reader.uint32())
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryLiquidityProvidersResponse {
    return {
      liquidityProviders: globalThis.Array.isArray(object?.liquidityProviders)
        ? object.liquidityProviders.map((e: any) =>
            QueryLiquidityProviderResponse.fromJSON(e)
          )
        : [],
    };
  },

  toJSON(message: QueryLiquidityProvidersResponse): unknown {
    const obj: any = {};
    if (message.liquidityProviders?.length) {
      obj.liquidityProviders = message.liquidityProviders.map((e) =>
        QueryLiquidityProviderResponse.toJSON(e)
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryLiquidityProvidersResponse>, I>>(
    base?: I
  ): QueryLiquidityProvidersResponse {
    return QueryLiquidityProvidersResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryLiquidityProvidersResponse>, I>>(
    object: I
  ): QueryLiquidityProvidersResponse {
    const message = createBaseQueryLiquidityProvidersResponse();
    message.liquidityProviders =
      object.liquidityProviders?.map((e) =>
        QueryLiquidityProviderResponse.fromPartial(e)
      ) || [];
    return message;
  },
};
