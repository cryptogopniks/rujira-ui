// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/query_pool_slip.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "../../binary";
import { DeepPartial, Exact, isSet } from "../../helpers";
export const protobufPackage = "types";

export interface QueryPoolSlipRequest {
  asset: string;
  height: string;
}

export interface QueryPoolSlipResponse {
  asset: string;
  /** Pool slip for this asset's pool for the current height */
  poolSlip: number;
  /** Number of stored pool slips contributing to the current stored rollup */
  rollupCount: number;
  /** Median of rollup snapshots over a long period */
  longRollup: number;
  /** Stored sum of pool slips over a number of previous block heights */
  rollup: number;
  /** Summed pool slips over a number of previous block heights, to checksum the stored rollup */
  summedRollup: number;
}

export interface QueryPoolSlipsRequest {
  height: string;
}

export interface QueryPoolSlipsResponse {
  poolSlips: QueryPoolSlipResponse[];
}

function createBaseQueryPoolSlipRequest(): QueryPoolSlipRequest {
  return { asset: "", height: "" };
}

export const QueryPoolSlipRequest = {
  encode(
    message: QueryPoolSlipRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.asset !== "") {
      writer.uint32(10).string(message.asset);
    }
    if (message.height !== "") {
      writer.uint32(18).string(message.height);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryPoolSlipRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPoolSlipRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.asset = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPoolSlipRequest {
    return {
      asset: isSet(object.asset) ? globalThis.String(object.asset) : "",
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QueryPoolSlipRequest): unknown {
    const obj: any = {};
    if (message.asset !== "") {
      obj.asset = message.asset;
    }
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryPoolSlipRequest>, I>>(
    base?: I
  ): QueryPoolSlipRequest {
    return QueryPoolSlipRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryPoolSlipRequest>, I>>(
    object: I
  ): QueryPoolSlipRequest {
    const message = createBaseQueryPoolSlipRequest();
    message.asset = object.asset ?? "";
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseQueryPoolSlipResponse(): QueryPoolSlipResponse {
  return {
    asset: "",
    poolSlip: 0,
    rollupCount: 0,
    longRollup: 0,
    rollup: 0,
    summedRollup: 0,
  };
}

export const QueryPoolSlipResponse = {
  encode(
    message: QueryPoolSlipResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.asset !== "") {
      writer.uint32(10).string(message.asset);
    }
    if (message.poolSlip !== 0) {
      writer.uint32(16).int64(message.poolSlip);
    }
    if (message.rollupCount !== 0) {
      writer.uint32(24).int64(message.rollupCount);
    }
    if (message.longRollup !== 0) {
      writer.uint32(32).int64(message.longRollup);
    }
    if (message.rollup !== 0) {
      writer.uint32(40).int64(message.rollup);
    }
    if (message.summedRollup !== 0) {
      writer.uint32(48).int64(message.summedRollup);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryPoolSlipResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPoolSlipResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.asset = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.poolSlip = Number(reader.int64());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.rollupCount = Number(reader.int64());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.longRollup = Number(reader.int64());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.rollup = Number(reader.int64());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.summedRollup = Number(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPoolSlipResponse {
    return {
      asset: isSet(object.asset) ? globalThis.String(object.asset) : "",
      poolSlip: isSet(object.poolSlip) ? globalThis.Number(object.poolSlip) : 0,
      rollupCount: isSet(object.rollupCount)
        ? globalThis.Number(object.rollupCount)
        : 0,
      longRollup: isSet(object.longRollup)
        ? globalThis.Number(object.longRollup)
        : 0,
      rollup: isSet(object.rollup) ? globalThis.Number(object.rollup) : 0,
      summedRollup: isSet(object.summedRollup)
        ? globalThis.Number(object.summedRollup)
        : 0,
    };
  },

  toJSON(message: QueryPoolSlipResponse): unknown {
    const obj: any = {};
    if (message.asset !== "") {
      obj.asset = message.asset;
    }
    if (message.poolSlip !== 0) {
      obj.poolSlip = Math.round(message.poolSlip);
    }
    if (message.rollupCount !== 0) {
      obj.rollupCount = Math.round(message.rollupCount);
    }
    if (message.longRollup !== 0) {
      obj.longRollup = Math.round(message.longRollup);
    }
    if (message.rollup !== 0) {
      obj.rollup = Math.round(message.rollup);
    }
    if (message.summedRollup !== 0) {
      obj.summedRollup = Math.round(message.summedRollup);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryPoolSlipResponse>, I>>(
    base?: I
  ): QueryPoolSlipResponse {
    return QueryPoolSlipResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryPoolSlipResponse>, I>>(
    object: I
  ): QueryPoolSlipResponse {
    const message = createBaseQueryPoolSlipResponse();
    message.asset = object.asset ?? "";
    message.poolSlip = object.poolSlip ?? 0;
    message.rollupCount = object.rollupCount ?? 0;
    message.longRollup = object.longRollup ?? 0;
    message.rollup = object.rollup ?? 0;
    message.summedRollup = object.summedRollup ?? 0;
    return message;
  },
};

function createBaseQueryPoolSlipsRequest(): QueryPoolSlipsRequest {
  return { height: "" };
}

export const QueryPoolSlipsRequest = {
  encode(
    message: QueryPoolSlipsRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.height !== "") {
      writer.uint32(10).string(message.height);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryPoolSlipsRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPoolSlipsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPoolSlipsRequest {
    return {
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QueryPoolSlipsRequest): unknown {
    const obj: any = {};
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryPoolSlipsRequest>, I>>(
    base?: I
  ): QueryPoolSlipsRequest {
    return QueryPoolSlipsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryPoolSlipsRequest>, I>>(
    object: I
  ): QueryPoolSlipsRequest {
    const message = createBaseQueryPoolSlipsRequest();
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseQueryPoolSlipsResponse(): QueryPoolSlipsResponse {
  return { poolSlips: [] };
}

export const QueryPoolSlipsResponse = {
  encode(
    message: QueryPoolSlipsResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    for (const v of message.poolSlips) {
      QueryPoolSlipResponse.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryPoolSlipsResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPoolSlipsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.poolSlips.push(
            QueryPoolSlipResponse.decode(reader, reader.uint32())
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPoolSlipsResponse {
    return {
      poolSlips: globalThis.Array.isArray(object?.poolSlips)
        ? object.poolSlips.map((e: any) => QueryPoolSlipResponse.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryPoolSlipsResponse): unknown {
    const obj: any = {};
    if (message.poolSlips?.length) {
      obj.poolSlips = message.poolSlips.map((e) =>
        QueryPoolSlipResponse.toJSON(e)
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryPoolSlipsResponse>, I>>(
    base?: I
  ): QueryPoolSlipsResponse {
    return QueryPoolSlipsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryPoolSlipsResponse>, I>>(
    object: I
  ): QueryPoolSlipsResponse {
    const message = createBaseQueryPoolSlipsResponse();
    message.poolSlips =
      object.poolSlips?.map((e) => QueryPoolSlipResponse.fromPartial(e)) || [];
    return message;
  },
};
