// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/query_trade_account.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "../../binary";
import { DeepPartial, Exact, isSet } from "../../helpers";
export const protobufPackage = "types";

export interface QueryTradeAccountRequest {
  address: string;
  height: string;
}

export interface QueryTradeAccountResponse {
  /** trade account asset with \"~\" separator */
  asset: string;
  /** units of trade asset belonging to this owner */
  units: string;
  /** thor address of trade account owner */
  owner: string;
  /** last thorchain height trade assets were added to trade account */
  lastAddHeight: number;
  /** last thorchain height trade assets were withdrawn from trade account */
  lastWithdrawHeight: number;
}

export interface QueryTradeAccountsRequest {
  asset: string;
  height: string;
}

export interface QueryTradeAccountsResponse {
  tradeAccounts: QueryTradeAccountResponse[];
}

function createBaseQueryTradeAccountRequest(): QueryTradeAccountRequest {
  return { address: "", height: "" };
}

export const QueryTradeAccountRequest = {
  encode(
    message: QueryTradeAccountRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.height !== "") {
      writer.uint32(18).string(message.height);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryTradeAccountRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTradeAccountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTradeAccountRequest {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QueryTradeAccountRequest): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryTradeAccountRequest>, I>>(
    base?: I
  ): QueryTradeAccountRequest {
    return QueryTradeAccountRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryTradeAccountRequest>, I>>(
    object: I
  ): QueryTradeAccountRequest {
    const message = createBaseQueryTradeAccountRequest();
    message.address = object.address ?? "";
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseQueryTradeAccountResponse(): QueryTradeAccountResponse {
  return {
    asset: "",
    units: "",
    owner: "",
    lastAddHeight: 0,
    lastWithdrawHeight: 0,
  };
}

export const QueryTradeAccountResponse = {
  encode(
    message: QueryTradeAccountResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.asset !== "") {
      writer.uint32(10).string(message.asset);
    }
    if (message.units !== "") {
      writer.uint32(18).string(message.units);
    }
    if (message.owner !== "") {
      writer.uint32(26).string(message.owner);
    }
    if (message.lastAddHeight !== 0) {
      writer.uint32(32).int64(message.lastAddHeight);
    }
    if (message.lastWithdrawHeight !== 0) {
      writer.uint32(40).int64(message.lastWithdrawHeight);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryTradeAccountResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTradeAccountResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.asset = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.units = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.owner = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.lastAddHeight = Number(reader.int64());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.lastWithdrawHeight = Number(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTradeAccountResponse {
    return {
      asset: isSet(object.asset) ? globalThis.String(object.asset) : "",
      units: isSet(object.units) ? globalThis.String(object.units) : "",
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      lastAddHeight: isSet(object.lastAddHeight)
        ? globalThis.Number(object.lastAddHeight)
        : 0,
      lastWithdrawHeight: isSet(object.lastWithdrawHeight)
        ? globalThis.Number(object.lastWithdrawHeight)
        : 0,
    };
  },

  toJSON(message: QueryTradeAccountResponse): unknown {
    const obj: any = {};
    if (message.asset !== "") {
      obj.asset = message.asset;
    }
    if (message.units !== "") {
      obj.units = message.units;
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.lastAddHeight !== 0) {
      obj.lastAddHeight = Math.round(message.lastAddHeight);
    }
    if (message.lastWithdrawHeight !== 0) {
      obj.lastWithdrawHeight = Math.round(message.lastWithdrawHeight);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryTradeAccountResponse>, I>>(
    base?: I
  ): QueryTradeAccountResponse {
    return QueryTradeAccountResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryTradeAccountResponse>, I>>(
    object: I
  ): QueryTradeAccountResponse {
    const message = createBaseQueryTradeAccountResponse();
    message.asset = object.asset ?? "";
    message.units = object.units ?? "";
    message.owner = object.owner ?? "";
    message.lastAddHeight = object.lastAddHeight ?? 0;
    message.lastWithdrawHeight = object.lastWithdrawHeight ?? 0;
    return message;
  },
};

function createBaseQueryTradeAccountsRequest(): QueryTradeAccountsRequest {
  return { asset: "", height: "" };
}

export const QueryTradeAccountsRequest = {
  encode(
    message: QueryTradeAccountsRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.asset !== "") {
      writer.uint32(10).string(message.asset);
    }
    if (message.height !== "") {
      writer.uint32(18).string(message.height);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryTradeAccountsRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTradeAccountsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.asset = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTradeAccountsRequest {
    return {
      asset: isSet(object.asset) ? globalThis.String(object.asset) : "",
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QueryTradeAccountsRequest): unknown {
    const obj: any = {};
    if (message.asset !== "") {
      obj.asset = message.asset;
    }
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryTradeAccountsRequest>, I>>(
    base?: I
  ): QueryTradeAccountsRequest {
    return QueryTradeAccountsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryTradeAccountsRequest>, I>>(
    object: I
  ): QueryTradeAccountsRequest {
    const message = createBaseQueryTradeAccountsRequest();
    message.asset = object.asset ?? "";
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseQueryTradeAccountsResponse(): QueryTradeAccountsResponse {
  return { tradeAccounts: [] };
}

export const QueryTradeAccountsResponse = {
  encode(
    message: QueryTradeAccountsResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    for (const v of message.tradeAccounts) {
      QueryTradeAccountResponse.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryTradeAccountsResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTradeAccountsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tradeAccounts.push(
            QueryTradeAccountResponse.decode(reader, reader.uint32())
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTradeAccountsResponse {
    return {
      tradeAccounts: globalThis.Array.isArray(object?.tradeAccounts)
        ? object.tradeAccounts.map((e: any) =>
            QueryTradeAccountResponse.fromJSON(e)
          )
        : [],
    };
  },

  toJSON(message: QueryTradeAccountsResponse): unknown {
    const obj: any = {};
    if (message.tradeAccounts?.length) {
      obj.tradeAccounts = message.tradeAccounts.map((e) =>
        QueryTradeAccountResponse.toJSON(e)
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryTradeAccountsResponse>, I>>(
    base?: I
  ): QueryTradeAccountsResponse {
    return QueryTradeAccountsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryTradeAccountsResponse>, I>>(
    object: I
  ): QueryTradeAccountsResponse {
    const message = createBaseQueryTradeAccountsResponse();
    message.tradeAccounts =
      object.tradeAccounts?.map((e) =>
        QueryTradeAccountResponse.fromPartial(e)
      ) || [];
    return message;
  },
};
