// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/query_borrower.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "../../binary";
import { DeepPartial, Exact, isSet } from "../../helpers";
export const protobufPackage = "types";

export interface QueryBorrowerRequest {
  asset: string;
  address: string;
  height: string;
}

export interface QueryBorrowerResponse {
  owner: string;
  asset: string;
  debtIssued: string;
  debtRepaid: string;
  debtCurrent: string;
  collateralDeposited: string;
  collateralWithdrawn: string;
  collateralCurrent: string;
  lastOpenHeight: number;
  lastRepayHeight: number;
}

export interface QueryBorrowersRequest {
  asset: string;
  height: string;
}

export interface QueryBorrowersResponse {
  borrowers: QueryBorrowerResponse[];
}

function createBaseQueryBorrowerRequest(): QueryBorrowerRequest {
  return { asset: "", address: "", height: "" };
}

export const QueryBorrowerRequest = {
  encode(
    message: QueryBorrowerRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.asset !== "") {
      writer.uint32(10).string(message.asset);
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    if (message.height !== "") {
      writer.uint32(26).string(message.height);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryBorrowerRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryBorrowerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.asset = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryBorrowerRequest {
    return {
      asset: isSet(object.asset) ? globalThis.String(object.asset) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QueryBorrowerRequest): unknown {
    const obj: any = {};
    if (message.asset !== "") {
      obj.asset = message.asset;
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryBorrowerRequest>, I>>(
    base?: I
  ): QueryBorrowerRequest {
    return QueryBorrowerRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryBorrowerRequest>, I>>(
    object: I
  ): QueryBorrowerRequest {
    const message = createBaseQueryBorrowerRequest();
    message.asset = object.asset ?? "";
    message.address = object.address ?? "";
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseQueryBorrowerResponse(): QueryBorrowerResponse {
  return {
    owner: "",
    asset: "",
    debtIssued: "",
    debtRepaid: "",
    debtCurrent: "",
    collateralDeposited: "",
    collateralWithdrawn: "",
    collateralCurrent: "",
    lastOpenHeight: 0,
    lastRepayHeight: 0,
  };
}

export const QueryBorrowerResponse = {
  encode(
    message: QueryBorrowerResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.owner !== "") {
      writer.uint32(10).string(message.owner);
    }
    if (message.asset !== "") {
      writer.uint32(18).string(message.asset);
    }
    if (message.debtIssued !== "") {
      writer.uint32(26).string(message.debtIssued);
    }
    if (message.debtRepaid !== "") {
      writer.uint32(34).string(message.debtRepaid);
    }
    if (message.debtCurrent !== "") {
      writer.uint32(42).string(message.debtCurrent);
    }
    if (message.collateralDeposited !== "") {
      writer.uint32(50).string(message.collateralDeposited);
    }
    if (message.collateralWithdrawn !== "") {
      writer.uint32(58).string(message.collateralWithdrawn);
    }
    if (message.collateralCurrent !== "") {
      writer.uint32(66).string(message.collateralCurrent);
    }
    if (message.lastOpenHeight !== 0) {
      writer.uint32(72).int64(message.lastOpenHeight);
    }
    if (message.lastRepayHeight !== 0) {
      writer.uint32(80).int64(message.lastRepayHeight);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryBorrowerResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryBorrowerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.owner = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.asset = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.debtIssued = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.debtRepaid = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.debtCurrent = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.collateralDeposited = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.collateralWithdrawn = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.collateralCurrent = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.lastOpenHeight = Number(reader.int64());
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.lastRepayHeight = Number(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryBorrowerResponse {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      asset: isSet(object.asset) ? globalThis.String(object.asset) : "",
      debtIssued: isSet(object.debtIssued)
        ? globalThis.String(object.debtIssued)
        : "",
      debtRepaid: isSet(object.debtRepaid)
        ? globalThis.String(object.debtRepaid)
        : "",
      debtCurrent: isSet(object.debtCurrent)
        ? globalThis.String(object.debtCurrent)
        : "",
      collateralDeposited: isSet(object.collateralDeposited)
        ? globalThis.String(object.collateralDeposited)
        : "",
      collateralWithdrawn: isSet(object.collateralWithdrawn)
        ? globalThis.String(object.collateralWithdrawn)
        : "",
      collateralCurrent: isSet(object.collateralCurrent)
        ? globalThis.String(object.collateralCurrent)
        : "",
      lastOpenHeight: isSet(object.lastOpenHeight)
        ? globalThis.Number(object.lastOpenHeight)
        : 0,
      lastRepayHeight: isSet(object.lastRepayHeight)
        ? globalThis.Number(object.lastRepayHeight)
        : 0,
    };
  },

  toJSON(message: QueryBorrowerResponse): unknown {
    const obj: any = {};
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.asset !== "") {
      obj.asset = message.asset;
    }
    if (message.debtIssued !== "") {
      obj.debtIssued = message.debtIssued;
    }
    if (message.debtRepaid !== "") {
      obj.debtRepaid = message.debtRepaid;
    }
    if (message.debtCurrent !== "") {
      obj.debtCurrent = message.debtCurrent;
    }
    if (message.collateralDeposited !== "") {
      obj.collateralDeposited = message.collateralDeposited;
    }
    if (message.collateralWithdrawn !== "") {
      obj.collateralWithdrawn = message.collateralWithdrawn;
    }
    if (message.collateralCurrent !== "") {
      obj.collateralCurrent = message.collateralCurrent;
    }
    if (message.lastOpenHeight !== 0) {
      obj.lastOpenHeight = Math.round(message.lastOpenHeight);
    }
    if (message.lastRepayHeight !== 0) {
      obj.lastRepayHeight = Math.round(message.lastRepayHeight);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryBorrowerResponse>, I>>(
    base?: I
  ): QueryBorrowerResponse {
    return QueryBorrowerResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryBorrowerResponse>, I>>(
    object: I
  ): QueryBorrowerResponse {
    const message = createBaseQueryBorrowerResponse();
    message.owner = object.owner ?? "";
    message.asset = object.asset ?? "";
    message.debtIssued = object.debtIssued ?? "";
    message.debtRepaid = object.debtRepaid ?? "";
    message.debtCurrent = object.debtCurrent ?? "";
    message.collateralDeposited = object.collateralDeposited ?? "";
    message.collateralWithdrawn = object.collateralWithdrawn ?? "";
    message.collateralCurrent = object.collateralCurrent ?? "";
    message.lastOpenHeight = object.lastOpenHeight ?? 0;
    message.lastRepayHeight = object.lastRepayHeight ?? 0;
    return message;
  },
};

function createBaseQueryBorrowersRequest(): QueryBorrowersRequest {
  return { asset: "", height: "" };
}

export const QueryBorrowersRequest = {
  encode(
    message: QueryBorrowersRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.asset !== "") {
      writer.uint32(10).string(message.asset);
    }
    if (message.height !== "") {
      writer.uint32(18).string(message.height);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryBorrowersRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryBorrowersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.asset = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryBorrowersRequest {
    return {
      asset: isSet(object.asset) ? globalThis.String(object.asset) : "",
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QueryBorrowersRequest): unknown {
    const obj: any = {};
    if (message.asset !== "") {
      obj.asset = message.asset;
    }
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryBorrowersRequest>, I>>(
    base?: I
  ): QueryBorrowersRequest {
    return QueryBorrowersRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryBorrowersRequest>, I>>(
    object: I
  ): QueryBorrowersRequest {
    const message = createBaseQueryBorrowersRequest();
    message.asset = object.asset ?? "";
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseQueryBorrowersResponse(): QueryBorrowersResponse {
  return { borrowers: [] };
}

export const QueryBorrowersResponse = {
  encode(
    message: QueryBorrowersResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    for (const v of message.borrowers) {
      QueryBorrowerResponse.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryBorrowersResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryBorrowersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.borrowers.push(
            QueryBorrowerResponse.decode(reader, reader.uint32())
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryBorrowersResponse {
    return {
      borrowers: globalThis.Array.isArray(object?.borrowers)
        ? object.borrowers.map((e: any) => QueryBorrowerResponse.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryBorrowersResponse): unknown {
    const obj: any = {};
    if (message.borrowers?.length) {
      obj.borrowers = message.borrowers.map((e) =>
        QueryBorrowerResponse.toJSON(e)
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryBorrowersResponse>, I>>(
    base?: I
  ): QueryBorrowersResponse {
    return QueryBorrowersResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryBorrowersResponse>, I>>(
    object: I
  ): QueryBorrowersResponse {
    const message = createBaseQueryBorrowersResponse();
    message.borrowers =
      object.borrowers?.map((e) => QueryBorrowerResponse.fromPartial(e)) || [];
    return message;
  },
};
