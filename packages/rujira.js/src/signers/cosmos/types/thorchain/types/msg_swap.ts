// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/msg_swap.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "../../binary";
import {
  base64FromBytes,
  bytesFromBase64,
  DeepPartial,
  Exact,
  isSet,
} from "../../helpers";
import { Asset, Tx } from "../common/common";

export const protobufPackage = "types";

export enum OrderType {
  market = 0,
  limit = 1,
  UNRECOGNIZED = -1,
}

export function orderTypeFromJSON(object: any): OrderType {
  switch (object) {
    case 0:
    case "market":
      return OrderType.market;
    case 1:
    case "limit":
      return OrderType.limit;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OrderType.UNRECOGNIZED;
  }
}

export function orderTypeToJSON(object: OrderType): string {
  switch (object) {
    case OrderType.market:
      return "market";
    case OrderType.limit:
      return "limit";
    case OrderType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface MsgSwap {
  tx: Tx | undefined;
  targetAsset: Asset | undefined;
  destination: string;
  tradeTarget: string;
  affiliateAddress: string;
  affiliateBasisPoints: string;
  signer: Uint8Array;
  aggregator: string;
  aggregatorTargetAddress: string;
  aggregatorTargetLimit: string;
  orderType: OrderType;
  streamQuantity: number;
  streamInterval: number;
}

function createBaseMsgSwap(): MsgSwap {
  return {
    tx: undefined,
    targetAsset: undefined,
    destination: "",
    tradeTarget: "",
    affiliateAddress: "",
    affiliateBasisPoints: "",
    signer: new Uint8Array(0),
    aggregator: "",
    aggregatorTargetAddress: "",
    aggregatorTargetLimit: "",
    orderType: 0,
    streamQuantity: 0,
    streamInterval: 0,
  };
}

export const MsgSwap = {
  encode(
    message: MsgSwap,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.tx !== undefined) {
      Tx.encode(message.tx, writer.uint32(10).fork()).ldelim();
    }
    if (message.targetAsset !== undefined) {
      Asset.encode(message.targetAsset, writer.uint32(18).fork()).ldelim();
    }
    if (message.destination !== "") {
      writer.uint32(26).string(message.destination);
    }
    if (message.tradeTarget !== "") {
      writer.uint32(34).string(message.tradeTarget);
    }
    if (message.affiliateAddress !== "") {
      writer.uint32(42).string(message.affiliateAddress);
    }
    if (message.affiliateBasisPoints !== "") {
      writer.uint32(50).string(message.affiliateBasisPoints);
    }
    if (message.signer.length !== 0) {
      writer.uint32(58).bytes(message.signer);
    }
    if (message.aggregator !== "") {
      writer.uint32(66).string(message.aggregator);
    }
    if (message.aggregatorTargetAddress !== "") {
      writer.uint32(74).string(message.aggregatorTargetAddress);
    }
    if (message.aggregatorTargetLimit !== "") {
      writer.uint32(82).string(message.aggregatorTargetLimit);
    }
    if (message.orderType !== 0) {
      writer.uint32(88).int32(message.orderType);
    }
    if (message.streamQuantity !== 0) {
      writer.uint32(96).uint64(message.streamQuantity);
    }
    if (message.streamInterval !== 0) {
      writer.uint32(104).uint64(message.streamInterval);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgSwap {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSwap();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tx = Tx.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.targetAsset = Asset.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.destination = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.tradeTarget = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.affiliateAddress = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.affiliateBasisPoints = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.signer = reader.bytes();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.aggregator = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.aggregatorTargetAddress = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.aggregatorTargetLimit = reader.string();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.orderType = reader.int32() as any;
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.streamQuantity = Number(reader.uint64());
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.streamInterval = Number(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgSwap {
    return {
      tx: isSet(object.tx) ? Tx.fromJSON(object.tx) : undefined,
      targetAsset: isSet(object.targetAsset)
        ? Asset.fromJSON(object.targetAsset)
        : undefined,
      destination: isSet(object.destination)
        ? globalThis.String(object.destination)
        : "",
      tradeTarget: isSet(object.tradeTarget)
        ? globalThis.String(object.tradeTarget)
        : "",
      affiliateAddress: isSet(object.affiliateAddress)
        ? globalThis.String(object.affiliateAddress)
        : "",
      affiliateBasisPoints: isSet(object.affiliateBasisPoints)
        ? globalThis.String(object.affiliateBasisPoints)
        : "",
      signer: isSet(object.signer)
        ? bytesFromBase64(object.signer)
        : new Uint8Array(0),
      aggregator: isSet(object.aggregator)
        ? globalThis.String(object.aggregator)
        : "",
      aggregatorTargetAddress: isSet(object.aggregatorTargetAddress)
        ? globalThis.String(object.aggregatorTargetAddress)
        : "",
      aggregatorTargetLimit: isSet(object.aggregatorTargetLimit)
        ? globalThis.String(object.aggregatorTargetLimit)
        : "",
      orderType: isSet(object.orderType)
        ? orderTypeFromJSON(object.orderType)
        : 0,
      streamQuantity: isSet(object.streamQuantity)
        ? globalThis.Number(object.streamQuantity)
        : 0,
      streamInterval: isSet(object.streamInterval)
        ? globalThis.Number(object.streamInterval)
        : 0,
    };
  },

  toJSON(message: MsgSwap): unknown {
    const obj: any = {};
    if (message.tx !== undefined) {
      obj.tx = Tx.toJSON(message.tx);
    }
    if (message.targetAsset !== undefined) {
      obj.targetAsset = Asset.toJSON(message.targetAsset);
    }
    if (message.destination !== "") {
      obj.destination = message.destination;
    }
    if (message.tradeTarget !== "") {
      obj.tradeTarget = message.tradeTarget;
    }
    if (message.affiliateAddress !== "") {
      obj.affiliateAddress = message.affiliateAddress;
    }
    if (message.affiliateBasisPoints !== "") {
      obj.affiliateBasisPoints = message.affiliateBasisPoints;
    }
    if (message.signer.length !== 0) {
      obj.signer = base64FromBytes(message.signer);
    }
    if (message.aggregator !== "") {
      obj.aggregator = message.aggregator;
    }
    if (message.aggregatorTargetAddress !== "") {
      obj.aggregatorTargetAddress = message.aggregatorTargetAddress;
    }
    if (message.aggregatorTargetLimit !== "") {
      obj.aggregatorTargetLimit = message.aggregatorTargetLimit;
    }
    if (message.orderType !== 0) {
      obj.orderType = orderTypeToJSON(message.orderType);
    }
    if (message.streamQuantity !== 0) {
      obj.streamQuantity = Math.round(message.streamQuantity);
    }
    if (message.streamInterval !== 0) {
      obj.streamInterval = Math.round(message.streamInterval);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSwap>, I>>(base?: I): MsgSwap {
    return MsgSwap.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSwap>, I>>(object: I): MsgSwap {
    const message = createBaseMsgSwap();
    message.tx =
      object.tx !== undefined && object.tx !== null
        ? Tx.fromPartial(object.tx)
        : undefined;
    message.targetAsset =
      object.targetAsset !== undefined && object.targetAsset !== null
        ? Asset.fromPartial(object.targetAsset)
        : undefined;
    message.destination = object.destination ?? "";
    message.tradeTarget = object.tradeTarget ?? "";
    message.affiliateAddress = object.affiliateAddress ?? "";
    message.affiliateBasisPoints = object.affiliateBasisPoints ?? "";
    message.signer = object.signer ?? new Uint8Array(0);
    message.aggregator = object.aggregator ?? "";
    message.aggregatorTargetAddress = object.aggregatorTargetAddress ?? "";
    message.aggregatorTargetLimit = object.aggregatorTargetLimit ?? "";
    message.orderType = object.orderType ?? 0;
    message.streamQuantity = object.streamQuantity ?? 0;
    message.streamInterval = object.streamInterval ?? 0;
    return message;
  },
};
