// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/type_mimir.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "../../binary";
import {
  base64FromBytes,
  bytesFromBase64,
  DeepPartial,
  Exact,
  isSet,
} from "../../helpers";
export const protobufPackage = "types";

export interface NodeMimir {
  key: string;
  value: number;
  signer: Uint8Array;
}

export interface NodeMimirs {
  mimirs: NodeMimir[];
}

function createBaseNodeMimir(): NodeMimir {
  return { key: "", value: 0, signer: new Uint8Array(0) };
}

export const NodeMimir = {
  encode(
    message: NodeMimir,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(16).int64(message.value);
    }
    if (message.signer.length !== 0) {
      writer.uint32(26).bytes(message.signer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NodeMimir {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNodeMimir();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.value = Number(reader.int64());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.signer = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NodeMimir {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
      signer: isSet(object.signer)
        ? bytesFromBase64(object.signer)
        : new Uint8Array(0),
    };
  },

  toJSON(message: NodeMimir): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    if (message.signer.length !== 0) {
      obj.signer = base64FromBytes(message.signer);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NodeMimir>, I>>(base?: I): NodeMimir {
    return NodeMimir.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NodeMimir>, I>>(
    object: I
  ): NodeMimir {
    const message = createBaseNodeMimir();
    message.key = object.key ?? "";
    message.value = object.value ?? 0;
    message.signer = object.signer ?? new Uint8Array(0);
    return message;
  },
};

function createBaseNodeMimirs(): NodeMimirs {
  return { mimirs: [] };
}

export const NodeMimirs = {
  encode(
    message: NodeMimirs,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    for (const v of message.mimirs) {
      NodeMimir.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NodeMimirs {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNodeMimirs();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.mimirs.push(NodeMimir.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NodeMimirs {
    return {
      mimirs: globalThis.Array.isArray(object?.mimirs)
        ? object.mimirs.map((e: any) => NodeMimir.fromJSON(e))
        : [],
    };
  },

  toJSON(message: NodeMimirs): unknown {
    const obj: any = {};
    if (message.mimirs?.length) {
      obj.mimirs = message.mimirs.map((e) => NodeMimir.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NodeMimirs>, I>>(base?: I): NodeMimirs {
    return NodeMimirs.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NodeMimirs>, I>>(
    object: I
  ): NodeMimirs {
    const message = createBaseNodeMimirs();
    message.mimirs = object.mimirs?.map((e) => NodeMimir.fromPartial(e)) || [];
    return message;
  },
};
