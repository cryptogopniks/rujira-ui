// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/type_affiliate_fee_collector.proto

import { BinaryReader, BinaryWriter } from "../../binary";
import {
  base64FromBytes,
  bytesFromBase64,
  DeepPartial,
  Exact,
  isSet,
} from "../../helpers";

/* eslint-disable */

export const protobufPackage = "types";

export interface AffiliateFeeCollector {
  ownerAddress: Uint8Array;
  runeAmount: string;
}

function createBaseAffiliateFeeCollector(): AffiliateFeeCollector {
  return { ownerAddress: new Uint8Array(0), runeAmount: "" };
}

export const AffiliateFeeCollector = {
  encode(
    message: AffiliateFeeCollector,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.ownerAddress.length !== 0) {
      writer.uint32(10).bytes(message.ownerAddress);
    }
    if (message.runeAmount !== "") {
      writer.uint32(18).string(message.runeAmount);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): AffiliateFeeCollector {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAffiliateFeeCollector();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ownerAddress = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.runeAmount = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AffiliateFeeCollector {
    return {
      ownerAddress: isSet(object.ownerAddress)
        ? bytesFromBase64(object.ownerAddress)
        : new Uint8Array(0),
      runeAmount: isSet(object.runeAmount)
        ? globalThis.String(object.runeAmount)
        : "",
    };
  },

  toJSON(message: AffiliateFeeCollector): unknown {
    const obj: any = {};
    if (message.ownerAddress.length !== 0) {
      obj.ownerAddress = base64FromBytes(message.ownerAddress);
    }
    if (message.runeAmount !== "") {
      obj.runeAmount = message.runeAmount;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AffiliateFeeCollector>, I>>(
    base?: I
  ): AffiliateFeeCollector {
    return AffiliateFeeCollector.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AffiliateFeeCollector>, I>>(
    object: I
  ): AffiliateFeeCollector {
    const message = createBaseAffiliateFeeCollector();
    message.ownerAddress = object.ownerAddress ?? new Uint8Array(0);
    message.runeAmount = object.runeAmount ?? "";
    return message;
  },
};
