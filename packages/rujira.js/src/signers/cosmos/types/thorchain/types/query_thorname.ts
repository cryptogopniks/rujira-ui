// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/query_thorname.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "../../binary";
import { DeepPartial, Exact, isSet } from "../../helpers";
export const protobufPackage = "types";

export interface QueryThornameRequest {
  name: string;
  height: string;
}

export interface QueryThornameResponse {
  name: string;
  expireBlockHeight: number;
  owner: string;
  preferredAsset: string;
  /** Amount of RUNE currently accrued by this thorname in affiliate fees waiting to be swapped to preferred asset. */
  affiliateCollectorRune: string;
  aliases: ThornameAlias[];
  /** Amount of RUNE currently needed to trigger a preferred asset swap. */
  preferredAssetSwapThresholdRune: string;
}

export interface ThornameAlias {
  chain: string;
  address: string;
}

function createBaseQueryThornameRequest(): QueryThornameRequest {
  return { name: "", height: "" };
}

export const QueryThornameRequest = {
  encode(
    message: QueryThornameRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.height !== "") {
      writer.uint32(18).string(message.height);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryThornameRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryThornameRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryThornameRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QueryThornameRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryThornameRequest>, I>>(
    base?: I
  ): QueryThornameRequest {
    return QueryThornameRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryThornameRequest>, I>>(
    object: I
  ): QueryThornameRequest {
    const message = createBaseQueryThornameRequest();
    message.name = object.name ?? "";
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseQueryThornameResponse(): QueryThornameResponse {
  return {
    name: "",
    expireBlockHeight: 0,
    owner: "",
    preferredAsset: "",
    affiliateCollectorRune: "",
    aliases: [],
    preferredAssetSwapThresholdRune: "",
  };
}

export const QueryThornameResponse = {
  encode(
    message: QueryThornameResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.expireBlockHeight !== 0) {
      writer.uint32(16).int64(message.expireBlockHeight);
    }
    if (message.owner !== "") {
      writer.uint32(26).string(message.owner);
    }
    if (message.preferredAsset !== "") {
      writer.uint32(34).string(message.preferredAsset);
    }
    if (message.affiliateCollectorRune !== "") {
      writer.uint32(42).string(message.affiliateCollectorRune);
    }
    for (const v of message.aliases) {
      ThornameAlias.encode(v!, writer.uint32(50).fork()).ldelim();
    }
    if (message.preferredAssetSwapThresholdRune !== "") {
      writer.uint32(58).string(message.preferredAssetSwapThresholdRune);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryThornameResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryThornameResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.expireBlockHeight = Number(reader.int64());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.owner = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.preferredAsset = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.affiliateCollectorRune = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.aliases.push(ThornameAlias.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.preferredAssetSwapThresholdRune = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryThornameResponse {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      expireBlockHeight: isSet(object.expireBlockHeight)
        ? globalThis.Number(object.expireBlockHeight)
        : 0,
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      preferredAsset: isSet(object.preferredAsset)
        ? globalThis.String(object.preferredAsset)
        : "",
      affiliateCollectorRune: isSet(object.affiliateCollectorRune)
        ? globalThis.String(object.affiliateCollectorRune)
        : "",
      aliases: globalThis.Array.isArray(object?.aliases)
        ? object.aliases.map((e: any) => ThornameAlias.fromJSON(e))
        : [],
      preferredAssetSwapThresholdRune: isSet(
        object.preferredAssetSwapThresholdRune
      )
        ? globalThis.String(object.preferredAssetSwapThresholdRune)
        : "",
    };
  },

  toJSON(message: QueryThornameResponse): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.expireBlockHeight !== 0) {
      obj.expireBlockHeight = Math.round(message.expireBlockHeight);
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.preferredAsset !== "") {
      obj.preferredAsset = message.preferredAsset;
    }
    if (message.affiliateCollectorRune !== "") {
      obj.affiliateCollectorRune = message.affiliateCollectorRune;
    }
    if (message.aliases?.length) {
      obj.aliases = message.aliases.map((e) => ThornameAlias.toJSON(e));
    }
    if (message.preferredAssetSwapThresholdRune !== "") {
      obj.preferredAssetSwapThresholdRune =
        message.preferredAssetSwapThresholdRune;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryThornameResponse>, I>>(
    base?: I
  ): QueryThornameResponse {
    return QueryThornameResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryThornameResponse>, I>>(
    object: I
  ): QueryThornameResponse {
    const message = createBaseQueryThornameResponse();
    message.name = object.name ?? "";
    message.expireBlockHeight = object.expireBlockHeight ?? 0;
    message.owner = object.owner ?? "";
    message.preferredAsset = object.preferredAsset ?? "";
    message.affiliateCollectorRune = object.affiliateCollectorRune ?? "";
    message.aliases =
      object.aliases?.map((e) => ThornameAlias.fromPartial(e)) || [];
    message.preferredAssetSwapThresholdRune =
      object.preferredAssetSwapThresholdRune ?? "";
    return message;
  },
};

function createBaseThornameAlias(): ThornameAlias {
  return { chain: "", address: "" };
}

export const ThornameAlias = {
  encode(
    message: ThornameAlias,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.chain !== "") {
      writer.uint32(10).string(message.chain);
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ThornameAlias {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseThornameAlias();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.chain = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ThornameAlias {
    return {
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
    };
  },

  toJSON(message: ThornameAlias): unknown {
    const obj: any = {};
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ThornameAlias>, I>>(
    base?: I
  ): ThornameAlias {
    return ThornameAlias.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ThornameAlias>, I>>(
    object: I
  ): ThornameAlias {
    const message = createBaseThornameAlias();
    message.chain = object.chain ?? "";
    message.address = object.address ?? "";
    return message;
  },
};
