// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/msg_upgrade.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "../../binary";
import {
  base64FromBytes,
  bytesFromBase64,
  DeepPartial,
  Exact,
  isSet,
} from "../../helpers";
export const protobufPackage = "types";

export interface Upgrade {
  height: number;
  info: string;
}

/** UpgradeProposal is the storage format for the upgrade proposal. */
export interface UpgradeProposal {
  height: number;
  info: string;
  proposer: Uint8Array;
}

export interface MsgProposeUpgrade {
  name: string;
  upgrade: Upgrade | undefined;
  signer: Uint8Array;
}

export interface MsgApproveUpgrade {
  name: string;
  signer: Uint8Array;
}

export interface MsgRejectUpgrade {
  name: string;
  signer: Uint8Array;
}

function createBaseUpgrade(): Upgrade {
  return { height: 0, info: "" };
}

export const Upgrade = {
  encode(
    message: Upgrade,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.height !== 0) {
      writer.uint32(8).int64(message.height);
    }
    if (message.info !== "") {
      writer.uint32(18).string(message.info);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Upgrade {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpgrade();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.height = Number(reader.int64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.info = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Upgrade {
    return {
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      info: isSet(object.info) ? globalThis.String(object.info) : "",
    };
  },

  toJSON(message: Upgrade): unknown {
    const obj: any = {};
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.info !== "") {
      obj.info = message.info;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Upgrade>, I>>(base?: I): Upgrade {
    return Upgrade.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Upgrade>, I>>(object: I): Upgrade {
    const message = createBaseUpgrade();
    message.height = object.height ?? 0;
    message.info = object.info ?? "";
    return message;
  },
};

function createBaseUpgradeProposal(): UpgradeProposal {
  return { height: 0, info: "", proposer: new Uint8Array(0) };
}

export const UpgradeProposal = {
  encode(
    message: UpgradeProposal,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.height !== 0) {
      writer.uint32(8).int64(message.height);
    }
    if (message.info !== "") {
      writer.uint32(18).string(message.info);
    }
    if (message.proposer.length !== 0) {
      writer.uint32(26).bytes(message.proposer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpgradeProposal {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpgradeProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.height = Number(reader.int64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.info = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.proposer = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpgradeProposal {
    return {
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      info: isSet(object.info) ? globalThis.String(object.info) : "",
      proposer: isSet(object.proposer)
        ? bytesFromBase64(object.proposer)
        : new Uint8Array(0),
    };
  },

  toJSON(message: UpgradeProposal): unknown {
    const obj: any = {};
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.info !== "") {
      obj.info = message.info;
    }
    if (message.proposer.length !== 0) {
      obj.proposer = base64FromBytes(message.proposer);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpgradeProposal>, I>>(
    base?: I
  ): UpgradeProposal {
    return UpgradeProposal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpgradeProposal>, I>>(
    object: I
  ): UpgradeProposal {
    const message = createBaseUpgradeProposal();
    message.height = object.height ?? 0;
    message.info = object.info ?? "";
    message.proposer = object.proposer ?? new Uint8Array(0);
    return message;
  },
};

function createBaseMsgProposeUpgrade(): MsgProposeUpgrade {
  return { name: "", upgrade: undefined, signer: new Uint8Array(0) };
}

export const MsgProposeUpgrade = {
  encode(
    message: MsgProposeUpgrade,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.upgrade !== undefined) {
      Upgrade.encode(message.upgrade, writer.uint32(18).fork()).ldelim();
    }
    if (message.signer.length !== 0) {
      writer.uint32(26).bytes(message.signer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgProposeUpgrade {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgProposeUpgrade();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.upgrade = Upgrade.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.signer = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgProposeUpgrade {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      upgrade: isSet(object.upgrade)
        ? Upgrade.fromJSON(object.upgrade)
        : undefined,
      signer: isSet(object.signer)
        ? bytesFromBase64(object.signer)
        : new Uint8Array(0),
    };
  },

  toJSON(message: MsgProposeUpgrade): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.upgrade !== undefined) {
      obj.upgrade = Upgrade.toJSON(message.upgrade);
    }
    if (message.signer.length !== 0) {
      obj.signer = base64FromBytes(message.signer);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgProposeUpgrade>, I>>(
    base?: I
  ): MsgProposeUpgrade {
    return MsgProposeUpgrade.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgProposeUpgrade>, I>>(
    object: I
  ): MsgProposeUpgrade {
    const message = createBaseMsgProposeUpgrade();
    message.name = object.name ?? "";
    message.upgrade =
      object.upgrade !== undefined && object.upgrade !== null
        ? Upgrade.fromPartial(object.upgrade)
        : undefined;
    message.signer = object.signer ?? new Uint8Array(0);
    return message;
  },
};

function createBaseMsgApproveUpgrade(): MsgApproveUpgrade {
  return { name: "", signer: new Uint8Array(0) };
}

export const MsgApproveUpgrade = {
  encode(
    message: MsgApproveUpgrade,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.signer.length !== 0) {
      writer.uint32(18).bytes(message.signer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgApproveUpgrade {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgApproveUpgrade();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.signer = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgApproveUpgrade {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      signer: isSet(object.signer)
        ? bytesFromBase64(object.signer)
        : new Uint8Array(0),
    };
  },

  toJSON(message: MsgApproveUpgrade): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.signer.length !== 0) {
      obj.signer = base64FromBytes(message.signer);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgApproveUpgrade>, I>>(
    base?: I
  ): MsgApproveUpgrade {
    return MsgApproveUpgrade.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgApproveUpgrade>, I>>(
    object: I
  ): MsgApproveUpgrade {
    const message = createBaseMsgApproveUpgrade();
    message.name = object.name ?? "";
    message.signer = object.signer ?? new Uint8Array(0);
    return message;
  },
};

function createBaseMsgRejectUpgrade(): MsgRejectUpgrade {
  return { name: "", signer: new Uint8Array(0) };
}

export const MsgRejectUpgrade = {
  encode(
    message: MsgRejectUpgrade,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.signer.length !== 0) {
      writer.uint32(18).bytes(message.signer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRejectUpgrade {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRejectUpgrade();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.signer = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRejectUpgrade {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      signer: isSet(object.signer)
        ? bytesFromBase64(object.signer)
        : new Uint8Array(0),
    };
  },

  toJSON(message: MsgRejectUpgrade): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.signer.length !== 0) {
      obj.signer = base64FromBytes(message.signer);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRejectUpgrade>, I>>(
    base?: I
  ): MsgRejectUpgrade {
    return MsgRejectUpgrade.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRejectUpgrade>, I>>(
    object: I
  ): MsgRejectUpgrade {
    const message = createBaseMsgRejectUpgrade();
    message.name = object.name ?? "";
    message.signer = object.signer ?? new Uint8Array(0);
    return message;
  },
};
