// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/msg_node_pause_chain.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "../../binary";
import { DeepPartial, Exact, isSet } from "../../helpers";
export const protobufPackage = "types";

export interface MsgNodePauseChain {
  value: number;
  signer: Uint8Array;
}

function createBaseMsgNodePauseChain(): MsgNodePauseChain {
  return { value: 0, signer: new Uint8Array(0) };
}

export const MsgNodePauseChain = {
  encode(
    message: MsgNodePauseChain,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.value !== 0) {
      writer.uint32(8).int64(message.value);
    }
    if (message.signer.length !== 0) {
      writer.uint32(18).bytes(message.signer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgNodePauseChain {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgNodePauseChain();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.value = Number(reader.int64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.signer = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgNodePauseChain {
    return {
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
      signer: isSet(object.signer)
        ? bytesFromBase64(object.signer)
        : new Uint8Array(0),
    };
  },

  toJSON(message: MsgNodePauseChain): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    if (message.signer.length !== 0) {
      obj.signer = base64FromBytes(message.signer);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgNodePauseChain>, I>>(
    base?: I
  ): MsgNodePauseChain {
    return MsgNodePauseChain.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgNodePauseChain>, I>>(
    object: I
  ): MsgNodePauseChain {
    const message = createBaseMsgNodePauseChain();
    message.value = object.value ?? 0;
    message.signer = object.signer ?? new Uint8Array(0);
    return message;
  },
};
