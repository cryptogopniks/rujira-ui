// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/type_observed_network_fee.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "../../binary";
import { DeepPartial, Exact, isSet } from "../../helpers";
export const protobufPackage = "types";

export interface ObservedNetworkFeeVoter {
  blockHeight: number;
  reportBlockHeight: number;
  chain: string;
  signers: string[];
  feeRate: number;
  transactionSize: number;
}

function createBaseObservedNetworkFeeVoter(): ObservedNetworkFeeVoter {
  return {
    blockHeight: 0,
    reportBlockHeight: 0,
    chain: "",
    signers: [],
    feeRate: 0,
    transactionSize: 0,
  };
}

export const ObservedNetworkFeeVoter = {
  encode(
    message: ObservedNetworkFeeVoter,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.blockHeight !== 0) {
      writer.uint32(8).int64(message.blockHeight);
    }
    if (message.reportBlockHeight !== 0) {
      writer.uint32(16).int64(message.reportBlockHeight);
    }
    if (message.chain !== "") {
      writer.uint32(26).string(message.chain);
    }
    for (const v of message.signers) {
      writer.uint32(34).string(v!);
    }
    if (message.feeRate !== 0) {
      writer.uint32(40).int64(message.feeRate);
    }
    if (message.transactionSize !== 0) {
      writer.uint32(48).int64(message.transactionSize);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): ObservedNetworkFeeVoter {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseObservedNetworkFeeVoter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.blockHeight = Number(reader.int64());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.reportBlockHeight = Number(reader.int64());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.chain = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.signers.push(reader.string());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.feeRate = Number(reader.int64());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.transactionSize = Number(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ObservedNetworkFeeVoter {
    return {
      blockHeight: isSet(object.blockHeight)
        ? globalThis.Number(object.blockHeight)
        : 0,
      reportBlockHeight: isSet(object.reportBlockHeight)
        ? globalThis.Number(object.reportBlockHeight)
        : 0,
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
      signers: globalThis.Array.isArray(object?.signers)
        ? object.signers.map((e: any) => globalThis.String(e))
        : [],
      feeRate: isSet(object.feeRate) ? globalThis.Number(object.feeRate) : 0,
      transactionSize: isSet(object.transactionSize)
        ? globalThis.Number(object.transactionSize)
        : 0,
    };
  },

  toJSON(message: ObservedNetworkFeeVoter): unknown {
    const obj: any = {};
    if (message.blockHeight !== 0) {
      obj.blockHeight = Math.round(message.blockHeight);
    }
    if (message.reportBlockHeight !== 0) {
      obj.reportBlockHeight = Math.round(message.reportBlockHeight);
    }
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    if (message.signers?.length) {
      obj.signers = message.signers;
    }
    if (message.feeRate !== 0) {
      obj.feeRate = Math.round(message.feeRate);
    }
    if (message.transactionSize !== 0) {
      obj.transactionSize = Math.round(message.transactionSize);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ObservedNetworkFeeVoter>, I>>(
    base?: I
  ): ObservedNetworkFeeVoter {
    return ObservedNetworkFeeVoter.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ObservedNetworkFeeVoter>, I>>(
    object: I
  ): ObservedNetworkFeeVoter {
    const message = createBaseObservedNetworkFeeVoter();
    message.blockHeight = object.blockHeight ?? 0;
    message.reportBlockHeight = object.reportBlockHeight ?? 0;
    message.chain = object.chain ?? "";
    message.signers = object.signers?.map((e) => e) || [];
    message.feeRate = object.feeRate ?? 0;
    message.transactionSize = object.transactionSize ?? 0;
    return message;
  },
};
