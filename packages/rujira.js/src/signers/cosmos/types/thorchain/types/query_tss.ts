// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/query_tss.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "../../binary";
import { DeepPartial, Exact, isSet } from "../../helpers";
import { TssKeygenMetric, TssKeysignMetric } from "./type_tss_metric";

export const protobufPackage = "types";

export interface QueryTssKeygenMetricRequest {
  pubKey: string;
  height: string;
}

export interface QueryTssKeygenMetricResponse {
  metrics: TssKeygenMetric[];
}

export interface QueryTssMetricRequest {
  height: string;
}

export interface QueryTssMetricResponse {
  keygen: TssKeygenMetric[];
  keysign: TssKeysignMetric | undefined;
}

function createBaseQueryTssKeygenMetricRequest(): QueryTssKeygenMetricRequest {
  return { pubKey: "", height: "" };
}

export const QueryTssKeygenMetricRequest = {
  encode(
    message: QueryTssKeygenMetricRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.pubKey !== "") {
      writer.uint32(10).string(message.pubKey);
    }
    if (message.height !== "") {
      writer.uint32(18).string(message.height);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryTssKeygenMetricRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTssKeygenMetricRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pubKey = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTssKeygenMetricRequest {
    return {
      pubKey: isSet(object.pubKey) ? globalThis.String(object.pubKey) : "",
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QueryTssKeygenMetricRequest): unknown {
    const obj: any = {};
    if (message.pubKey !== "") {
      obj.pubKey = message.pubKey;
    }
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryTssKeygenMetricRequest>, I>>(
    base?: I
  ): QueryTssKeygenMetricRequest {
    return QueryTssKeygenMetricRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryTssKeygenMetricRequest>, I>>(
    object: I
  ): QueryTssKeygenMetricRequest {
    const message = createBaseQueryTssKeygenMetricRequest();
    message.pubKey = object.pubKey ?? "";
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseQueryTssKeygenMetricResponse(): QueryTssKeygenMetricResponse {
  return { metrics: [] };
}

export const QueryTssKeygenMetricResponse = {
  encode(
    message: QueryTssKeygenMetricResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    for (const v of message.metrics) {
      TssKeygenMetric.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryTssKeygenMetricResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTssKeygenMetricResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.metrics.push(TssKeygenMetric.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTssKeygenMetricResponse {
    return {
      metrics: globalThis.Array.isArray(object?.metrics)
        ? object.metrics.map((e: any) => TssKeygenMetric.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryTssKeygenMetricResponse): unknown {
    const obj: any = {};
    if (message.metrics?.length) {
      obj.metrics = message.metrics.map((e) => TssKeygenMetric.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryTssKeygenMetricResponse>, I>>(
    base?: I
  ): QueryTssKeygenMetricResponse {
    return QueryTssKeygenMetricResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryTssKeygenMetricResponse>, I>>(
    object: I
  ): QueryTssKeygenMetricResponse {
    const message = createBaseQueryTssKeygenMetricResponse();
    message.metrics =
      object.metrics?.map((e) => TssKeygenMetric.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryTssMetricRequest(): QueryTssMetricRequest {
  return { height: "" };
}

export const QueryTssMetricRequest = {
  encode(
    message: QueryTssMetricRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.height !== "") {
      writer.uint32(10).string(message.height);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryTssMetricRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTssMetricRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTssMetricRequest {
    return {
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QueryTssMetricRequest): unknown {
    const obj: any = {};
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryTssMetricRequest>, I>>(
    base?: I
  ): QueryTssMetricRequest {
    return QueryTssMetricRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryTssMetricRequest>, I>>(
    object: I
  ): QueryTssMetricRequest {
    const message = createBaseQueryTssMetricRequest();
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseQueryTssMetricResponse(): QueryTssMetricResponse {
  return { keygen: [], keysign: undefined };
}

export const QueryTssMetricResponse = {
  encode(
    message: QueryTssMetricResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    for (const v of message.keygen) {
      TssKeygenMetric.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.keysign !== undefined) {
      TssKeysignMetric.encode(
        message.keysign,
        writer.uint32(18).fork()
      ).ldelim();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryTssMetricResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTssMetricResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.keygen.push(TssKeygenMetric.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.keysign = TssKeysignMetric.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTssMetricResponse {
    return {
      keygen: globalThis.Array.isArray(object?.keygen)
        ? object.keygen.map((e: any) => TssKeygenMetric.fromJSON(e))
        : [],
      keysign: isSet(object.keysign)
        ? TssKeysignMetric.fromJSON(object.keysign)
        : undefined,
    };
  },

  toJSON(message: QueryTssMetricResponse): unknown {
    const obj: any = {};
    if (message.keygen?.length) {
      obj.keygen = message.keygen.map((e) => TssKeygenMetric.toJSON(e));
    }
    if (message.keysign !== undefined) {
      obj.keysign = TssKeysignMetric.toJSON(message.keysign);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryTssMetricResponse>, I>>(
    base?: I
  ): QueryTssMetricResponse {
    return QueryTssMetricResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryTssMetricResponse>, I>>(
    object: I
  ): QueryTssMetricResponse {
    const message = createBaseQueryTssMetricResponse();
    message.keygen =
      object.keygen?.map((e) => TssKeygenMetric.fromPartial(e)) || [];
    message.keysign =
      object.keysign !== undefined && object.keysign !== null
        ? TssKeysignMetric.fromPartial(object.keysign)
        : undefined;
    return message;
  },
};
