// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/query_rune_provider.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "../../binary";
import { DeepPartial, Exact, isSet } from "../../helpers";
export const protobufPackage = "types";

export interface QueryRuneProviderRequest {
  address: string;
  height: string;
}

export interface QueryRuneProviderResponse {
  runeAddress: string;
  units: string;
  value: string;
  pnl: string;
  depositAmount: string;
  withdrawAmount: string;
  lastDepositHeight: number;
  lastWithdrawHeight: number;
}

export interface QueryRuneProvidersRequest {
  height: string;
}

export interface QueryRuneProvidersResponse {
  providers: QueryRuneProviderResponse[];
}

function createBaseQueryRuneProviderRequest(): QueryRuneProviderRequest {
  return { address: "", height: "" };
}

export const QueryRuneProviderRequest = {
  encode(
    message: QueryRuneProviderRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.height !== "") {
      writer.uint32(18).string(message.height);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryRuneProviderRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryRuneProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryRuneProviderRequest {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QueryRuneProviderRequest): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryRuneProviderRequest>, I>>(
    base?: I
  ): QueryRuneProviderRequest {
    return QueryRuneProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryRuneProviderRequest>, I>>(
    object: I
  ): QueryRuneProviderRequest {
    const message = createBaseQueryRuneProviderRequest();
    message.address = object.address ?? "";
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseQueryRuneProviderResponse(): QueryRuneProviderResponse {
  return {
    runeAddress: "",
    units: "",
    value: "",
    pnl: "",
    depositAmount: "",
    withdrawAmount: "",
    lastDepositHeight: 0,
    lastWithdrawHeight: 0,
  };
}

export const QueryRuneProviderResponse = {
  encode(
    message: QueryRuneProviderResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.runeAddress !== "") {
      writer.uint32(10).string(message.runeAddress);
    }
    if (message.units !== "") {
      writer.uint32(18).string(message.units);
    }
    if (message.value !== "") {
      writer.uint32(26).string(message.value);
    }
    if (message.pnl !== "") {
      writer.uint32(34).string(message.pnl);
    }
    if (message.depositAmount !== "") {
      writer.uint32(42).string(message.depositAmount);
    }
    if (message.withdrawAmount !== "") {
      writer.uint32(50).string(message.withdrawAmount);
    }
    if (message.lastDepositHeight !== 0) {
      writer.uint32(56).int64(message.lastDepositHeight);
    }
    if (message.lastWithdrawHeight !== 0) {
      writer.uint32(64).int64(message.lastWithdrawHeight);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryRuneProviderResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryRuneProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.runeAddress = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.units = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.value = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pnl = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.depositAmount = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.withdrawAmount = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.lastDepositHeight = Number(reader.int64());
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.lastWithdrawHeight = Number(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryRuneProviderResponse {
    return {
      runeAddress: isSet(object.runeAddress)
        ? globalThis.String(object.runeAddress)
        : "",
      units: isSet(object.units) ? globalThis.String(object.units) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
      pnl: isSet(object.pnl) ? globalThis.String(object.pnl) : "",
      depositAmount: isSet(object.depositAmount)
        ? globalThis.String(object.depositAmount)
        : "",
      withdrawAmount: isSet(object.withdrawAmount)
        ? globalThis.String(object.withdrawAmount)
        : "",
      lastDepositHeight: isSet(object.lastDepositHeight)
        ? globalThis.Number(object.lastDepositHeight)
        : 0,
      lastWithdrawHeight: isSet(object.lastWithdrawHeight)
        ? globalThis.Number(object.lastWithdrawHeight)
        : 0,
    };
  },

  toJSON(message: QueryRuneProviderResponse): unknown {
    const obj: any = {};
    if (message.runeAddress !== "") {
      obj.runeAddress = message.runeAddress;
    }
    if (message.units !== "") {
      obj.units = message.units;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    if (message.pnl !== "") {
      obj.pnl = message.pnl;
    }
    if (message.depositAmount !== "") {
      obj.depositAmount = message.depositAmount;
    }
    if (message.withdrawAmount !== "") {
      obj.withdrawAmount = message.withdrawAmount;
    }
    if (message.lastDepositHeight !== 0) {
      obj.lastDepositHeight = Math.round(message.lastDepositHeight);
    }
    if (message.lastWithdrawHeight !== 0) {
      obj.lastWithdrawHeight = Math.round(message.lastWithdrawHeight);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryRuneProviderResponse>, I>>(
    base?: I
  ): QueryRuneProviderResponse {
    return QueryRuneProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryRuneProviderResponse>, I>>(
    object: I
  ): QueryRuneProviderResponse {
    const message = createBaseQueryRuneProviderResponse();
    message.runeAddress = object.runeAddress ?? "";
    message.units = object.units ?? "";
    message.value = object.value ?? "";
    message.pnl = object.pnl ?? "";
    message.depositAmount = object.depositAmount ?? "";
    message.withdrawAmount = object.withdrawAmount ?? "";
    message.lastDepositHeight = object.lastDepositHeight ?? 0;
    message.lastWithdrawHeight = object.lastWithdrawHeight ?? 0;
    return message;
  },
};

function createBaseQueryRuneProvidersRequest(): QueryRuneProvidersRequest {
  return { height: "" };
}

export const QueryRuneProvidersRequest = {
  encode(
    message: QueryRuneProvidersRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.height !== "") {
      writer.uint32(10).string(message.height);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryRuneProvidersRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryRuneProvidersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryRuneProvidersRequest {
    return {
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QueryRuneProvidersRequest): unknown {
    const obj: any = {};
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryRuneProvidersRequest>, I>>(
    base?: I
  ): QueryRuneProvidersRequest {
    return QueryRuneProvidersRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryRuneProvidersRequest>, I>>(
    object: I
  ): QueryRuneProvidersRequest {
    const message = createBaseQueryRuneProvidersRequest();
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseQueryRuneProvidersResponse(): QueryRuneProvidersResponse {
  return { providers: [] };
}

export const QueryRuneProvidersResponse = {
  encode(
    message: QueryRuneProvidersResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    for (const v of message.providers) {
      QueryRuneProviderResponse.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryRuneProvidersResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryRuneProvidersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.providers.push(
            QueryRuneProviderResponse.decode(reader, reader.uint32())
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryRuneProvidersResponse {
    return {
      providers: globalThis.Array.isArray(object?.providers)
        ? object.providers.map((e: any) =>
            QueryRuneProviderResponse.fromJSON(e)
          )
        : [],
    };
  },

  toJSON(message: QueryRuneProvidersResponse): unknown {
    const obj: any = {};
    if (message.providers?.length) {
      obj.providers = message.providers.map((e) =>
        QueryRuneProviderResponse.toJSON(e)
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryRuneProvidersResponse>, I>>(
    base?: I
  ): QueryRuneProvidersResponse {
    return QueryRuneProvidersResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryRuneProvidersResponse>, I>>(
    object: I
  ): QueryRuneProvidersResponse {
    const message = createBaseQueryRuneProvidersResponse();
    message.providers =
      object.providers?.map((e) => QueryRuneProviderResponse.fromPartial(e)) ||
      [];
    return message;
  },
};
