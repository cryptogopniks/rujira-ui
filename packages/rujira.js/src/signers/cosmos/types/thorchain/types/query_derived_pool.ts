// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/query_derived_pool.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "../../binary";
import { DeepPartial, Exact, isSet } from "../../helpers";
export const protobufPackage = "types";

export interface QueryDerivedPoolRequest {
  asset: string;
  height: string;
}

export interface QueryDerivedPoolResponse {
  asset: string;
  status: string;
  decimals: number;
  balanceAsset: string;
  balanceRune: string;
  /** the depth of the derived virtual pool relative to L1 pool (in basis points) */
  derivedDepthBps: string;
}

export interface QueryDerivedPoolsRequest {
  height: string;
}

export interface QueryDerivedPoolsResponse {
  pools: QueryDerivedPoolResponse[];
}

function createBaseQueryDerivedPoolRequest(): QueryDerivedPoolRequest {
  return { asset: "", height: "" };
}

export const QueryDerivedPoolRequest = {
  encode(
    message: QueryDerivedPoolRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.asset !== "") {
      writer.uint32(10).string(message.asset);
    }
    if (message.height !== "") {
      writer.uint32(18).string(message.height);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryDerivedPoolRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDerivedPoolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.asset = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDerivedPoolRequest {
    return {
      asset: isSet(object.asset) ? globalThis.String(object.asset) : "",
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QueryDerivedPoolRequest): unknown {
    const obj: any = {};
    if (message.asset !== "") {
      obj.asset = message.asset;
    }
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryDerivedPoolRequest>, I>>(
    base?: I
  ): QueryDerivedPoolRequest {
    return QueryDerivedPoolRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryDerivedPoolRequest>, I>>(
    object: I
  ): QueryDerivedPoolRequest {
    const message = createBaseQueryDerivedPoolRequest();
    message.asset = object.asset ?? "";
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseQueryDerivedPoolResponse(): QueryDerivedPoolResponse {
  return {
    asset: "",
    status: "",
    decimals: 0,
    balanceAsset: "",
    balanceRune: "",
    derivedDepthBps: "",
  };
}

export const QueryDerivedPoolResponse = {
  encode(
    message: QueryDerivedPoolResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.asset !== "") {
      writer.uint32(10).string(message.asset);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    if (message.decimals !== 0) {
      writer.uint32(24).int64(message.decimals);
    }
    if (message.balanceAsset !== "") {
      writer.uint32(34).string(message.balanceAsset);
    }
    if (message.balanceRune !== "") {
      writer.uint32(42).string(message.balanceRune);
    }
    if (message.derivedDepthBps !== "") {
      writer.uint32(50).string(message.derivedDepthBps);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryDerivedPoolResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDerivedPoolResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.asset = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.decimals = Number(reader.int64());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.balanceAsset = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.balanceRune = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.derivedDepthBps = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDerivedPoolResponse {
    return {
      asset: isSet(object.asset) ? globalThis.String(object.asset) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      decimals: isSet(object.decimals) ? globalThis.Number(object.decimals) : 0,
      balanceAsset: isSet(object.balanceAsset)
        ? globalThis.String(object.balanceAsset)
        : "",
      balanceRune: isSet(object.balanceRune)
        ? globalThis.String(object.balanceRune)
        : "",
      derivedDepthBps: isSet(object.derivedDepthBps)
        ? globalThis.String(object.derivedDepthBps)
        : "",
    };
  },

  toJSON(message: QueryDerivedPoolResponse): unknown {
    const obj: any = {};
    if (message.asset !== "") {
      obj.asset = message.asset;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.decimals !== 0) {
      obj.decimals = Math.round(message.decimals);
    }
    if (message.balanceAsset !== "") {
      obj.balanceAsset = message.balanceAsset;
    }
    if (message.balanceRune !== "") {
      obj.balanceRune = message.balanceRune;
    }
    if (message.derivedDepthBps !== "") {
      obj.derivedDepthBps = message.derivedDepthBps;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryDerivedPoolResponse>, I>>(
    base?: I
  ): QueryDerivedPoolResponse {
    return QueryDerivedPoolResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryDerivedPoolResponse>, I>>(
    object: I
  ): QueryDerivedPoolResponse {
    const message = createBaseQueryDerivedPoolResponse();
    message.asset = object.asset ?? "";
    message.status = object.status ?? "";
    message.decimals = object.decimals ?? 0;
    message.balanceAsset = object.balanceAsset ?? "";
    message.balanceRune = object.balanceRune ?? "";
    message.derivedDepthBps = object.derivedDepthBps ?? "";
    return message;
  },
};

function createBaseQueryDerivedPoolsRequest(): QueryDerivedPoolsRequest {
  return { height: "" };
}

export const QueryDerivedPoolsRequest = {
  encode(
    message: QueryDerivedPoolsRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.height !== "") {
      writer.uint32(10).string(message.height);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryDerivedPoolsRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDerivedPoolsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDerivedPoolsRequest {
    return {
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QueryDerivedPoolsRequest): unknown {
    const obj: any = {};
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryDerivedPoolsRequest>, I>>(
    base?: I
  ): QueryDerivedPoolsRequest {
    return QueryDerivedPoolsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryDerivedPoolsRequest>, I>>(
    object: I
  ): QueryDerivedPoolsRequest {
    const message = createBaseQueryDerivedPoolsRequest();
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseQueryDerivedPoolsResponse(): QueryDerivedPoolsResponse {
  return { pools: [] };
}

export const QueryDerivedPoolsResponse = {
  encode(
    message: QueryDerivedPoolsResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    for (const v of message.pools) {
      QueryDerivedPoolResponse.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryDerivedPoolsResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDerivedPoolsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pools.push(
            QueryDerivedPoolResponse.decode(reader, reader.uint32())
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDerivedPoolsResponse {
    return {
      pools: globalThis.Array.isArray(object?.pools)
        ? object.pools.map((e: any) => QueryDerivedPoolResponse.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryDerivedPoolsResponse): unknown {
    const obj: any = {};
    if (message.pools?.length) {
      obj.pools = message.pools.map((e) => QueryDerivedPoolResponse.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryDerivedPoolsResponse>, I>>(
    base?: I
  ): QueryDerivedPoolsResponse {
    return QueryDerivedPoolsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryDerivedPoolsResponse>, I>>(
    object: I
  ): QueryDerivedPoolsResponse {
    const message = createBaseQueryDerivedPoolsResponse();
    message.pools =
      object.pools?.map((e) => QueryDerivedPoolResponse.fromPartial(e)) || [];
    return message;
  },
};
