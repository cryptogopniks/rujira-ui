// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/query_swap_queue.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "../../binary";
import { DeepPartial, Exact, isSet } from "../../helpers";
import { MsgSwap } from "./msg_swap";

export const protobufPackage = "types";

export interface QuerySwapQueueRequest {
  height: string;
}

export interface QuerySwapQueueResponse {
  swapQueue: MsgSwap[];
}

function createBaseQuerySwapQueueRequest(): QuerySwapQueueRequest {
  return { height: "" };
}

export const QuerySwapQueueRequest = {
  encode(
    message: QuerySwapQueueRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.height !== "") {
      writer.uint32(10).string(message.height);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QuerySwapQueueRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQuerySwapQueueRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QuerySwapQueueRequest {
    return {
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QuerySwapQueueRequest): unknown {
    const obj: any = {};
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QuerySwapQueueRequest>, I>>(
    base?: I
  ): QuerySwapQueueRequest {
    return QuerySwapQueueRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QuerySwapQueueRequest>, I>>(
    object: I
  ): QuerySwapQueueRequest {
    const message = createBaseQuerySwapQueueRequest();
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseQuerySwapQueueResponse(): QuerySwapQueueResponse {
  return { swapQueue: [] };
}

export const QuerySwapQueueResponse = {
  encode(
    message: QuerySwapQueueResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    for (const v of message.swapQueue) {
      MsgSwap.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QuerySwapQueueResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQuerySwapQueueResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.swapQueue.push(MsgSwap.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QuerySwapQueueResponse {
    return {
      swapQueue: globalThis.Array.isArray(object?.swapQueue)
        ? object.swapQueue.map((e: any) => MsgSwap.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QuerySwapQueueResponse): unknown {
    const obj: any = {};
    if (message.swapQueue?.length) {
      obj.swapQueue = message.swapQueue.map((e) => MsgSwap.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QuerySwapQueueResponse>, I>>(
    base?: I
  ): QuerySwapQueueResponse {
    return QuerySwapQueueResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QuerySwapQueueResponse>, I>>(
    object: I
  ): QuerySwapQueueResponse {
    const message = createBaseQuerySwapQueueResponse();
    message.swapQueue =
      object.swapQueue?.map((e) => MsgSwap.fromPartial(e)) || [];
    return message;
  },
};
