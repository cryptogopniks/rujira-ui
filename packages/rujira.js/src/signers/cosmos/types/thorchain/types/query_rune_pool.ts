// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/query_rune_pool.proto

import { BinaryReader, BinaryWriter } from "../../binary";
import { DeepPartial, Exact, isSet } from "../../helpers";

/* eslint-disable */

export const protobufPackage = "types";

export interface QueryRunePoolRequest {
  height: string;
}

export interface QueryRunePoolResponse {
  pol: POL | undefined;
  providers: RunePoolProviders | undefined;
  reserve: RunePoolReserve | undefined;
}

export interface POL {
  /** total amount of RUNE deposited into the pools */
  runeDeposited: string;
  /** total amount of RUNE withdrawn from the pools */
  runeWithdrawn: string;
  /** total value of protocol's LP position in RUNE value */
  value: string;
  /** profit and loss of protocol owned liquidity */
  pnl: string;
  /** current amount of rune deposited */
  currentDeposit: string;
}

export interface RunePoolProviders {
  /** the units of RUNEPool owned by providers (including pending) */
  units: string;
  /** the units of RUNEPool owned by providers that remain pending */
  pendingUnits: string;
  /** the amount of RUNE pending */
  pendingRune: string;
  /** the value of the provider share of the RUNEPool (includes pending RUNE) */
  value: string;
  /** the profit and loss of the provider share of the RUNEPool */
  pnl: string;
  /** the current RUNE deposited by providers */
  currentDeposit: string;
}

export interface RunePoolReserve {
  /** the units of RUNEPool owned by the reserve */
  units: string;
  /** the value of the reserve share of the RUNEPool */
  value: string;
  /** the profit and loss of the reserve share of the RUNEPool */
  pnl: string;
  /** the current RUNE deposited by the reserve */
  currentDeposit: string;
}

function createBaseQueryRunePoolRequest(): QueryRunePoolRequest {
  return { height: "" };
}

export const QueryRunePoolRequest = {
  encode(
    message: QueryRunePoolRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.height !== "") {
      writer.uint32(10).string(message.height);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryRunePoolRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryRunePoolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryRunePoolRequest {
    return {
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QueryRunePoolRequest): unknown {
    const obj: any = {};
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryRunePoolRequest>, I>>(
    base?: I
  ): QueryRunePoolRequest {
    return QueryRunePoolRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryRunePoolRequest>, I>>(
    object: I
  ): QueryRunePoolRequest {
    const message = createBaseQueryRunePoolRequest();
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseQueryRunePoolResponse(): QueryRunePoolResponse {
  return { pol: undefined, providers: undefined, reserve: undefined };
}

export const QueryRunePoolResponse = {
  encode(
    message: QueryRunePoolResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.pol !== undefined) {
      POL.encode(message.pol, writer.uint32(10).fork()).ldelim();
    }
    if (message.providers !== undefined) {
      RunePoolProviders.encode(
        message.providers,
        writer.uint32(18).fork()
      ).ldelim();
    }
    if (message.reserve !== undefined) {
      RunePoolReserve.encode(
        message.reserve,
        writer.uint32(26).fork()
      ).ldelim();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryRunePoolResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryRunePoolResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pol = POL.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.providers = RunePoolProviders.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.reserve = RunePoolReserve.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryRunePoolResponse {
    return {
      pol: isSet(object.pol) ? POL.fromJSON(object.pol) : undefined,
      providers: isSet(object.providers)
        ? RunePoolProviders.fromJSON(object.providers)
        : undefined,
      reserve: isSet(object.reserve)
        ? RunePoolReserve.fromJSON(object.reserve)
        : undefined,
    };
  },

  toJSON(message: QueryRunePoolResponse): unknown {
    const obj: any = {};
    if (message.pol !== undefined) {
      obj.pol = POL.toJSON(message.pol);
    }
    if (message.providers !== undefined) {
      obj.providers = RunePoolProviders.toJSON(message.providers);
    }
    if (message.reserve !== undefined) {
      obj.reserve = RunePoolReserve.toJSON(message.reserve);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryRunePoolResponse>, I>>(
    base?: I
  ): QueryRunePoolResponse {
    return QueryRunePoolResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryRunePoolResponse>, I>>(
    object: I
  ): QueryRunePoolResponse {
    const message = createBaseQueryRunePoolResponse();
    message.pol =
      object.pol !== undefined && object.pol !== null
        ? POL.fromPartial(object.pol)
        : undefined;
    message.providers =
      object.providers !== undefined && object.providers !== null
        ? RunePoolProviders.fromPartial(object.providers)
        : undefined;
    message.reserve =
      object.reserve !== undefined && object.reserve !== null
        ? RunePoolReserve.fromPartial(object.reserve)
        : undefined;
    return message;
  },
};

function createBasePOL(): POL {
  return {
    runeDeposited: "",
    runeWithdrawn: "",
    value: "",
    pnl: "",
    currentDeposit: "",
  };
}

export const POL = {
  encode(
    message: POL,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.runeDeposited !== "") {
      writer.uint32(10).string(message.runeDeposited);
    }
    if (message.runeWithdrawn !== "") {
      writer.uint32(18).string(message.runeWithdrawn);
    }
    if (message.value !== "") {
      writer.uint32(26).string(message.value);
    }
    if (message.pnl !== "") {
      writer.uint32(34).string(message.pnl);
    }
    if (message.currentDeposit !== "") {
      writer.uint32(42).string(message.currentDeposit);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): POL {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePOL();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.runeDeposited = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.runeWithdrawn = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.value = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pnl = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.currentDeposit = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): POL {
    return {
      runeDeposited: isSet(object.runeDeposited)
        ? globalThis.String(object.runeDeposited)
        : "",
      runeWithdrawn: isSet(object.runeWithdrawn)
        ? globalThis.String(object.runeWithdrawn)
        : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
      pnl: isSet(object.pnl) ? globalThis.String(object.pnl) : "",
      currentDeposit: isSet(object.currentDeposit)
        ? globalThis.String(object.currentDeposit)
        : "",
    };
  },

  toJSON(message: POL): unknown {
    const obj: any = {};
    if (message.runeDeposited !== "") {
      obj.runeDeposited = message.runeDeposited;
    }
    if (message.runeWithdrawn !== "") {
      obj.runeWithdrawn = message.runeWithdrawn;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    if (message.pnl !== "") {
      obj.pnl = message.pnl;
    }
    if (message.currentDeposit !== "") {
      obj.currentDeposit = message.currentDeposit;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<POL>, I>>(base?: I): POL {
    return POL.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<POL>, I>>(object: I): POL {
    const message = createBasePOL();
    message.runeDeposited = object.runeDeposited ?? "";
    message.runeWithdrawn = object.runeWithdrawn ?? "";
    message.value = object.value ?? "";
    message.pnl = object.pnl ?? "";
    message.currentDeposit = object.currentDeposit ?? "";
    return message;
  },
};

function createBaseRunePoolProviders(): RunePoolProviders {
  return {
    units: "",
    pendingUnits: "",
    pendingRune: "",
    value: "",
    pnl: "",
    currentDeposit: "",
  };
}

export const RunePoolProviders = {
  encode(
    message: RunePoolProviders,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.units !== "") {
      writer.uint32(10).string(message.units);
    }
    if (message.pendingUnits !== "") {
      writer.uint32(18).string(message.pendingUnits);
    }
    if (message.pendingRune !== "") {
      writer.uint32(26).string(message.pendingRune);
    }
    if (message.value !== "") {
      writer.uint32(34).string(message.value);
    }
    if (message.pnl !== "") {
      writer.uint32(42).string(message.pnl);
    }
    if (message.currentDeposit !== "") {
      writer.uint32(50).string(message.currentDeposit);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RunePoolProviders {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRunePoolProviders();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.units = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pendingUnits = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pendingRune = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.value = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.pnl = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.currentDeposit = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RunePoolProviders {
    return {
      units: isSet(object.units) ? globalThis.String(object.units) : "",
      pendingUnits: isSet(object.pendingUnits)
        ? globalThis.String(object.pendingUnits)
        : "",
      pendingRune: isSet(object.pendingRune)
        ? globalThis.String(object.pendingRune)
        : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
      pnl: isSet(object.pnl) ? globalThis.String(object.pnl) : "",
      currentDeposit: isSet(object.currentDeposit)
        ? globalThis.String(object.currentDeposit)
        : "",
    };
  },

  toJSON(message: RunePoolProviders): unknown {
    const obj: any = {};
    if (message.units !== "") {
      obj.units = message.units;
    }
    if (message.pendingUnits !== "") {
      obj.pendingUnits = message.pendingUnits;
    }
    if (message.pendingRune !== "") {
      obj.pendingRune = message.pendingRune;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    if (message.pnl !== "") {
      obj.pnl = message.pnl;
    }
    if (message.currentDeposit !== "") {
      obj.currentDeposit = message.currentDeposit;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RunePoolProviders>, I>>(
    base?: I
  ): RunePoolProviders {
    return RunePoolProviders.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RunePoolProviders>, I>>(
    object: I
  ): RunePoolProviders {
    const message = createBaseRunePoolProviders();
    message.units = object.units ?? "";
    message.pendingUnits = object.pendingUnits ?? "";
    message.pendingRune = object.pendingRune ?? "";
    message.value = object.value ?? "";
    message.pnl = object.pnl ?? "";
    message.currentDeposit = object.currentDeposit ?? "";
    return message;
  },
};

function createBaseRunePoolReserve(): RunePoolReserve {
  return { units: "", value: "", pnl: "", currentDeposit: "" };
}

export const RunePoolReserve = {
  encode(
    message: RunePoolReserve,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.units !== "") {
      writer.uint32(10).string(message.units);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    if (message.pnl !== "") {
      writer.uint32(26).string(message.pnl);
    }
    if (message.currentDeposit !== "") {
      writer.uint32(34).string(message.currentDeposit);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RunePoolReserve {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRunePoolReserve();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.units = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pnl = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.currentDeposit = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RunePoolReserve {
    return {
      units: isSet(object.units) ? globalThis.String(object.units) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
      pnl: isSet(object.pnl) ? globalThis.String(object.pnl) : "",
      currentDeposit: isSet(object.currentDeposit)
        ? globalThis.String(object.currentDeposit)
        : "",
    };
  },

  toJSON(message: RunePoolReserve): unknown {
    const obj: any = {};
    if (message.units !== "") {
      obj.units = message.units;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    if (message.pnl !== "") {
      obj.pnl = message.pnl;
    }
    if (message.currentDeposit !== "") {
      obj.currentDeposit = message.currentDeposit;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RunePoolReserve>, I>>(
    base?: I
  ): RunePoolReserve {
    return RunePoolReserve.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RunePoolReserve>, I>>(
    object: I
  ): RunePoolReserve {
    const message = createBaseRunePoolReserve();
    message.units = object.units ?? "";
    message.value = object.value ?? "";
    message.pnl = object.pnl ?? "";
    message.currentDeposit = object.currentDeposit ?? "";
    return message;
  },
};
