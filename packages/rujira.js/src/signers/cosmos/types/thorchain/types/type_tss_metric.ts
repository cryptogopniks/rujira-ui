// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/type_tss_metric.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "../../binary";
import {
  base64FromBytes,
  bytesFromBase64,
  DeepPartial,
  Exact,
  isSet,
} from "../../helpers";
export const protobufPackage = "types";

export interface NodeTssTime {
  address: Uint8Array;
  tssTime: number;
}

export interface TssKeygenMetric {
  pubKey: string;
  nodeTssTimes: NodeTssTime[];
}

export interface TssKeysignMetric {
  txId: string;
  nodeTssTimes: NodeTssTime[];
}

function createBaseNodeTssTime(): NodeTssTime {
  return { address: new Uint8Array(0), tssTime: 0 };
}

export const NodeTssTime = {
  encode(
    message: NodeTssTime,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.address.length !== 0) {
      writer.uint32(10).bytes(message.address);
    }
    if (message.tssTime !== 0) {
      writer.uint32(16).int64(message.tssTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NodeTssTime {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNodeTssTime();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.address = reader.bytes();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.tssTime = Number(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NodeTssTime {
    return {
      address: isSet(object.address)
        ? bytesFromBase64(object.address)
        : new Uint8Array(0),
      tssTime: isSet(object.tssTime) ? globalThis.Number(object.tssTime) : 0,
    };
  },

  toJSON(message: NodeTssTime): unknown {
    const obj: any = {};
    if (message.address.length !== 0) {
      obj.address = base64FromBytes(message.address);
    }
    if (message.tssTime !== 0) {
      obj.tssTime = Math.round(message.tssTime);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NodeTssTime>, I>>(base?: I): NodeTssTime {
    return NodeTssTime.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NodeTssTime>, I>>(
    object: I
  ): NodeTssTime {
    const message = createBaseNodeTssTime();
    message.address = object.address ?? new Uint8Array(0);
    message.tssTime = object.tssTime ?? 0;
    return message;
  },
};

function createBaseTssKeygenMetric(): TssKeygenMetric {
  return { pubKey: "", nodeTssTimes: [] };
}

export const TssKeygenMetric = {
  encode(
    message: TssKeygenMetric,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.pubKey !== "") {
      writer.uint32(10).string(message.pubKey);
    }
    for (const v of message.nodeTssTimes) {
      NodeTssTime.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TssKeygenMetric {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTssKeygenMetric();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pubKey = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nodeTssTimes.push(
            NodeTssTime.decode(reader, reader.uint32())
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TssKeygenMetric {
    return {
      pubKey: isSet(object.pubKey) ? globalThis.String(object.pubKey) : "",
      nodeTssTimes: globalThis.Array.isArray(object?.nodeTssTimes)
        ? object.nodeTssTimes.map((e: any) => NodeTssTime.fromJSON(e))
        : [],
    };
  },

  toJSON(message: TssKeygenMetric): unknown {
    const obj: any = {};
    if (message.pubKey !== "") {
      obj.pubKey = message.pubKey;
    }
    if (message.nodeTssTimes?.length) {
      obj.nodeTssTimes = message.nodeTssTimes.map((e) => NodeTssTime.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TssKeygenMetric>, I>>(
    base?: I
  ): TssKeygenMetric {
    return TssKeygenMetric.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TssKeygenMetric>, I>>(
    object: I
  ): TssKeygenMetric {
    const message = createBaseTssKeygenMetric();
    message.pubKey = object.pubKey ?? "";
    message.nodeTssTimes =
      object.nodeTssTimes?.map((e) => NodeTssTime.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTssKeysignMetric(): TssKeysignMetric {
  return { txId: "", nodeTssTimes: [] };
}

export const TssKeysignMetric = {
  encode(
    message: TssKeysignMetric,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.txId !== "") {
      writer.uint32(10).string(message.txId);
    }
    for (const v of message.nodeTssTimes) {
      NodeTssTime.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TssKeysignMetric {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTssKeysignMetric();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.txId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nodeTssTimes.push(
            NodeTssTime.decode(reader, reader.uint32())
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TssKeysignMetric {
    return {
      txId: isSet(object.txId) ? globalThis.String(object.txId) : "",
      nodeTssTimes: globalThis.Array.isArray(object?.nodeTssTimes)
        ? object.nodeTssTimes.map((e: any) => NodeTssTime.fromJSON(e))
        : [],
    };
  },

  toJSON(message: TssKeysignMetric): unknown {
    const obj: any = {};
    if (message.txId !== "") {
      obj.txId = message.txId;
    }
    if (message.nodeTssTimes?.length) {
      obj.nodeTssTimes = message.nodeTssTimes.map((e) => NodeTssTime.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TssKeysignMetric>, I>>(
    base?: I
  ): TssKeysignMetric {
    return TssKeysignMetric.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TssKeysignMetric>, I>>(
    object: I
  ): TssKeysignMetric {
    const message = createBaseTssKeysignMetric();
    message.txId = object.txId ?? "";
    message.nodeTssTimes =
      object.nodeTssTimes?.map((e) => NodeTssTime.fromPartial(e)) || [];
    return message;
  },
};
