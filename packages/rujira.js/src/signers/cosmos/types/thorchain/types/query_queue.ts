// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/query_queue.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "../../binary";
import { DeepPartial, Exact, isSet } from "../../helpers";
export const protobufPackage = "types";

export interface QueryQueueRequest {
  height: string;
}

export interface QueryQueueResponse {
  swap: number;
  /** number of signed outbound tx in the queue */
  outbound: number;
  internal: number;
  /** scheduled outbound value in RUNE */
  scheduledOutboundValue: string;
  /** scheduled outbound clout in RUNE */
  scheduledOutboundClout: string;
}

function createBaseQueryQueueRequest(): QueryQueueRequest {
  return { height: "" };
}

export const QueryQueueRequest = {
  encode(
    message: QueryQueueRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.height !== "") {
      writer.uint32(10).string(message.height);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryQueueRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryQueueRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryQueueRequest {
    return {
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QueryQueueRequest): unknown {
    const obj: any = {};
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryQueueRequest>, I>>(
    base?: I
  ): QueryQueueRequest {
    return QueryQueueRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryQueueRequest>, I>>(
    object: I
  ): QueryQueueRequest {
    const message = createBaseQueryQueueRequest();
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseQueryQueueResponse(): QueryQueueResponse {
  return {
    swap: 0,
    outbound: 0,
    internal: 0,
    scheduledOutboundValue: "",
    scheduledOutboundClout: "",
  };
}

export const QueryQueueResponse = {
  encode(
    message: QueryQueueResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.swap !== 0) {
      writer.uint32(8).int64(message.swap);
    }
    if (message.outbound !== 0) {
      writer.uint32(16).int64(message.outbound);
    }
    if (message.internal !== 0) {
      writer.uint32(24).int64(message.internal);
    }
    if (message.scheduledOutboundValue !== "") {
      writer.uint32(34).string(message.scheduledOutboundValue);
    }
    if (message.scheduledOutboundClout !== "") {
      writer.uint32(42).string(message.scheduledOutboundClout);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryQueueResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryQueueResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.swap = Number(reader.int64());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.outbound = Number(reader.int64());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.internal = Number(reader.int64());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.scheduledOutboundValue = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.scheduledOutboundClout = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryQueueResponse {
    return {
      swap: isSet(object.swap) ? globalThis.Number(object.swap) : 0,
      outbound: isSet(object.outbound) ? globalThis.Number(object.outbound) : 0,
      internal: isSet(object.internal) ? globalThis.Number(object.internal) : 0,
      scheduledOutboundValue: isSet(object.scheduledOutboundValue)
        ? globalThis.String(object.scheduledOutboundValue)
        : "",
      scheduledOutboundClout: isSet(object.scheduledOutboundClout)
        ? globalThis.String(object.scheduledOutboundClout)
        : "",
    };
  },

  toJSON(message: QueryQueueResponse): unknown {
    const obj: any = {};
    if (message.swap !== 0) {
      obj.swap = Math.round(message.swap);
    }
    if (message.outbound !== 0) {
      obj.outbound = Math.round(message.outbound);
    }
    if (message.internal !== 0) {
      obj.internal = Math.round(message.internal);
    }
    if (message.scheduledOutboundValue !== "") {
      obj.scheduledOutboundValue = message.scheduledOutboundValue;
    }
    if (message.scheduledOutboundClout !== "") {
      obj.scheduledOutboundClout = message.scheduledOutboundClout;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryQueueResponse>, I>>(
    base?: I
  ): QueryQueueResponse {
    return QueryQueueResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryQueueResponse>, I>>(
    object: I
  ): QueryQueueResponse {
    const message = createBaseQueryQueueResponse();
    message.swap = object.swap ?? 0;
    message.outbound = object.outbound ?? 0;
    message.internal = object.internal ?? 0;
    message.scheduledOutboundValue = object.scheduledOutboundValue ?? "";
    message.scheduledOutboundClout = object.scheduledOutboundClout ?? "";
    return message;
  },
};
