// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/type_errata_tx_voter.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "../../binary";
import { DeepPartial, Exact, isSet } from "../../helpers";
export const protobufPackage = "types";

export interface ErrataTxVoter {
  txId: string;
  chain: string;
  blockHeight: number;
  signers: string[];
}

function createBaseErrataTxVoter(): ErrataTxVoter {
  return { txId: "", chain: "", blockHeight: 0, signers: [] };
}

export const ErrataTxVoter = {
  encode(
    message: ErrataTxVoter,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.txId !== "") {
      writer.uint32(10).string(message.txId);
    }
    if (message.chain !== "") {
      writer.uint32(18).string(message.chain);
    }
    if (message.blockHeight !== 0) {
      writer.uint32(24).int64(message.blockHeight);
    }
    for (const v of message.signers) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ErrataTxVoter {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseErrataTxVoter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.txId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.chain = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.blockHeight = Number(reader.int64());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.signers.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ErrataTxVoter {
    return {
      txId: isSet(object.txId) ? globalThis.String(object.txId) : "",
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
      blockHeight: isSet(object.blockHeight)
        ? globalThis.Number(object.blockHeight)
        : 0,
      signers: globalThis.Array.isArray(object?.signers)
        ? object.signers.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ErrataTxVoter): unknown {
    const obj: any = {};
    if (message.txId !== "") {
      obj.txId = message.txId;
    }
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    if (message.blockHeight !== 0) {
      obj.blockHeight = Math.round(message.blockHeight);
    }
    if (message.signers?.length) {
      obj.signers = message.signers;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ErrataTxVoter>, I>>(
    base?: I
  ): ErrataTxVoter {
    return ErrataTxVoter.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ErrataTxVoter>, I>>(
    object: I
  ): ErrataTxVoter {
    const message = createBaseErrataTxVoter();
    message.txId = object.txId ?? "";
    message.chain = object.chain ?? "";
    message.blockHeight = object.blockHeight ?? 0;
    message.signers = object.signers?.map((e) => e) || [];
    return message;
  },
};
