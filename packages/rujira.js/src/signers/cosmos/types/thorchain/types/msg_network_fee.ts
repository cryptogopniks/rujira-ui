// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/msg_network_fee.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "../../binary";
import {
  base64FromBytes,
  bytesFromBase64,
  DeepPartial,
  Exact,
  isSet,
} from "../../helpers";
export const protobufPackage = "types";

export interface MsgNetworkFee {
  blockHeight: number;
  chain: string;
  transactionSize: number;
  transactionFeeRate: number;
  signer: Uint8Array;
}

function createBaseMsgNetworkFee(): MsgNetworkFee {
  return {
    blockHeight: 0,
    chain: "",
    transactionSize: 0,
    transactionFeeRate: 0,
    signer: new Uint8Array(0),
  };
}

export const MsgNetworkFee = {
  encode(
    message: MsgNetworkFee,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.blockHeight !== 0) {
      writer.uint32(8).int64(message.blockHeight);
    }
    if (message.chain !== "") {
      writer.uint32(18).string(message.chain);
    }
    if (message.transactionSize !== 0) {
      writer.uint32(24).uint64(message.transactionSize);
    }
    if (message.transactionFeeRate !== 0) {
      writer.uint32(32).uint64(message.transactionFeeRate);
    }
    if (message.signer.length !== 0) {
      writer.uint32(42).bytes(message.signer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgNetworkFee {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgNetworkFee();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.blockHeight = Number(reader.int64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.chain = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.transactionSize = Number(reader.uint64());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.transactionFeeRate = Number(reader.uint64());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.signer = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgNetworkFee {
    return {
      blockHeight: isSet(object.blockHeight)
        ? globalThis.Number(object.blockHeight)
        : 0,
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
      transactionSize: isSet(object.transactionSize)
        ? globalThis.Number(object.transactionSize)
        : 0,
      transactionFeeRate: isSet(object.transactionFeeRate)
        ? globalThis.Number(object.transactionFeeRate)
        : 0,
      signer: isSet(object.signer)
        ? bytesFromBase64(object.signer)
        : new Uint8Array(0),
    };
  },

  toJSON(message: MsgNetworkFee): unknown {
    const obj: any = {};
    if (message.blockHeight !== 0) {
      obj.blockHeight = Math.round(message.blockHeight);
    }
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    if (message.transactionSize !== 0) {
      obj.transactionSize = Math.round(message.transactionSize);
    }
    if (message.transactionFeeRate !== 0) {
      obj.transactionFeeRate = Math.round(message.transactionFeeRate);
    }
    if (message.signer.length !== 0) {
      obj.signer = base64FromBytes(message.signer);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgNetworkFee>, I>>(
    base?: I
  ): MsgNetworkFee {
    return MsgNetworkFee.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgNetworkFee>, I>>(
    object: I
  ): MsgNetworkFee {
    const message = createBaseMsgNetworkFee();
    message.blockHeight = object.blockHeight ?? 0;
    message.chain = object.chain ?? "";
    message.transactionSize = object.transactionSize ?? 0;
    message.transactionFeeRate = object.transactionFeeRate ?? 0;
    message.signer = object.signer ?? new Uint8Array(0);
    return message;
  },
};
