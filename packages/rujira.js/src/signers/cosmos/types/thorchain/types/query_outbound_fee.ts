// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/query_outbound_fee.proto

import { BinaryReader, BinaryWriter } from "../../binary";
import { DeepPartial, Exact, isSet } from "../../helpers";

/* eslint-disable */

export const protobufPackage = "types";

export interface QueryOutboundFeeRequest {
  asset: string;
  height: string;
}

export interface QueryOutboundFeeResponse {
  /** the asset to display the outbound fee for */
  asset: string;
  /** the asset's outbound fee, in (1e8-format) units of the asset */
  outboundFee: string;
  /** Total RUNE the network has withheld as fees to later cover gas costs for this asset's outbounds */
  feeWithheldRune: string;
  /** Total RUNE the network has spent to reimburse gas costs for this asset's outbounds */
  feeSpentRune: string;
  /** amount of RUNE by which the fee_withheld_rune exceeds the fee_spent_rune */
  surplusRune: string;
  /** dynamic multiplier basis points, based on the surplus_rune, affecting the size of the outbound_fee */
  dynamicMultiplierBasisPoints: string;
}

export interface QueryOutboundFeesRequest {
  height: string;
}

export interface QueryOutboundFeesResponse {
  outboundFees: QueryOutboundFeeResponse[];
}

function createBaseQueryOutboundFeeRequest(): QueryOutboundFeeRequest {
  return { asset: "", height: "" };
}

export const QueryOutboundFeeRequest = {
  encode(
    message: QueryOutboundFeeRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.asset !== "") {
      writer.uint32(10).string(message.asset);
    }
    if (message.height !== "") {
      writer.uint32(18).string(message.height);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryOutboundFeeRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOutboundFeeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.asset = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOutboundFeeRequest {
    return {
      asset: isSet(object.asset) ? globalThis.String(object.asset) : "",
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QueryOutboundFeeRequest): unknown {
    const obj: any = {};
    if (message.asset !== "") {
      obj.asset = message.asset;
    }
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryOutboundFeeRequest>, I>>(
    base?: I
  ): QueryOutboundFeeRequest {
    return QueryOutboundFeeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryOutboundFeeRequest>, I>>(
    object: I
  ): QueryOutboundFeeRequest {
    const message = createBaseQueryOutboundFeeRequest();
    message.asset = object.asset ?? "";
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseQueryOutboundFeeResponse(): QueryOutboundFeeResponse {
  return {
    asset: "",
    outboundFee: "",
    feeWithheldRune: "",
    feeSpentRune: "",
    surplusRune: "",
    dynamicMultiplierBasisPoints: "",
  };
}

export const QueryOutboundFeeResponse = {
  encode(
    message: QueryOutboundFeeResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.asset !== "") {
      writer.uint32(10).string(message.asset);
    }
    if (message.outboundFee !== "") {
      writer.uint32(18).string(message.outboundFee);
    }
    if (message.feeWithheldRune !== "") {
      writer.uint32(26).string(message.feeWithheldRune);
    }
    if (message.feeSpentRune !== "") {
      writer.uint32(34).string(message.feeSpentRune);
    }
    if (message.surplusRune !== "") {
      writer.uint32(42).string(message.surplusRune);
    }
    if (message.dynamicMultiplierBasisPoints !== "") {
      writer.uint32(50).string(message.dynamicMultiplierBasisPoints);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryOutboundFeeResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOutboundFeeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.asset = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.outboundFee = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.feeWithheldRune = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.feeSpentRune = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.surplusRune = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.dynamicMultiplierBasisPoints = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOutboundFeeResponse {
    return {
      asset: isSet(object.asset) ? globalThis.String(object.asset) : "",
      outboundFee: isSet(object.outboundFee)
        ? globalThis.String(object.outboundFee)
        : "",
      feeWithheldRune: isSet(object.feeWithheldRune)
        ? globalThis.String(object.feeWithheldRune)
        : "",
      feeSpentRune: isSet(object.feeSpentRune)
        ? globalThis.String(object.feeSpentRune)
        : "",
      surplusRune: isSet(object.surplusRune)
        ? globalThis.String(object.surplusRune)
        : "",
      dynamicMultiplierBasisPoints: isSet(object.dynamicMultiplierBasisPoints)
        ? globalThis.String(object.dynamicMultiplierBasisPoints)
        : "",
    };
  },

  toJSON(message: QueryOutboundFeeResponse): unknown {
    const obj: any = {};
    if (message.asset !== "") {
      obj.asset = message.asset;
    }
    if (message.outboundFee !== "") {
      obj.outboundFee = message.outboundFee;
    }
    if (message.feeWithheldRune !== "") {
      obj.feeWithheldRune = message.feeWithheldRune;
    }
    if (message.feeSpentRune !== "") {
      obj.feeSpentRune = message.feeSpentRune;
    }
    if (message.surplusRune !== "") {
      obj.surplusRune = message.surplusRune;
    }
    if (message.dynamicMultiplierBasisPoints !== "") {
      obj.dynamicMultiplierBasisPoints = message.dynamicMultiplierBasisPoints;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryOutboundFeeResponse>, I>>(
    base?: I
  ): QueryOutboundFeeResponse {
    return QueryOutboundFeeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryOutboundFeeResponse>, I>>(
    object: I
  ): QueryOutboundFeeResponse {
    const message = createBaseQueryOutboundFeeResponse();
    message.asset = object.asset ?? "";
    message.outboundFee = object.outboundFee ?? "";
    message.feeWithheldRune = object.feeWithheldRune ?? "";
    message.feeSpentRune = object.feeSpentRune ?? "";
    message.surplusRune = object.surplusRune ?? "";
    message.dynamicMultiplierBasisPoints =
      object.dynamicMultiplierBasisPoints ?? "";
    return message;
  },
};

function createBaseQueryOutboundFeesRequest(): QueryOutboundFeesRequest {
  return { height: "" };
}

export const QueryOutboundFeesRequest = {
  encode(
    message: QueryOutboundFeesRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.height !== "") {
      writer.uint32(10).string(message.height);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryOutboundFeesRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOutboundFeesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOutboundFeesRequest {
    return {
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QueryOutboundFeesRequest): unknown {
    const obj: any = {};
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryOutboundFeesRequest>, I>>(
    base?: I
  ): QueryOutboundFeesRequest {
    return QueryOutboundFeesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryOutboundFeesRequest>, I>>(
    object: I
  ): QueryOutboundFeesRequest {
    const message = createBaseQueryOutboundFeesRequest();
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseQueryOutboundFeesResponse(): QueryOutboundFeesResponse {
  return { outboundFees: [] };
}

export const QueryOutboundFeesResponse = {
  encode(
    message: QueryOutboundFeesResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    for (const v of message.outboundFees) {
      QueryOutboundFeeResponse.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryOutboundFeesResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOutboundFeesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.outboundFees.push(
            QueryOutboundFeeResponse.decode(reader, reader.uint32())
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOutboundFeesResponse {
    return {
      outboundFees: globalThis.Array.isArray(object?.outboundFees)
        ? object.outboundFees.map((e: any) =>
            QueryOutboundFeeResponse.fromJSON(e)
          )
        : [],
    };
  },

  toJSON(message: QueryOutboundFeesResponse): unknown {
    const obj: any = {};
    if (message.outboundFees?.length) {
      obj.outboundFees = message.outboundFees.map((e) =>
        QueryOutboundFeeResponse.toJSON(e)
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryOutboundFeesResponse>, I>>(
    base?: I
  ): QueryOutboundFeesResponse {
    return QueryOutboundFeesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryOutboundFeesResponse>, I>>(
    object: I
  ): QueryOutboundFeesResponse {
    const message = createBaseQueryOutboundFeesResponse();
    message.outboundFees =
      object.outboundFees?.map((e) =>
        QueryOutboundFeeResponse.fromPartial(e)
      ) || [];
    return message;
  },
};
