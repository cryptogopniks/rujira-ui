// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/query_account.proto

import { BinaryReader, BinaryWriter } from "../../binary";
import { DeepPartial, Exact, isSet } from "../../helpers";

/* eslint-disable */

export const protobufPackage = "types";

export interface QueryAccountRequest {
  address: string;
  height: string;
}

export interface QueryAccountResponse {
  address: string;
  pubKey: string;
  accountNumber: string;
  sequence: string;
}

function createBaseQueryAccountRequest(): QueryAccountRequest {
  return { address: "", height: "" };
}

export const QueryAccountRequest = {
  encode(
    message: QueryAccountRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.height !== "") {
      writer.uint32(18).string(message.height);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryAccountRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAccountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAccountRequest {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QueryAccountRequest): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAccountRequest>, I>>(
    base?: I
  ): QueryAccountRequest {
    return QueryAccountRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAccountRequest>, I>>(
    object: I
  ): QueryAccountRequest {
    const message = createBaseQueryAccountRequest();
    message.address = object.address ?? "";
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseQueryAccountResponse(): QueryAccountResponse {
  return { address: "", pubKey: "", accountNumber: "", sequence: "" };
}

export const QueryAccountResponse = {
  encode(
    message: QueryAccountResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.pubKey !== "") {
      writer.uint32(18).string(message.pubKey);
    }
    if (message.accountNumber !== "") {
      writer.uint32(26).string(message.accountNumber);
    }
    if (message.sequence !== "") {
      writer.uint32(34).string(message.sequence);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryAccountResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAccountResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pubKey = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.accountNumber = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.sequence = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAccountResponse {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      pubKey: isSet(object.pubKey) ? globalThis.String(object.pubKey) : "",
      accountNumber: isSet(object.accountNumber)
        ? globalThis.String(object.accountNumber)
        : "",
      sequence: isSet(object.sequence)
        ? globalThis.String(object.sequence)
        : "",
    };
  },

  toJSON(message: QueryAccountResponse): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.pubKey !== "") {
      obj.pubKey = message.pubKey;
    }
    if (message.accountNumber !== "") {
      obj.accountNumber = message.accountNumber;
    }
    if (message.sequence !== "") {
      obj.sequence = message.sequence;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAccountResponse>, I>>(
    base?: I
  ): QueryAccountResponse {
    return QueryAccountResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAccountResponse>, I>>(
    object: I
  ): QueryAccountResponse {
    const message = createBaseQueryAccountResponse();
    message.address = object.address ?? "";
    message.pubKey = object.pubKey ?? "";
    message.accountNumber = object.accountNumber ?? "";
    message.sequence = object.sequence ?? "";
    return message;
  },
};
