// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/msg_reserve_contributor.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "../../binary";
import {
  base64FromBytes,
  bytesFromBase64,
  DeepPartial,
  Exact,
  isSet,
} from "../../helpers";
import { Tx } from "../common/common";
import { ReserveContributor } from "./type_reserve_contributor";

export const protobufPackage = "types";

export interface MsgReserveContributor {
  tx: Tx | undefined;
  contributor: ReserveContributor | undefined;
  signer: Uint8Array;
}

function createBaseMsgReserveContributor(): MsgReserveContributor {
  return { tx: undefined, contributor: undefined, signer: new Uint8Array(0) };
}

export const MsgReserveContributor = {
  encode(
    message: MsgReserveContributor,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.tx !== undefined) {
      Tx.encode(message.tx, writer.uint32(10).fork()).ldelim();
    }
    if (message.contributor !== undefined) {
      ReserveContributor.encode(
        message.contributor,
        writer.uint32(18).fork()
      ).ldelim();
    }
    if (message.signer.length !== 0) {
      writer.uint32(26).bytes(message.signer);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): MsgReserveContributor {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgReserveContributor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tx = Tx.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.contributor = ReserveContributor.decode(
            reader,
            reader.uint32()
          );
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.signer = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgReserveContributor {
    return {
      tx: isSet(object.tx) ? Tx.fromJSON(object.tx) : undefined,
      contributor: isSet(object.contributor)
        ? ReserveContributor.fromJSON(object.contributor)
        : undefined,
      signer: isSet(object.signer)
        ? bytesFromBase64(object.signer)
        : new Uint8Array(0),
    };
  },

  toJSON(message: MsgReserveContributor): unknown {
    const obj: any = {};
    if (message.tx !== undefined) {
      obj.tx = Tx.toJSON(message.tx);
    }
    if (message.contributor !== undefined) {
      obj.contributor = ReserveContributor.toJSON(message.contributor);
    }
    if (message.signer.length !== 0) {
      obj.signer = base64FromBytes(message.signer);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgReserveContributor>, I>>(
    base?: I
  ): MsgReserveContributor {
    return MsgReserveContributor.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgReserveContributor>, I>>(
    object: I
  ): MsgReserveContributor {
    const message = createBaseMsgReserveContributor();
    message.tx =
      object.tx !== undefined && object.tx !== null
        ? Tx.fromPartial(object.tx)
        : undefined;
    message.contributor =
      object.contributor !== undefined && object.contributor !== null
        ? ReserveContributor.fromPartial(object.contributor)
        : undefined;
    message.signer = object.signer ?? new Uint8Array(0);
    return message;
  },
};
