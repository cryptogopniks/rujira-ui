// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/query_vault.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "../../binary";
import { DeepPartial, Exact, isSet } from "../../helpers";
import { Coin } from "../common/common";

export const protobufPackage = "types";

export interface QueryVaultRequest {
  pubKey: string;
  height: string;
}

export interface QueryVaultResponse {
  blockHeight: number;
  pubKey: string;
  coins: Coin[];
  type: string;
  status: string;
  statusSince: number;
  /** the list of node public keys which are members of the vault */
  membership: string[];
  chains: string[];
  inboundTxCount: number;
  outboundTxCount: number;
  pendingTxBlockHeights: number[];
  routers: VaultRouter[];
  addresses: VaultAddress[];
  frozen: string[];
}

export interface QueryAsgardVaultsRequest {
  height: string;
}

export interface QueryAsgardVaultsResponse {
  asgardVaults: QueryVaultResponse[];
}

export interface QueryVaultsPubkeysRequest {
  height: string;
}

export interface QueryVaultsPubkeysResponse {
  asgard: VaultInfo[];
  inactive: VaultInfo[];
}

export interface VaultInfo {
  pubKey: string;
  routers: VaultRouter[];
}

export interface VaultRouter {
  chain: string;
  router: string;
}

export interface VaultAddress {
  chain: string;
  address: string;
}

function createBaseQueryVaultRequest(): QueryVaultRequest {
  return { pubKey: "", height: "" };
}

export const QueryVaultRequest = {
  encode(
    message: QueryVaultRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.pubKey !== "") {
      writer.uint32(10).string(message.pubKey);
    }
    if (message.height !== "") {
      writer.uint32(18).string(message.height);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryVaultRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryVaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pubKey = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryVaultRequest {
    return {
      pubKey: isSet(object.pubKey) ? globalThis.String(object.pubKey) : "",
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QueryVaultRequest): unknown {
    const obj: any = {};
    if (message.pubKey !== "") {
      obj.pubKey = message.pubKey;
    }
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryVaultRequest>, I>>(
    base?: I
  ): QueryVaultRequest {
    return QueryVaultRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryVaultRequest>, I>>(
    object: I
  ): QueryVaultRequest {
    const message = createBaseQueryVaultRequest();
    message.pubKey = object.pubKey ?? "";
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseQueryVaultResponse(): QueryVaultResponse {
  return {
    blockHeight: 0,
    pubKey: "",
    coins: [],
    type: "",
    status: "",
    statusSince: 0,
    membership: [],
    chains: [],
    inboundTxCount: 0,
    outboundTxCount: 0,
    pendingTxBlockHeights: [],
    routers: [],
    addresses: [],
    frozen: [],
  };
}

export const QueryVaultResponse = {
  encode(
    message: QueryVaultResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.blockHeight !== 0) {
      writer.uint32(8).int64(message.blockHeight);
    }
    if (message.pubKey !== "") {
      writer.uint32(18).string(message.pubKey);
    }
    for (const v of message.coins) {
      Coin.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    if (message.type !== "") {
      writer.uint32(34).string(message.type);
    }
    if (message.status !== "") {
      writer.uint32(42).string(message.status);
    }
    if (message.statusSince !== 0) {
      writer.uint32(48).int64(message.statusSince);
    }
    for (const v of message.membership) {
      writer.uint32(58).string(v!);
    }
    for (const v of message.chains) {
      writer.uint32(66).string(v!);
    }
    if (message.inboundTxCount !== 0) {
      writer.uint32(72).int64(message.inboundTxCount);
    }
    if (message.outboundTxCount !== 0) {
      writer.uint32(80).int64(message.outboundTxCount);
    }
    writer.uint32(90).fork();
    for (const v of message.pendingTxBlockHeights) {
      writer.int64(v);
    }
    writer.ldelim();
    for (const v of message.routers) {
      VaultRouter.encode(v!, writer.uint32(98).fork()).ldelim();
    }
    for (const v of message.addresses) {
      VaultAddress.encode(v!, writer.uint32(106).fork()).ldelim();
    }
    for (const v of message.frozen) {
      writer.uint32(114).string(v!);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryVaultResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryVaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.blockHeight = Number(reader.int64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pubKey = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.coins.push(Coin.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.type = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.status = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.statusSince = Number(reader.int64());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.membership.push(reader.string());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.chains.push(reader.string());
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.inboundTxCount = Number(reader.int64());
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.outboundTxCount = Number(reader.int64());
          continue;
        case 11:
          if (tag === 88) {
            message.pendingTxBlockHeights.push(Number(reader.int64()));

            continue;
          }

          if (tag === 90) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.pendingTxBlockHeights.push(Number(reader.int64()));
            }

            continue;
          }

          break;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.routers.push(VaultRouter.decode(reader, reader.uint32()));
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.addresses.push(VaultAddress.decode(reader, reader.uint32()));
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.frozen.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryVaultResponse {
    return {
      blockHeight: isSet(object.blockHeight)
        ? globalThis.Number(object.blockHeight)
        : 0,
      pubKey: isSet(object.pubKey) ? globalThis.String(object.pubKey) : "",
      coins: globalThis.Array.isArray(object?.coins)
        ? object.coins.map((e: any) => Coin.fromJSON(e))
        : [],
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      statusSince: isSet(object.statusSince)
        ? globalThis.Number(object.statusSince)
        : 0,
      membership: globalThis.Array.isArray(object?.membership)
        ? object.membership.map((e: any) => globalThis.String(e))
        : [],
      chains: globalThis.Array.isArray(object?.chains)
        ? object.chains.map((e: any) => globalThis.String(e))
        : [],
      inboundTxCount: isSet(object.inboundTxCount)
        ? globalThis.Number(object.inboundTxCount)
        : 0,
      outboundTxCount: isSet(object.outboundTxCount)
        ? globalThis.Number(object.outboundTxCount)
        : 0,
      pendingTxBlockHeights: globalThis.Array.isArray(
        object?.pendingTxBlockHeights
      )
        ? object.pendingTxBlockHeights.map((e: any) => globalThis.Number(e))
        : [],
      routers: globalThis.Array.isArray(object?.routers)
        ? object.routers.map((e: any) => VaultRouter.fromJSON(e))
        : [],
      addresses: globalThis.Array.isArray(object?.addresses)
        ? object.addresses.map((e: any) => VaultAddress.fromJSON(e))
        : [],
      frozen: globalThis.Array.isArray(object?.frozen)
        ? object.frozen.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: QueryVaultResponse): unknown {
    const obj: any = {};
    if (message.blockHeight !== 0) {
      obj.blockHeight = Math.round(message.blockHeight);
    }
    if (message.pubKey !== "") {
      obj.pubKey = message.pubKey;
    }
    if (message.coins?.length) {
      obj.coins = message.coins.map((e) => Coin.toJSON(e));
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.statusSince !== 0) {
      obj.statusSince = Math.round(message.statusSince);
    }
    if (message.membership?.length) {
      obj.membership = message.membership;
    }
    if (message.chains?.length) {
      obj.chains = message.chains;
    }
    if (message.inboundTxCount !== 0) {
      obj.inboundTxCount = Math.round(message.inboundTxCount);
    }
    if (message.outboundTxCount !== 0) {
      obj.outboundTxCount = Math.round(message.outboundTxCount);
    }
    if (message.pendingTxBlockHeights?.length) {
      obj.pendingTxBlockHeights = message.pendingTxBlockHeights.map((e) =>
        Math.round(e)
      );
    }
    if (message.routers?.length) {
      obj.routers = message.routers.map((e) => VaultRouter.toJSON(e));
    }
    if (message.addresses?.length) {
      obj.addresses = message.addresses.map((e) => VaultAddress.toJSON(e));
    }
    if (message.frozen?.length) {
      obj.frozen = message.frozen;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryVaultResponse>, I>>(
    base?: I
  ): QueryVaultResponse {
    return QueryVaultResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryVaultResponse>, I>>(
    object: I
  ): QueryVaultResponse {
    const message = createBaseQueryVaultResponse();
    message.blockHeight = object.blockHeight ?? 0;
    message.pubKey = object.pubKey ?? "";
    message.coins = object.coins?.map((e) => Coin.fromPartial(e)) || [];
    message.type = object.type ?? "";
    message.status = object.status ?? "";
    message.statusSince = object.statusSince ?? 0;
    message.membership = object.membership?.map((e) => e) || [];
    message.chains = object.chains?.map((e) => e) || [];
    message.inboundTxCount = object.inboundTxCount ?? 0;
    message.outboundTxCount = object.outboundTxCount ?? 0;
    message.pendingTxBlockHeights =
      object.pendingTxBlockHeights?.map((e) => e) || [];
    message.routers =
      object.routers?.map((e) => VaultRouter.fromPartial(e)) || [];
    message.addresses =
      object.addresses?.map((e) => VaultAddress.fromPartial(e)) || [];
    message.frozen = object.frozen?.map((e) => e) || [];
    return message;
  },
};

function createBaseQueryAsgardVaultsRequest(): QueryAsgardVaultsRequest {
  return { height: "" };
}

export const QueryAsgardVaultsRequest = {
  encode(
    message: QueryAsgardVaultsRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.height !== "") {
      writer.uint32(10).string(message.height);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryAsgardVaultsRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAsgardVaultsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAsgardVaultsRequest {
    return {
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QueryAsgardVaultsRequest): unknown {
    const obj: any = {};
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAsgardVaultsRequest>, I>>(
    base?: I
  ): QueryAsgardVaultsRequest {
    return QueryAsgardVaultsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAsgardVaultsRequest>, I>>(
    object: I
  ): QueryAsgardVaultsRequest {
    const message = createBaseQueryAsgardVaultsRequest();
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseQueryAsgardVaultsResponse(): QueryAsgardVaultsResponse {
  return { asgardVaults: [] };
}

export const QueryAsgardVaultsResponse = {
  encode(
    message: QueryAsgardVaultsResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    for (const v of message.asgardVaults) {
      QueryVaultResponse.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryAsgardVaultsResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAsgardVaultsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.asgardVaults.push(
            QueryVaultResponse.decode(reader, reader.uint32())
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAsgardVaultsResponse {
    return {
      asgardVaults: globalThis.Array.isArray(object?.asgardVaults)
        ? object.asgardVaults.map((e: any) => QueryVaultResponse.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryAsgardVaultsResponse): unknown {
    const obj: any = {};
    if (message.asgardVaults?.length) {
      obj.asgardVaults = message.asgardVaults.map((e) =>
        QueryVaultResponse.toJSON(e)
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAsgardVaultsResponse>, I>>(
    base?: I
  ): QueryAsgardVaultsResponse {
    return QueryAsgardVaultsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAsgardVaultsResponse>, I>>(
    object: I
  ): QueryAsgardVaultsResponse {
    const message = createBaseQueryAsgardVaultsResponse();
    message.asgardVaults =
      object.asgardVaults?.map((e) => QueryVaultResponse.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryVaultsPubkeysRequest(): QueryVaultsPubkeysRequest {
  return { height: "" };
}

export const QueryVaultsPubkeysRequest = {
  encode(
    message: QueryVaultsPubkeysRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.height !== "") {
      writer.uint32(10).string(message.height);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryVaultsPubkeysRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryVaultsPubkeysRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryVaultsPubkeysRequest {
    return {
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QueryVaultsPubkeysRequest): unknown {
    const obj: any = {};
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryVaultsPubkeysRequest>, I>>(
    base?: I
  ): QueryVaultsPubkeysRequest {
    return QueryVaultsPubkeysRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryVaultsPubkeysRequest>, I>>(
    object: I
  ): QueryVaultsPubkeysRequest {
    const message = createBaseQueryVaultsPubkeysRequest();
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseQueryVaultsPubkeysResponse(): QueryVaultsPubkeysResponse {
  return { asgard: [], inactive: [] };
}

export const QueryVaultsPubkeysResponse = {
  encode(
    message: QueryVaultsPubkeysResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    for (const v of message.asgard) {
      VaultInfo.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.inactive) {
      VaultInfo.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryVaultsPubkeysResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryVaultsPubkeysResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.asgard.push(VaultInfo.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.inactive.push(VaultInfo.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryVaultsPubkeysResponse {
    return {
      asgard: globalThis.Array.isArray(object?.asgard)
        ? object.asgard.map((e: any) => VaultInfo.fromJSON(e))
        : [],
      inactive: globalThis.Array.isArray(object?.inactive)
        ? object.inactive.map((e: any) => VaultInfo.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryVaultsPubkeysResponse): unknown {
    const obj: any = {};
    if (message.asgard?.length) {
      obj.asgard = message.asgard.map((e) => VaultInfo.toJSON(e));
    }
    if (message.inactive?.length) {
      obj.inactive = message.inactive.map((e) => VaultInfo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryVaultsPubkeysResponse>, I>>(
    base?: I
  ): QueryVaultsPubkeysResponse {
    return QueryVaultsPubkeysResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryVaultsPubkeysResponse>, I>>(
    object: I
  ): QueryVaultsPubkeysResponse {
    const message = createBaseQueryVaultsPubkeysResponse();
    message.asgard = object.asgard?.map((e) => VaultInfo.fromPartial(e)) || [];
    message.inactive =
      object.inactive?.map((e) => VaultInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseVaultInfo(): VaultInfo {
  return { pubKey: "", routers: [] };
}

export const VaultInfo = {
  encode(
    message: VaultInfo,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.pubKey !== "") {
      writer.uint32(10).string(message.pubKey);
    }
    for (const v of message.routers) {
      VaultRouter.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VaultInfo {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVaultInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pubKey = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.routers.push(VaultRouter.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VaultInfo {
    return {
      pubKey: isSet(object.pubKey) ? globalThis.String(object.pubKey) : "",
      routers: globalThis.Array.isArray(object?.routers)
        ? object.routers.map((e: any) => VaultRouter.fromJSON(e))
        : [],
    };
  },

  toJSON(message: VaultInfo): unknown {
    const obj: any = {};
    if (message.pubKey !== "") {
      obj.pubKey = message.pubKey;
    }
    if (message.routers?.length) {
      obj.routers = message.routers.map((e) => VaultRouter.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VaultInfo>, I>>(base?: I): VaultInfo {
    return VaultInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VaultInfo>, I>>(
    object: I
  ): VaultInfo {
    const message = createBaseVaultInfo();
    message.pubKey = object.pubKey ?? "";
    message.routers =
      object.routers?.map((e) => VaultRouter.fromPartial(e)) || [];
    return message;
  },
};

function createBaseVaultRouter(): VaultRouter {
  return { chain: "", router: "" };
}

export const VaultRouter = {
  encode(
    message: VaultRouter,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.chain !== "") {
      writer.uint32(10).string(message.chain);
    }
    if (message.router !== "") {
      writer.uint32(18).string(message.router);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VaultRouter {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVaultRouter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.chain = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.router = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VaultRouter {
    return {
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
      router: isSet(object.router) ? globalThis.String(object.router) : "",
    };
  },

  toJSON(message: VaultRouter): unknown {
    const obj: any = {};
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    if (message.router !== "") {
      obj.router = message.router;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VaultRouter>, I>>(base?: I): VaultRouter {
    return VaultRouter.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VaultRouter>, I>>(
    object: I
  ): VaultRouter {
    const message = createBaseVaultRouter();
    message.chain = object.chain ?? "";
    message.router = object.router ?? "";
    return message;
  },
};

function createBaseVaultAddress(): VaultAddress {
  return { chain: "", address: "" };
}

export const VaultAddress = {
  encode(
    message: VaultAddress,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.chain !== "") {
      writer.uint32(10).string(message.chain);
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VaultAddress {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVaultAddress();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.chain = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VaultAddress {
    return {
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
    };
  },

  toJSON(message: VaultAddress): unknown {
    const obj: any = {};
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VaultAddress>, I>>(
    base?: I
  ): VaultAddress {
    return VaultAddress.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VaultAddress>, I>>(
    object: I
  ): VaultAddress {
    const message = createBaseVaultAddress();
    message.chain = object.chain ?? "";
    message.address = object.address ?? "";
    return message;
  },
};
