// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: thorchain/denom/v1/types/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "../../../../binary";
import { Metadata } from "../../../../cosmos/bank/v1beta1/bank";
import { Coin } from "../../../../cosmos/base/v1beta1/coin";
import { DeepPartial, Exact, isSet } from "../../../../helpers";

export const protobufPackage = "thorchain.denom.v1";

/**
 * MsgCreateDenom is the sdk.Msg type for allowing an account to create
 * a new denom.  It requires a sender address and a unique ID
 * (to allow accounts to create multiple denoms)
 */
export interface MsgCreateDenom {
  sender: string;
  id: string;
  metadata: Metadata | undefined;
}

/**
 * MsgCreateDenomResponse is the return value of MsgCreateDenom
 * It returns the full string of the newly created denom
 */
export interface MsgCreateDenomResponse {
  newTokenDenom: string;
}

/**
 * MsgMint is the sdk.Msg type for allowing an admin account to mint
 * more of a token.
 */
export interface MsgMintTokens {
  sender: string;
  amount: Coin | undefined;
  recipient: string;
}

export interface MsgMintTokensResponse {}

/**
 * MsgBurn is the sdk.Msg type for allowing an admin account to burn
 * a token.  For now, we only support burning from the sender account.
 */
export interface MsgBurnTokens {
  sender: string;
  amount: Coin | undefined;
}

export interface MsgBurnTokensResponse {}

/**
 * MsgChangeDenomAdmin is the sdk.Msg type for allowing an admin account to reassign
 * adminship of a denom to a new account
 */
export interface MsgChangeDenomAdmin {
  sender: string;
  denom: string;
  newAdmin: string;
}

export interface MsgChangeDenomAdminResponse {}

function createBaseMsgCreateDenom(): MsgCreateDenom {
  return { sender: "", id: "", metadata: undefined };
}

export const MsgCreateDenom = {
  encode(
    message: MsgCreateDenom,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateDenom {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateDenom();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateDenom {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      metadata: isSet(object.metadata)
        ? Metadata.fromJSON(object.metadata)
        : undefined,
    };
  },

  toJSON(message: MsgCreateDenom): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateDenom>, I>>(
    base?: I
  ): MsgCreateDenom {
    return MsgCreateDenom.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateDenom>, I>>(
    object: I
  ): MsgCreateDenom {
    const message = createBaseMsgCreateDenom();
    message.sender = object.sender ?? "";
    message.id = object.id ?? "";
    message.metadata =
      object.metadata !== undefined && object.metadata !== null
        ? Metadata.fromPartial(object.metadata)
        : undefined;
    return message;
  },
};

function createBaseMsgCreateDenomResponse(): MsgCreateDenomResponse {
  return { newTokenDenom: "" };
}

export const MsgCreateDenomResponse = {
  encode(
    message: MsgCreateDenomResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.newTokenDenom !== "") {
      writer.uint32(10).string(message.newTokenDenom);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): MsgCreateDenomResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateDenomResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.newTokenDenom = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateDenomResponse {
    return {
      newTokenDenom: isSet(object.newTokenDenom)
        ? globalThis.String(object.newTokenDenom)
        : "",
    };
  },

  toJSON(message: MsgCreateDenomResponse): unknown {
    const obj: any = {};
    if (message.newTokenDenom !== "") {
      obj.newTokenDenom = message.newTokenDenom;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateDenomResponse>, I>>(
    base?: I
  ): MsgCreateDenomResponse {
    return MsgCreateDenomResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateDenomResponse>, I>>(
    object: I
  ): MsgCreateDenomResponse {
    const message = createBaseMsgCreateDenomResponse();
    message.newTokenDenom = object.newTokenDenom ?? "";
    return message;
  },
};

function createBaseMsgMintTokens(): MsgMintTokens {
  return { sender: "", amount: undefined, recipient: "" };
}

export const MsgMintTokens = {
  encode(
    message: MsgMintTokens,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.amount !== undefined) {
      Coin.encode(message.amount, writer.uint32(18).fork()).ldelim();
    }
    if (message.recipient !== "") {
      writer.uint32(26).string(message.recipient);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgMintTokens {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgMintTokens();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.amount = Coin.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.recipient = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgMintTokens {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      amount: isSet(object.amount) ? Coin.fromJSON(object.amount) : undefined,
      recipient: isSet(object.recipient)
        ? globalThis.String(object.recipient)
        : "",
    };
  },

  toJSON(message: MsgMintTokens): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.amount !== undefined) {
      obj.amount = Coin.toJSON(message.amount);
    }
    if (message.recipient !== "") {
      obj.recipient = message.recipient;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgMintTokens>, I>>(
    base?: I
  ): MsgMintTokens {
    return MsgMintTokens.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgMintTokens>, I>>(
    object: I
  ): MsgMintTokens {
    const message = createBaseMsgMintTokens();
    message.sender = object.sender ?? "";
    message.amount =
      object.amount !== undefined && object.amount !== null
        ? Coin.fromPartial(object.amount)
        : undefined;
    message.recipient = object.recipient ?? "";
    return message;
  },
};

function createBaseMsgMintTokensResponse(): MsgMintTokensResponse {
  return {};
}

export const MsgMintTokensResponse = {
  encode(
    _: MsgMintTokensResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): MsgMintTokensResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgMintTokensResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgMintTokensResponse {
    return {};
  },

  toJSON(_: MsgMintTokensResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgMintTokensResponse>, I>>(
    base?: I
  ): MsgMintTokensResponse {
    return MsgMintTokensResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgMintTokensResponse>, I>>(
    _: I
  ): MsgMintTokensResponse {
    const message = createBaseMsgMintTokensResponse();
    return message;
  },
};

function createBaseMsgBurnTokens(): MsgBurnTokens {
  return { sender: "", amount: undefined };
}

export const MsgBurnTokens = {
  encode(
    message: MsgBurnTokens,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.amount !== undefined) {
      Coin.encode(message.amount, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgBurnTokens {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgBurnTokens();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.amount = Coin.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgBurnTokens {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      amount: isSet(object.amount) ? Coin.fromJSON(object.amount) : undefined,
    };
  },

  toJSON(message: MsgBurnTokens): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.amount !== undefined) {
      obj.amount = Coin.toJSON(message.amount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgBurnTokens>, I>>(
    base?: I
  ): MsgBurnTokens {
    return MsgBurnTokens.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgBurnTokens>, I>>(
    object: I
  ): MsgBurnTokens {
    const message = createBaseMsgBurnTokens();
    message.sender = object.sender ?? "";
    message.amount =
      object.amount !== undefined && object.amount !== null
        ? Coin.fromPartial(object.amount)
        : undefined;
    return message;
  },
};

function createBaseMsgBurnTokensResponse(): MsgBurnTokensResponse {
  return {};
}

export const MsgBurnTokensResponse = {
  encode(
    _: MsgBurnTokensResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): MsgBurnTokensResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgBurnTokensResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgBurnTokensResponse {
    return {};
  },

  toJSON(_: MsgBurnTokensResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgBurnTokensResponse>, I>>(
    base?: I
  ): MsgBurnTokensResponse {
    return MsgBurnTokensResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgBurnTokensResponse>, I>>(
    _: I
  ): MsgBurnTokensResponse {
    const message = createBaseMsgBurnTokensResponse();
    return message;
  },
};

function createBaseMsgChangeDenomAdmin(): MsgChangeDenomAdmin {
  return { sender: "", denom: "", newAdmin: "" };
}

export const MsgChangeDenomAdmin = {
  encode(
    message: MsgChangeDenomAdmin,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.denom !== "") {
      writer.uint32(18).string(message.denom);
    }
    if (message.newAdmin !== "") {
      writer.uint32(26).string(message.newAdmin);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): MsgChangeDenomAdmin {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgChangeDenomAdmin();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.denom = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.newAdmin = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgChangeDenomAdmin {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      newAdmin: isSet(object.newAdmin)
        ? globalThis.String(object.newAdmin)
        : "",
    };
  },

  toJSON(message: MsgChangeDenomAdmin): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.newAdmin !== "") {
      obj.newAdmin = message.newAdmin;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgChangeDenomAdmin>, I>>(
    base?: I
  ): MsgChangeDenomAdmin {
    return MsgChangeDenomAdmin.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgChangeDenomAdmin>, I>>(
    object: I
  ): MsgChangeDenomAdmin {
    const message = createBaseMsgChangeDenomAdmin();
    message.sender = object.sender ?? "";
    message.denom = object.denom ?? "";
    message.newAdmin = object.newAdmin ?? "";
    return message;
  },
};

function createBaseMsgChangeDenomAdminResponse(): MsgChangeDenomAdminResponse {
  return {};
}

export const MsgChangeDenomAdminResponse = {
  encode(
    _: MsgChangeDenomAdminResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): MsgChangeDenomAdminResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgChangeDenomAdminResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgChangeDenomAdminResponse {
    return {};
  },

  toJSON(_: MsgChangeDenomAdminResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgChangeDenomAdminResponse>, I>>(
    base?: I
  ): MsgChangeDenomAdminResponse {
    return MsgChangeDenomAdminResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgChangeDenomAdminResponse>, I>>(
    _: I
  ): MsgChangeDenomAdminResponse {
    const message = createBaseMsgChangeDenomAdminResponse();
    return message;
  },
};

/** Msg defines the Msg service. */
export interface Msg {
  CreateDenom(request: MsgCreateDenom): Promise<MsgCreateDenomResponse>;
  MintTokens(request: MsgMintTokens): Promise<MsgMintTokensResponse>;
  BurnTokens(request: MsgBurnTokens): Promise<MsgBurnTokensResponse>;
  ChangeDenomAdmin(
    request: MsgChangeDenomAdmin
  ): Promise<MsgChangeDenomAdminResponse>;
}

export const MsgServiceName = "thorchain.denom.v1.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.CreateDenom = this.CreateDenom.bind(this);
    this.MintTokens = this.MintTokens.bind(this);
    this.BurnTokens = this.BurnTokens.bind(this);
    this.ChangeDenomAdmin = this.ChangeDenomAdmin.bind(this);
  }
  CreateDenom(request: MsgCreateDenom): Promise<MsgCreateDenomResponse> {
    const data = MsgCreateDenom.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateDenom", data);
    return promise.then((data) =>
      MsgCreateDenomResponse.decode(new BinaryReader(data))
    );
  }

  MintTokens(request: MsgMintTokens): Promise<MsgMintTokensResponse> {
    const data = MsgMintTokens.encode(request).finish();
    const promise = this.rpc.request(this.service, "MintTokens", data);
    return promise.then((data) =>
      MsgMintTokensResponse.decode(new BinaryReader(data))
    );
  }

  BurnTokens(request: MsgBurnTokens): Promise<MsgBurnTokensResponse> {
    const data = MsgBurnTokens.encode(request).finish();
    const promise = this.rpc.request(this.service, "BurnTokens", data);
    return promise.then((data) =>
      MsgBurnTokensResponse.decode(new BinaryReader(data))
    );
  }

  ChangeDenomAdmin(
    request: MsgChangeDenomAdmin
  ): Promise<MsgChangeDenomAdminResponse> {
    const data = MsgChangeDenomAdmin.encode(request).finish();
    const promise = this.rpc.request(this.service, "ChangeDenomAdmin", data);
    return promise.then((data) =>
      MsgChangeDenomAdminResponse.decode(new BinaryReader(data))
    );
  }
}

interface Rpc {
  request(
    service: string,
    method: string,
    data: Uint8Array
  ): Promise<Uint8Array>;
}
