// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/query_invariants.proto

import { BinaryReader, BinaryWriter } from "../../binary";
import { DeepPartial, Exact, isSet } from "../../helpers";

/* eslint-disable */

export const protobufPackage = "types";

export interface QueryInvariantRequest {
  path: string;
  height: string;
}

export interface QueryInvariantResponse {
  /** The name of the invariant. */
  invariant: string;
  /** Returns true if the invariant is broken. */
  broken: boolean;
  /** Informative message about the invariant result. */
  msg: string[];
}

export interface QueryInvariantsRequest {
  height: string;
}

export interface QueryInvariantsResponse {
  invariants: string[];
}

function createBaseQueryInvariantRequest(): QueryInvariantRequest {
  return { path: "", height: "" };
}

export const QueryInvariantRequest = {
  encode(
    message: QueryInvariantRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.path !== "") {
      writer.uint32(10).string(message.path);
    }
    if (message.height !== "") {
      writer.uint32(18).string(message.height);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryInvariantRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryInvariantRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.path = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryInvariantRequest {
    return {
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QueryInvariantRequest): unknown {
    const obj: any = {};
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryInvariantRequest>, I>>(
    base?: I
  ): QueryInvariantRequest {
    return QueryInvariantRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryInvariantRequest>, I>>(
    object: I
  ): QueryInvariantRequest {
    const message = createBaseQueryInvariantRequest();
    message.path = object.path ?? "";
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseQueryInvariantResponse(): QueryInvariantResponse {
  return { invariant: "", broken: false, msg: [] };
}

export const QueryInvariantResponse = {
  encode(
    message: QueryInvariantResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.invariant !== "") {
      writer.uint32(10).string(message.invariant);
    }
    if (message.broken !== false) {
      writer.uint32(16).bool(message.broken);
    }
    for (const v of message.msg) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryInvariantResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryInvariantResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.invariant = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.broken = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.msg.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryInvariantResponse {
    return {
      invariant: isSet(object.invariant)
        ? globalThis.String(object.invariant)
        : "",
      broken: isSet(object.broken) ? globalThis.Boolean(object.broken) : false,
      msg: globalThis.Array.isArray(object?.msg)
        ? object.msg.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: QueryInvariantResponse): unknown {
    const obj: any = {};
    if (message.invariant !== "") {
      obj.invariant = message.invariant;
    }
    if (message.broken !== false) {
      obj.broken = message.broken;
    }
    if (message.msg?.length) {
      obj.msg = message.msg;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryInvariantResponse>, I>>(
    base?: I
  ): QueryInvariantResponse {
    return QueryInvariantResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryInvariantResponse>, I>>(
    object: I
  ): QueryInvariantResponse {
    const message = createBaseQueryInvariantResponse();
    message.invariant = object.invariant ?? "";
    message.broken = object.broken ?? false;
    message.msg = object.msg?.map((e) => e) || [];
    return message;
  },
};

function createBaseQueryInvariantsRequest(): QueryInvariantsRequest {
  return { height: "" };
}

export const QueryInvariantsRequest = {
  encode(
    message: QueryInvariantsRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.height !== "") {
      writer.uint32(10).string(message.height);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryInvariantsRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryInvariantsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryInvariantsRequest {
    return {
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QueryInvariantsRequest): unknown {
    const obj: any = {};
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryInvariantsRequest>, I>>(
    base?: I
  ): QueryInvariantsRequest {
    return QueryInvariantsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryInvariantsRequest>, I>>(
    object: I
  ): QueryInvariantsRequest {
    const message = createBaseQueryInvariantsRequest();
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseQueryInvariantsResponse(): QueryInvariantsResponse {
  return { invariants: [] };
}

export const QueryInvariantsResponse = {
  encode(
    message: QueryInvariantsResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    for (const v of message.invariants) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryInvariantsResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryInvariantsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.invariants.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryInvariantsResponse {
    return {
      invariants: globalThis.Array.isArray(object?.invariants)
        ? object.invariants.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: QueryInvariantsResponse): unknown {
    const obj: any = {};
    if (message.invariants?.length) {
      obj.invariants = message.invariants;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryInvariantsResponse>, I>>(
    base?: I
  ): QueryInvariantsResponse {
    return QueryInvariantsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryInvariantsResponse>, I>>(
    object: I
  ): QueryInvariantsResponse {
    const message = createBaseQueryInvariantsResponse();
    message.invariants = object.invariants?.map((e) => e) || [];
    return message;
  },
};
