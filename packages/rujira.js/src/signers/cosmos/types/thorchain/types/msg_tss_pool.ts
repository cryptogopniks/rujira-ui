// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/msg_tss_pool.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "../../binary";
import {
  base64FromBytes,
  bytesFromBase64,
  DeepPartial,
  Exact,
  isSet,
} from "../../helpers";
import { Blame } from "./type_blame";
import {
  KeygenType,
  keygenTypeFromJSON,
  keygenTypeToJSON,
} from "./type_keygen";

export const protobufPackage = "types";

export interface MsgTssPool {
  id: string;
  poolPubKey: string;
  keygenType: KeygenType;
  pubKeys: string[];
  height: number;
  blame: Blame | undefined;
  chains: string[];
  signer: Uint8Array;
  keygenTime: number;
  keysharesBackup: Uint8Array;
  secp256k1Signature: Uint8Array;
}

function createBaseMsgTssPool(): MsgTssPool {
  return {
    id: "",
    poolPubKey: "",
    keygenType: 0,
    pubKeys: [],
    height: 0,
    blame: undefined,
    chains: [],
    signer: new Uint8Array(0),
    keygenTime: 0,
    keysharesBackup: new Uint8Array(0),
    secp256k1Signature: new Uint8Array(0),
  };
}

export const MsgTssPool = {
  encode(
    message: MsgTssPool,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.poolPubKey !== "") {
      writer.uint32(18).string(message.poolPubKey);
    }
    if (message.keygenType !== 0) {
      writer.uint32(24).int32(message.keygenType);
    }
    for (const v of message.pubKeys) {
      writer.uint32(34).string(v!);
    }
    if (message.height !== 0) {
      writer.uint32(40).int64(message.height);
    }
    if (message.blame !== undefined) {
      Blame.encode(message.blame, writer.uint32(50).fork()).ldelim();
    }
    for (const v of message.chains) {
      writer.uint32(58).string(v!);
    }
    if (message.signer.length !== 0) {
      writer.uint32(66).bytes(message.signer);
    }
    if (message.keygenTime !== 0) {
      writer.uint32(72).int64(message.keygenTime);
    }
    if (message.keysharesBackup.length !== 0) {
      writer.uint32(82).bytes(message.keysharesBackup);
    }
    if (message.secp256k1Signature.length !== 0) {
      writer.uint32(90).bytes(message.secp256k1Signature);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgTssPool {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgTssPool();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.poolPubKey = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.keygenType = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pubKeys.push(reader.string());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.height = Number(reader.int64());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.blame = Blame.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.chains.push(reader.string());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.signer = reader.bytes();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.keygenTime = Number(reader.int64());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.keysharesBackup = reader.bytes();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.secp256k1Signature = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgTssPool {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      poolPubKey: isSet(object.poolPubKey)
        ? globalThis.String(object.poolPubKey)
        : "",
      keygenType: isSet(object.keygenType)
        ? keygenTypeFromJSON(object.keygenType)
        : 0,
      pubKeys: globalThis.Array.isArray(object?.pubKeys)
        ? object.pubKeys.map((e: any) => globalThis.String(e))
        : [],
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      blame: isSet(object.blame) ? Blame.fromJSON(object.blame) : undefined,
      chains: globalThis.Array.isArray(object?.chains)
        ? object.chains.map((e: any) => globalThis.String(e))
        : [],
      signer: isSet(object.signer)
        ? bytesFromBase64(object.signer)
        : new Uint8Array(0),
      keygenTime: isSet(object.keygenTime)
        ? globalThis.Number(object.keygenTime)
        : 0,
      keysharesBackup: isSet(object.keysharesBackup)
        ? bytesFromBase64(object.keysharesBackup)
        : new Uint8Array(0),
      secp256k1Signature: isSet(object.secp256k1Signature)
        ? bytesFromBase64(object.secp256k1Signature)
        : new Uint8Array(0),
    };
  },

  toJSON(message: MsgTssPool): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.poolPubKey !== "") {
      obj.poolPubKey = message.poolPubKey;
    }
    if (message.keygenType !== 0) {
      obj.keygenType = keygenTypeToJSON(message.keygenType);
    }
    if (message.pubKeys?.length) {
      obj.pubKeys = message.pubKeys;
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.blame !== undefined) {
      obj.blame = Blame.toJSON(message.blame);
    }
    if (message.chains?.length) {
      obj.chains = message.chains;
    }
    if (message.signer.length !== 0) {
      obj.signer = base64FromBytes(message.signer);
    }
    if (message.keygenTime !== 0) {
      obj.keygenTime = Math.round(message.keygenTime);
    }
    if (message.keysharesBackup.length !== 0) {
      obj.keysharesBackup = base64FromBytes(message.keysharesBackup);
    }
    if (message.secp256k1Signature.length !== 0) {
      obj.secp256k1Signature = base64FromBytes(message.secp256k1Signature);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgTssPool>, I>>(base?: I): MsgTssPool {
    return MsgTssPool.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgTssPool>, I>>(
    object: I
  ): MsgTssPool {
    const message = createBaseMsgTssPool();
    message.id = object.id ?? "";
    message.poolPubKey = object.poolPubKey ?? "";
    message.keygenType = object.keygenType ?? 0;
    message.pubKeys = object.pubKeys?.map((e) => e) || [];
    message.height = object.height ?? 0;
    message.blame =
      object.blame !== undefined && object.blame !== null
        ? Blame.fromPartial(object.blame)
        : undefined;
    message.chains = object.chains?.map((e) => e) || [];
    message.signer = object.signer ?? new Uint8Array(0);
    message.keygenTime = object.keygenTime ?? 0;
    message.keysharesBackup = object.keysharesBackup ?? new Uint8Array(0);
    message.secp256k1Signature = object.secp256k1Signature ?? new Uint8Array(0);
    return message;
  },
};
