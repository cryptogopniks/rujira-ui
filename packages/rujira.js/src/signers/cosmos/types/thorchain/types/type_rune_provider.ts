// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/type_rune_provider.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "../../binary";
import {
  base64FromBytes,
  bytesFromBase64,
  DeepPartial,
  Exact,
  isSet,
} from "../../helpers";
export const protobufPackage = "types";

export interface RUNEProvider {
  runeAddress: Uint8Array;
  depositAmount: string;
  withdrawAmount: string;
  units: string;
  lastDepositHeight: number;
  lastWithdrawHeight: number;
}

function createBaseRUNEProvider(): RUNEProvider {
  return {
    runeAddress: new Uint8Array(0),
    depositAmount: "",
    withdrawAmount: "",
    units: "",
    lastDepositHeight: 0,
    lastWithdrawHeight: 0,
  };
}

export const RUNEProvider = {
  encode(
    message: RUNEProvider,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.runeAddress.length !== 0) {
      writer.uint32(10).bytes(message.runeAddress);
    }
    if (message.depositAmount !== "") {
      writer.uint32(18).string(message.depositAmount);
    }
    if (message.withdrawAmount !== "") {
      writer.uint32(26).string(message.withdrawAmount);
    }
    if (message.units !== "") {
      writer.uint32(34).string(message.units);
    }
    if (message.lastDepositHeight !== 0) {
      writer.uint32(40).int64(message.lastDepositHeight);
    }
    if (message.lastWithdrawHeight !== 0) {
      writer.uint32(48).int64(message.lastWithdrawHeight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RUNEProvider {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRUNEProvider();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.runeAddress = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.depositAmount = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.withdrawAmount = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.units = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.lastDepositHeight = Number(reader.int64());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.lastWithdrawHeight = Number(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RUNEProvider {
    return {
      runeAddress: isSet(object.runeAddress)
        ? bytesFromBase64(object.runeAddress)
        : new Uint8Array(0),
      depositAmount: isSet(object.depositAmount)
        ? globalThis.String(object.depositAmount)
        : "",
      withdrawAmount: isSet(object.withdrawAmount)
        ? globalThis.String(object.withdrawAmount)
        : "",
      units: isSet(object.units) ? globalThis.String(object.units) : "",
      lastDepositHeight: isSet(object.lastDepositHeight)
        ? globalThis.Number(object.lastDepositHeight)
        : 0,
      lastWithdrawHeight: isSet(object.lastWithdrawHeight)
        ? globalThis.Number(object.lastWithdrawHeight)
        : 0,
    };
  },

  toJSON(message: RUNEProvider): unknown {
    const obj: any = {};
    if (message.runeAddress.length !== 0) {
      obj.runeAddress = base64FromBytes(message.runeAddress);
    }
    if (message.depositAmount !== "") {
      obj.depositAmount = message.depositAmount;
    }
    if (message.withdrawAmount !== "") {
      obj.withdrawAmount = message.withdrawAmount;
    }
    if (message.units !== "") {
      obj.units = message.units;
    }
    if (message.lastDepositHeight !== 0) {
      obj.lastDepositHeight = Math.round(message.lastDepositHeight);
    }
    if (message.lastWithdrawHeight !== 0) {
      obj.lastWithdrawHeight = Math.round(message.lastWithdrawHeight);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RUNEProvider>, I>>(
    base?: I
  ): RUNEProvider {
    return RUNEProvider.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RUNEProvider>, I>>(
    object: I
  ): RUNEProvider {
    const message = createBaseRUNEProvider();
    message.runeAddress = object.runeAddress ?? new Uint8Array(0);
    message.depositAmount = object.depositAmount ?? "";
    message.withdrawAmount = object.withdrawAmount ?? "";
    message.units = object.units ?? "";
    message.lastDepositHeight = object.lastDepositHeight ?? 0;
    message.lastWithdrawHeight = object.lastWithdrawHeight ?? 0;
    return message;
  },
};
