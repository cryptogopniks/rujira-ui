// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/query_constant_values.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "../../binary";
import { DeepPartial, Exact, isSet } from "../../helpers";
export const protobufPackage = "types";

export interface QueryConstantValuesRequest {
  height: string;
}

export interface QueryConstantValuesResponse {
  int64Values: Int64Constants[];
  boolValues: BoolConstants[];
  stringValues: StringConstants[];
}

export interface Int64Constants {
  name: string;
  value: number;
}

export interface BoolConstants {
  name: string;
  value: boolean;
}

export interface StringConstants {
  name: string;
  value: string;
}

function createBaseQueryConstantValuesRequest(): QueryConstantValuesRequest {
  return { height: "" };
}

export const QueryConstantValuesRequest = {
  encode(
    message: QueryConstantValuesRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.height !== "") {
      writer.uint32(10).string(message.height);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryConstantValuesRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryConstantValuesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryConstantValuesRequest {
    return {
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QueryConstantValuesRequest): unknown {
    const obj: any = {};
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryConstantValuesRequest>, I>>(
    base?: I
  ): QueryConstantValuesRequest {
    return QueryConstantValuesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryConstantValuesRequest>, I>>(
    object: I
  ): QueryConstantValuesRequest {
    const message = createBaseQueryConstantValuesRequest();
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseQueryConstantValuesResponse(): QueryConstantValuesResponse {
  return { int64Values: [], boolValues: [], stringValues: [] };
}

export const QueryConstantValuesResponse = {
  encode(
    message: QueryConstantValuesResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    for (const v of message.int64Values) {
      Int64Constants.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.boolValues) {
      BoolConstants.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.stringValues) {
      StringConstants.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryConstantValuesResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryConstantValuesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.int64Values.push(
            Int64Constants.decode(reader, reader.uint32())
          );
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.boolValues.push(
            BoolConstants.decode(reader, reader.uint32())
          );
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.stringValues.push(
            StringConstants.decode(reader, reader.uint32())
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryConstantValuesResponse {
    return {
      int64Values: globalThis.Array.isArray(object?.int64Values)
        ? object.int64Values.map((e: any) => Int64Constants.fromJSON(e))
        : [],
      boolValues: globalThis.Array.isArray(object?.boolValues)
        ? object.boolValues.map((e: any) => BoolConstants.fromJSON(e))
        : [],
      stringValues: globalThis.Array.isArray(object?.stringValues)
        ? object.stringValues.map((e: any) => StringConstants.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryConstantValuesResponse): unknown {
    const obj: any = {};
    if (message.int64Values?.length) {
      obj.int64Values = message.int64Values.map((e) =>
        Int64Constants.toJSON(e)
      );
    }
    if (message.boolValues?.length) {
      obj.boolValues = message.boolValues.map((e) => BoolConstants.toJSON(e));
    }
    if (message.stringValues?.length) {
      obj.stringValues = message.stringValues.map((e) =>
        StringConstants.toJSON(e)
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryConstantValuesResponse>, I>>(
    base?: I
  ): QueryConstantValuesResponse {
    return QueryConstantValuesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryConstantValuesResponse>, I>>(
    object: I
  ): QueryConstantValuesResponse {
    const message = createBaseQueryConstantValuesResponse();
    message.int64Values =
      object.int64Values?.map((e) => Int64Constants.fromPartial(e)) || [];
    message.boolValues =
      object.boolValues?.map((e) => BoolConstants.fromPartial(e)) || [];
    message.stringValues =
      object.stringValues?.map((e) => StringConstants.fromPartial(e)) || [];
    return message;
  },
};

function createBaseInt64Constants(): Int64Constants {
  return { name: "", value: 0 };
}

export const Int64Constants = {
  encode(
    message: Int64Constants,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.value !== 0) {
      writer.uint32(16).int64(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Int64Constants {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInt64Constants();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.value = Number(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Int64Constants {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: Int64Constants): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Int64Constants>, I>>(
    base?: I
  ): Int64Constants {
    return Int64Constants.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Int64Constants>, I>>(
    object: I
  ): Int64Constants {
    const message = createBaseInt64Constants();
    message.name = object.name ?? "";
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseBoolConstants(): BoolConstants {
  return { name: "", value: false };
}

export const BoolConstants = {
  encode(
    message: BoolConstants,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.value !== false) {
      writer.uint32(16).bool(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BoolConstants {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBoolConstants();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.value = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BoolConstants {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      value: isSet(object.value) ? globalThis.Boolean(object.value) : false,
    };
  },

  toJSON(message: BoolConstants): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.value !== false) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BoolConstants>, I>>(
    base?: I
  ): BoolConstants {
    return BoolConstants.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BoolConstants>, I>>(
    object: I
  ): BoolConstants {
    const message = createBaseBoolConstants();
    message.name = object.name ?? "";
    message.value = object.value ?? false;
    return message;
  },
};

function createBaseStringConstants(): StringConstants {
  return { name: "", value: "" };
}

export const StringConstants = {
  encode(
    message: StringConstants,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StringConstants {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStringConstants();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StringConstants {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: StringConstants): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StringConstants>, I>>(
    base?: I
  ): StringConstants {
    return StringConstants.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StringConstants>, I>>(
    object: I
  ): StringConstants {
    const message = createBaseStringConstants();
    message.name = object.name ?? "";
    message.value = object.value ?? "";
    return message;
  },
};
