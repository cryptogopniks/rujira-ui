// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/type_ragnarok.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "../../binary";
import { DeepPartial, Exact, isSet } from "../../helpers";
import { Asset } from "../common/common";

export const protobufPackage = "types";

export interface RagnarokWithdrawPosition {
  number: number;
  pool: Asset | undefined;
}

function createBaseRagnarokWithdrawPosition(): RagnarokWithdrawPosition {
  return { number: 0, pool: undefined };
}

export const RagnarokWithdrawPosition = {
  encode(
    message: RagnarokWithdrawPosition,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.number !== 0) {
      writer.uint32(8).int64(message.number);
    }
    if (message.pool !== undefined) {
      Asset.encode(message.pool, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): RagnarokWithdrawPosition {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRagnarokWithdrawPosition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.number = Number(reader.int64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pool = Asset.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RagnarokWithdrawPosition {
    return {
      number: isSet(object.number) ? globalThis.Number(object.number) : 0,
      pool: isSet(object.pool) ? Asset.fromJSON(object.pool) : undefined,
    };
  },

  toJSON(message: RagnarokWithdrawPosition): unknown {
    const obj: any = {};
    if (message.number !== 0) {
      obj.number = Math.round(message.number);
    }
    if (message.pool !== undefined) {
      obj.pool = Asset.toJSON(message.pool);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RagnarokWithdrawPosition>, I>>(
    base?: I
  ): RagnarokWithdrawPosition {
    return RagnarokWithdrawPosition.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RagnarokWithdrawPosition>, I>>(
    object: I
  ): RagnarokWithdrawPosition {
    const message = createBaseRagnarokWithdrawPosition();
    message.number = object.number ?? 0;
    message.pool =
      object.pool !== undefined && object.pool !== null
        ? Asset.fromPartial(object.pool)
        : undefined;
    return message;
  },
};
