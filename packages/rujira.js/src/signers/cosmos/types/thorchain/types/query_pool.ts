// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/query_pool.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "../../binary";
import { DeepPartial, Exact, isSet } from "../../helpers";
export const protobufPackage = "types";

export interface QueryPoolRequest {
  asset: string;
  height: string;
}

export interface QueryPoolResponse {
  asset: string;
  shortCode: string;
  status: string;
  decimals: number;
  pendingInboundAsset: string;
  pendingInboundRune: string;
  balanceAsset: string;
  balanceRune: string;
  /** the USD (TOR) price of the asset in 1e8 */
  assetTorPrice: string;
  /** the total pool units, this is the sum of LP and synth units */
  poolUnits: string;
  /** the total pool liquidity provider units */
  LPUnits: string;
  /** the total synth units in the pool */
  synthUnits: string;
  /** the total supply of synths for the asset */
  synthSupply: string;
  /** the balance of L1 asset deposited into the Savers Vault */
  saversDepth: string;
  /** the number of units owned by Savers */
  saversUnits: string;
  /** the filled savers capacity in basis points, 4500/10000 = 45% */
  saversFillBps: string;
  /** amount of remaining capacity in asset */
  saversCapacityRemaining: string;
  /** whether additional synths cannot be minted */
  synthMintPaused: boolean;
  /** the amount of synth supply remaining before the current max supply is reached */
  synthSupplyRemaining: string;
  /** the amount of collateral collects for loans */
  loanCollateral: string;
  /** the amount of remaining collateral collects for loans */
  loanCollateralRemaining: string;
  /** the current loan collateralization ratio */
  loanCr: string;
  /** the depth of the derived virtual pool relative to L1 pool (in basis points) */
  derivedDepthBps: string;
}

export interface QueryPoolsRequest {
  height: string;
}

export interface QueryPoolsResponse {
  pools: QueryPoolResponse[];
}

function createBaseQueryPoolRequest(): QueryPoolRequest {
  return { asset: "", height: "" };
}

export const QueryPoolRequest = {
  encode(
    message: QueryPoolRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.asset !== "") {
      writer.uint32(10).string(message.asset);
    }
    if (message.height !== "") {
      writer.uint32(18).string(message.height);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryPoolRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPoolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.asset = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPoolRequest {
    return {
      asset: isSet(object.asset) ? globalThis.String(object.asset) : "",
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QueryPoolRequest): unknown {
    const obj: any = {};
    if (message.asset !== "") {
      obj.asset = message.asset;
    }
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryPoolRequest>, I>>(
    base?: I
  ): QueryPoolRequest {
    return QueryPoolRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryPoolRequest>, I>>(
    object: I
  ): QueryPoolRequest {
    const message = createBaseQueryPoolRequest();
    message.asset = object.asset ?? "";
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseQueryPoolResponse(): QueryPoolResponse {
  return {
    asset: "",
    shortCode: "",
    status: "",
    decimals: 0,
    pendingInboundAsset: "",
    pendingInboundRune: "",
    balanceAsset: "",
    balanceRune: "",
    assetTorPrice: "",
    poolUnits: "",
    LPUnits: "",
    synthUnits: "",
    synthSupply: "",
    saversDepth: "",
    saversUnits: "",
    saversFillBps: "",
    saversCapacityRemaining: "",
    synthMintPaused: false,
    synthSupplyRemaining: "",
    loanCollateral: "",
    loanCollateralRemaining: "",
    loanCr: "",
    derivedDepthBps: "",
  };
}

export const QueryPoolResponse = {
  encode(
    message: QueryPoolResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.asset !== "") {
      writer.uint32(10).string(message.asset);
    }
    if (message.shortCode !== "") {
      writer.uint32(18).string(message.shortCode);
    }
    if (message.status !== "") {
      writer.uint32(26).string(message.status);
    }
    if (message.decimals !== 0) {
      writer.uint32(32).int64(message.decimals);
    }
    if (message.pendingInboundAsset !== "") {
      writer.uint32(42).string(message.pendingInboundAsset);
    }
    if (message.pendingInboundRune !== "") {
      writer.uint32(50).string(message.pendingInboundRune);
    }
    if (message.balanceAsset !== "") {
      writer.uint32(58).string(message.balanceAsset);
    }
    if (message.balanceRune !== "") {
      writer.uint32(66).string(message.balanceRune);
    }
    if (message.assetTorPrice !== "") {
      writer.uint32(74).string(message.assetTorPrice);
    }
    if (message.poolUnits !== "") {
      writer.uint32(82).string(message.poolUnits);
    }
    if (message.LPUnits !== "") {
      writer.uint32(90).string(message.LPUnits);
    }
    if (message.synthUnits !== "") {
      writer.uint32(98).string(message.synthUnits);
    }
    if (message.synthSupply !== "") {
      writer.uint32(106).string(message.synthSupply);
    }
    if (message.saversDepth !== "") {
      writer.uint32(114).string(message.saversDepth);
    }
    if (message.saversUnits !== "") {
      writer.uint32(122).string(message.saversUnits);
    }
    if (message.saversFillBps !== "") {
      writer.uint32(130).string(message.saversFillBps);
    }
    if (message.saversCapacityRemaining !== "") {
      writer.uint32(138).string(message.saversCapacityRemaining);
    }
    if (message.synthMintPaused !== false) {
      writer.uint32(144).bool(message.synthMintPaused);
    }
    if (message.synthSupplyRemaining !== "") {
      writer.uint32(154).string(message.synthSupplyRemaining);
    }
    if (message.loanCollateral !== "") {
      writer.uint32(162).string(message.loanCollateral);
    }
    if (message.loanCollateralRemaining !== "") {
      writer.uint32(170).string(message.loanCollateralRemaining);
    }
    if (message.loanCr !== "") {
      writer.uint32(178).string(message.loanCr);
    }
    if (message.derivedDepthBps !== "") {
      writer.uint32(186).string(message.derivedDepthBps);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryPoolResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPoolResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.asset = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.shortCode = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.status = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.decimals = Number(reader.int64());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.pendingInboundAsset = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.pendingInboundRune = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.balanceAsset = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.balanceRune = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.assetTorPrice = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.poolUnits = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.LPUnits = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.synthUnits = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.synthSupply = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.saversDepth = reader.string();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.saversUnits = reader.string();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.saversFillBps = reader.string();
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.saversCapacityRemaining = reader.string();
          continue;
        case 18:
          if (tag !== 144) {
            break;
          }

          message.synthMintPaused = reader.bool();
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.synthSupplyRemaining = reader.string();
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.loanCollateral = reader.string();
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.loanCollateralRemaining = reader.string();
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.loanCr = reader.string();
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          message.derivedDepthBps = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPoolResponse {
    return {
      asset: isSet(object.asset) ? globalThis.String(object.asset) : "",
      shortCode: isSet(object.shortCode)
        ? globalThis.String(object.shortCode)
        : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      decimals: isSet(object.decimals) ? globalThis.Number(object.decimals) : 0,
      pendingInboundAsset: isSet(object.pendingInboundAsset)
        ? globalThis.String(object.pendingInboundAsset)
        : "",
      pendingInboundRune: isSet(object.pendingInboundRune)
        ? globalThis.String(object.pendingInboundRune)
        : "",
      balanceAsset: isSet(object.balanceAsset)
        ? globalThis.String(object.balanceAsset)
        : "",
      balanceRune: isSet(object.balanceRune)
        ? globalThis.String(object.balanceRune)
        : "",
      assetTorPrice: isSet(object.assetTorPrice)
        ? globalThis.String(object.assetTorPrice)
        : "",
      poolUnits: isSet(object.poolUnits)
        ? globalThis.String(object.poolUnits)
        : "",
      LPUnits: isSet(object.LPUnits) ? globalThis.String(object.LPUnits) : "",
      synthUnits: isSet(object.synthUnits)
        ? globalThis.String(object.synthUnits)
        : "",
      synthSupply: isSet(object.synthSupply)
        ? globalThis.String(object.synthSupply)
        : "",
      saversDepth: isSet(object.saversDepth)
        ? globalThis.String(object.saversDepth)
        : "",
      saversUnits: isSet(object.saversUnits)
        ? globalThis.String(object.saversUnits)
        : "",
      saversFillBps: isSet(object.saversFillBps)
        ? globalThis.String(object.saversFillBps)
        : "",
      saversCapacityRemaining: isSet(object.saversCapacityRemaining)
        ? globalThis.String(object.saversCapacityRemaining)
        : "",
      synthMintPaused: isSet(object.synthMintPaused)
        ? globalThis.Boolean(object.synthMintPaused)
        : false,
      synthSupplyRemaining: isSet(object.synthSupplyRemaining)
        ? globalThis.String(object.synthSupplyRemaining)
        : "",
      loanCollateral: isSet(object.loanCollateral)
        ? globalThis.String(object.loanCollateral)
        : "",
      loanCollateralRemaining: isSet(object.loanCollateralRemaining)
        ? globalThis.String(object.loanCollateralRemaining)
        : "",
      loanCr: isSet(object.loanCr) ? globalThis.String(object.loanCr) : "",
      derivedDepthBps: isSet(object.derivedDepthBps)
        ? globalThis.String(object.derivedDepthBps)
        : "",
    };
  },

  toJSON(message: QueryPoolResponse): unknown {
    const obj: any = {};
    if (message.asset !== "") {
      obj.asset = message.asset;
    }
    if (message.shortCode !== "") {
      obj.shortCode = message.shortCode;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.decimals !== 0) {
      obj.decimals = Math.round(message.decimals);
    }
    if (message.pendingInboundAsset !== "") {
      obj.pendingInboundAsset = message.pendingInboundAsset;
    }
    if (message.pendingInboundRune !== "") {
      obj.pendingInboundRune = message.pendingInboundRune;
    }
    if (message.balanceAsset !== "") {
      obj.balanceAsset = message.balanceAsset;
    }
    if (message.balanceRune !== "") {
      obj.balanceRune = message.balanceRune;
    }
    if (message.assetTorPrice !== "") {
      obj.assetTorPrice = message.assetTorPrice;
    }
    if (message.poolUnits !== "") {
      obj.poolUnits = message.poolUnits;
    }
    if (message.LPUnits !== "") {
      obj.LPUnits = message.LPUnits;
    }
    if (message.synthUnits !== "") {
      obj.synthUnits = message.synthUnits;
    }
    if (message.synthSupply !== "") {
      obj.synthSupply = message.synthSupply;
    }
    if (message.saversDepth !== "") {
      obj.saversDepth = message.saversDepth;
    }
    if (message.saversUnits !== "") {
      obj.saversUnits = message.saversUnits;
    }
    if (message.saversFillBps !== "") {
      obj.saversFillBps = message.saversFillBps;
    }
    if (message.saversCapacityRemaining !== "") {
      obj.saversCapacityRemaining = message.saversCapacityRemaining;
    }
    if (message.synthMintPaused !== false) {
      obj.synthMintPaused = message.synthMintPaused;
    }
    if (message.synthSupplyRemaining !== "") {
      obj.synthSupplyRemaining = message.synthSupplyRemaining;
    }
    if (message.loanCollateral !== "") {
      obj.loanCollateral = message.loanCollateral;
    }
    if (message.loanCollateralRemaining !== "") {
      obj.loanCollateralRemaining = message.loanCollateralRemaining;
    }
    if (message.loanCr !== "") {
      obj.loanCr = message.loanCr;
    }
    if (message.derivedDepthBps !== "") {
      obj.derivedDepthBps = message.derivedDepthBps;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryPoolResponse>, I>>(
    base?: I
  ): QueryPoolResponse {
    return QueryPoolResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryPoolResponse>, I>>(
    object: I
  ): QueryPoolResponse {
    const message = createBaseQueryPoolResponse();
    message.asset = object.asset ?? "";
    message.shortCode = object.shortCode ?? "";
    message.status = object.status ?? "";
    message.decimals = object.decimals ?? 0;
    message.pendingInboundAsset = object.pendingInboundAsset ?? "";
    message.pendingInboundRune = object.pendingInboundRune ?? "";
    message.balanceAsset = object.balanceAsset ?? "";
    message.balanceRune = object.balanceRune ?? "";
    message.assetTorPrice = object.assetTorPrice ?? "";
    message.poolUnits = object.poolUnits ?? "";
    message.LPUnits = object.LPUnits ?? "";
    message.synthUnits = object.synthUnits ?? "";
    message.synthSupply = object.synthSupply ?? "";
    message.saversDepth = object.saversDepth ?? "";
    message.saversUnits = object.saversUnits ?? "";
    message.saversFillBps = object.saversFillBps ?? "";
    message.saversCapacityRemaining = object.saversCapacityRemaining ?? "";
    message.synthMintPaused = object.synthMintPaused ?? false;
    message.synthSupplyRemaining = object.synthSupplyRemaining ?? "";
    message.loanCollateral = object.loanCollateral ?? "";
    message.loanCollateralRemaining = object.loanCollateralRemaining ?? "";
    message.loanCr = object.loanCr ?? "";
    message.derivedDepthBps = object.derivedDepthBps ?? "";
    return message;
  },
};

function createBaseQueryPoolsRequest(): QueryPoolsRequest {
  return { height: "" };
}

export const QueryPoolsRequest = {
  encode(
    message: QueryPoolsRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.height !== "") {
      writer.uint32(10).string(message.height);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryPoolsRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPoolsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPoolsRequest {
    return {
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QueryPoolsRequest): unknown {
    const obj: any = {};
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryPoolsRequest>, I>>(
    base?: I
  ): QueryPoolsRequest {
    return QueryPoolsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryPoolsRequest>, I>>(
    object: I
  ): QueryPoolsRequest {
    const message = createBaseQueryPoolsRequest();
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseQueryPoolsResponse(): QueryPoolsResponse {
  return { pools: [] };
}

export const QueryPoolsResponse = {
  encode(
    message: QueryPoolsResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    for (const v of message.pools) {
      QueryPoolResponse.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryPoolsResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPoolsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pools.push(QueryPoolResponse.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPoolsResponse {
    return {
      pools: globalThis.Array.isArray(object?.pools)
        ? object.pools.map((e: any) => QueryPoolResponse.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryPoolsResponse): unknown {
    const obj: any = {};
    if (message.pools?.length) {
      obj.pools = message.pools.map((e) => QueryPoolResponse.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryPoolsResponse>, I>>(
    base?: I
  ): QueryPoolsResponse {
    return QueryPoolsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryPoolsResponse>, I>>(
    object: I
  ): QueryPoolsResponse {
    const message = createBaseQueryPoolsResponse();
    message.pools =
      object.pools?.map((e) => QueryPoolResponse.fromPartial(e)) || [];
    return message;
  },
};
