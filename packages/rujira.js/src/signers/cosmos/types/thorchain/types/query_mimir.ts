// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/query_mimir.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "../../binary";
import { DeepPartial, Exact, isSet } from "../../helpers";
import { NodeMimir } from "./type_mimir";

export const protobufPackage = "types";

export interface QueryMimirValuesRequest {
  height: string;
}

export interface QueryMimirValuesResponse {
  mimirs: Mimir[];
}

export interface QueryMimirWithKeyRequest {
  key: string;
  height: string;
}

export interface QueryMimirWithKeyResponse {
  value: number;
}

export interface QueryMimirAdminValuesRequest {
  height: string;
}

export interface QueryMimirAdminValuesResponse {
  adminMimirs: Mimir[];
}

export interface QueryMimirNodesAllValuesRequest {
  height: string;
}

export interface QueryMimirNodesAllValuesResponse {
  mimirs: NodeMimir[];
}

export interface QueryMimirNodesValuesRequest {
  height: string;
}

export interface QueryMimirNodesValuesResponse {
  mimirs: Mimir[];
}

export interface QueryMimirNodeValuesRequest {
  address: string;
  height: string;
}

export interface QueryMimirNodeValuesResponse {
  nodeMimirs: Mimir[];
}

export interface Mimir {
  key: string;
  value: number;
}

function createBaseQueryMimirValuesRequest(): QueryMimirValuesRequest {
  return { height: "" };
}

export const QueryMimirValuesRequest = {
  encode(
    message: QueryMimirValuesRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.height !== "") {
      writer.uint32(10).string(message.height);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryMimirValuesRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMimirValuesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryMimirValuesRequest {
    return {
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QueryMimirValuesRequest): unknown {
    const obj: any = {};
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryMimirValuesRequest>, I>>(
    base?: I
  ): QueryMimirValuesRequest {
    return QueryMimirValuesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryMimirValuesRequest>, I>>(
    object: I
  ): QueryMimirValuesRequest {
    const message = createBaseQueryMimirValuesRequest();
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseQueryMimirValuesResponse(): QueryMimirValuesResponse {
  return { mimirs: [] };
}

export const QueryMimirValuesResponse = {
  encode(
    message: QueryMimirValuesResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    for (const v of message.mimirs) {
      Mimir.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryMimirValuesResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMimirValuesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.mimirs.push(Mimir.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryMimirValuesResponse {
    return {
      mimirs: globalThis.Array.isArray(object?.mimirs)
        ? object.mimirs.map((e: any) => Mimir.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryMimirValuesResponse): unknown {
    const obj: any = {};
    if (message.mimirs?.length) {
      obj.mimirs = message.mimirs.map((e) => Mimir.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryMimirValuesResponse>, I>>(
    base?: I
  ): QueryMimirValuesResponse {
    return QueryMimirValuesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryMimirValuesResponse>, I>>(
    object: I
  ): QueryMimirValuesResponse {
    const message = createBaseQueryMimirValuesResponse();
    message.mimirs = object.mimirs?.map((e) => Mimir.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryMimirWithKeyRequest(): QueryMimirWithKeyRequest {
  return { key: "", height: "" };
}

export const QueryMimirWithKeyRequest = {
  encode(
    message: QueryMimirWithKeyRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.height !== "") {
      writer.uint32(18).string(message.height);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryMimirWithKeyRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMimirWithKeyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryMimirWithKeyRequest {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QueryMimirWithKeyRequest): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryMimirWithKeyRequest>, I>>(
    base?: I
  ): QueryMimirWithKeyRequest {
    return QueryMimirWithKeyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryMimirWithKeyRequest>, I>>(
    object: I
  ): QueryMimirWithKeyRequest {
    const message = createBaseQueryMimirWithKeyRequest();
    message.key = object.key ?? "";
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseQueryMimirWithKeyResponse(): QueryMimirWithKeyResponse {
  return { value: 0 };
}

export const QueryMimirWithKeyResponse = {
  encode(
    message: QueryMimirWithKeyResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.value !== 0) {
      writer.uint32(8).int64(message.value);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryMimirWithKeyResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMimirWithKeyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.value = Number(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryMimirWithKeyResponse {
    return { value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: QueryMimirWithKeyResponse): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryMimirWithKeyResponse>, I>>(
    base?: I
  ): QueryMimirWithKeyResponse {
    return QueryMimirWithKeyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryMimirWithKeyResponse>, I>>(
    object: I
  ): QueryMimirWithKeyResponse {
    const message = createBaseQueryMimirWithKeyResponse();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseQueryMimirAdminValuesRequest(): QueryMimirAdminValuesRequest {
  return { height: "" };
}

export const QueryMimirAdminValuesRequest = {
  encode(
    message: QueryMimirAdminValuesRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.height !== "") {
      writer.uint32(10).string(message.height);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryMimirAdminValuesRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMimirAdminValuesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryMimirAdminValuesRequest {
    return {
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QueryMimirAdminValuesRequest): unknown {
    const obj: any = {};
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryMimirAdminValuesRequest>, I>>(
    base?: I
  ): QueryMimirAdminValuesRequest {
    return QueryMimirAdminValuesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryMimirAdminValuesRequest>, I>>(
    object: I
  ): QueryMimirAdminValuesRequest {
    const message = createBaseQueryMimirAdminValuesRequest();
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseQueryMimirAdminValuesResponse(): QueryMimirAdminValuesResponse {
  return { adminMimirs: [] };
}

export const QueryMimirAdminValuesResponse = {
  encode(
    message: QueryMimirAdminValuesResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    for (const v of message.adminMimirs) {
      Mimir.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryMimirAdminValuesResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMimirAdminValuesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.adminMimirs.push(Mimir.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryMimirAdminValuesResponse {
    return {
      adminMimirs: globalThis.Array.isArray(object?.adminMimirs)
        ? object.adminMimirs.map((e: any) => Mimir.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryMimirAdminValuesResponse): unknown {
    const obj: any = {};
    if (message.adminMimirs?.length) {
      obj.adminMimirs = message.adminMimirs.map((e) => Mimir.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryMimirAdminValuesResponse>, I>>(
    base?: I
  ): QueryMimirAdminValuesResponse {
    return QueryMimirAdminValuesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryMimirAdminValuesResponse>, I>>(
    object: I
  ): QueryMimirAdminValuesResponse {
    const message = createBaseQueryMimirAdminValuesResponse();
    message.adminMimirs =
      object.adminMimirs?.map((e) => Mimir.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryMimirNodesAllValuesRequest(): QueryMimirNodesAllValuesRequest {
  return { height: "" };
}

export const QueryMimirNodesAllValuesRequest = {
  encode(
    message: QueryMimirNodesAllValuesRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.height !== "") {
      writer.uint32(10).string(message.height);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryMimirNodesAllValuesRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMimirNodesAllValuesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryMimirNodesAllValuesRequest {
    return {
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QueryMimirNodesAllValuesRequest): unknown {
    const obj: any = {};
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryMimirNodesAllValuesRequest>, I>>(
    base?: I
  ): QueryMimirNodesAllValuesRequest {
    return QueryMimirNodesAllValuesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryMimirNodesAllValuesRequest>, I>>(
    object: I
  ): QueryMimirNodesAllValuesRequest {
    const message = createBaseQueryMimirNodesAllValuesRequest();
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseQueryMimirNodesAllValuesResponse(): QueryMimirNodesAllValuesResponse {
  return { mimirs: [] };
}

export const QueryMimirNodesAllValuesResponse = {
  encode(
    message: QueryMimirNodesAllValuesResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    for (const v of message.mimirs) {
      NodeMimir.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryMimirNodesAllValuesResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMimirNodesAllValuesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.mimirs.push(NodeMimir.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryMimirNodesAllValuesResponse {
    return {
      mimirs: globalThis.Array.isArray(object?.mimirs)
        ? object.mimirs.map((e: any) => NodeMimir.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryMimirNodesAllValuesResponse): unknown {
    const obj: any = {};
    if (message.mimirs?.length) {
      obj.mimirs = message.mimirs.map((e) => NodeMimir.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryMimirNodesAllValuesResponse>, I>>(
    base?: I
  ): QueryMimirNodesAllValuesResponse {
    return QueryMimirNodesAllValuesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<
    I extends Exact<DeepPartial<QueryMimirNodesAllValuesResponse>, I>,
  >(object: I): QueryMimirNodesAllValuesResponse {
    const message = createBaseQueryMimirNodesAllValuesResponse();
    message.mimirs = object.mimirs?.map((e) => NodeMimir.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryMimirNodesValuesRequest(): QueryMimirNodesValuesRequest {
  return { height: "" };
}

export const QueryMimirNodesValuesRequest = {
  encode(
    message: QueryMimirNodesValuesRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.height !== "") {
      writer.uint32(10).string(message.height);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryMimirNodesValuesRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMimirNodesValuesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryMimirNodesValuesRequest {
    return {
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QueryMimirNodesValuesRequest): unknown {
    const obj: any = {};
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryMimirNodesValuesRequest>, I>>(
    base?: I
  ): QueryMimirNodesValuesRequest {
    return QueryMimirNodesValuesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryMimirNodesValuesRequest>, I>>(
    object: I
  ): QueryMimirNodesValuesRequest {
    const message = createBaseQueryMimirNodesValuesRequest();
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseQueryMimirNodesValuesResponse(): QueryMimirNodesValuesResponse {
  return { mimirs: [] };
}

export const QueryMimirNodesValuesResponse = {
  encode(
    message: QueryMimirNodesValuesResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    for (const v of message.mimirs) {
      Mimir.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryMimirNodesValuesResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMimirNodesValuesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.mimirs.push(Mimir.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryMimirNodesValuesResponse {
    return {
      mimirs: globalThis.Array.isArray(object?.mimirs)
        ? object.mimirs.map((e: any) => Mimir.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryMimirNodesValuesResponse): unknown {
    const obj: any = {};
    if (message.mimirs?.length) {
      obj.mimirs = message.mimirs.map((e) => Mimir.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryMimirNodesValuesResponse>, I>>(
    base?: I
  ): QueryMimirNodesValuesResponse {
    return QueryMimirNodesValuesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryMimirNodesValuesResponse>, I>>(
    object: I
  ): QueryMimirNodesValuesResponse {
    const message = createBaseQueryMimirNodesValuesResponse();
    message.mimirs = object.mimirs?.map((e) => Mimir.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryMimirNodeValuesRequest(): QueryMimirNodeValuesRequest {
  return { address: "", height: "" };
}

export const QueryMimirNodeValuesRequest = {
  encode(
    message: QueryMimirNodeValuesRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.height !== "") {
      writer.uint32(18).string(message.height);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryMimirNodeValuesRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMimirNodeValuesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryMimirNodeValuesRequest {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QueryMimirNodeValuesRequest): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryMimirNodeValuesRequest>, I>>(
    base?: I
  ): QueryMimirNodeValuesRequest {
    return QueryMimirNodeValuesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryMimirNodeValuesRequest>, I>>(
    object: I
  ): QueryMimirNodeValuesRequest {
    const message = createBaseQueryMimirNodeValuesRequest();
    message.address = object.address ?? "";
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseQueryMimirNodeValuesResponse(): QueryMimirNodeValuesResponse {
  return { nodeMimirs: [] };
}

export const QueryMimirNodeValuesResponse = {
  encode(
    message: QueryMimirNodeValuesResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    for (const v of message.nodeMimirs) {
      Mimir.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryMimirNodeValuesResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMimirNodeValuesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.nodeMimirs.push(Mimir.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryMimirNodeValuesResponse {
    return {
      nodeMimirs: globalThis.Array.isArray(object?.nodeMimirs)
        ? object.nodeMimirs.map((e: any) => Mimir.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryMimirNodeValuesResponse): unknown {
    const obj: any = {};
    if (message.nodeMimirs?.length) {
      obj.nodeMimirs = message.nodeMimirs.map((e) => Mimir.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryMimirNodeValuesResponse>, I>>(
    base?: I
  ): QueryMimirNodeValuesResponse {
    return QueryMimirNodeValuesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryMimirNodeValuesResponse>, I>>(
    object: I
  ): QueryMimirNodeValuesResponse {
    const message = createBaseQueryMimirNodeValuesResponse();
    message.nodeMimirs =
      object.nodeMimirs?.map((e) => Mimir.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMimir(): Mimir {
  return { key: "", value: 0 };
}

export const Mimir = {
  encode(
    message: Mimir,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(16).int64(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Mimir {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMimir();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.value = Number(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Mimir {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: Mimir): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Mimir>, I>>(base?: I): Mimir {
    return Mimir.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Mimir>, I>>(object: I): Mimir {
    const message = createBaseMimir();
    message.key = object.key ?? "";
    message.value = object.value ?? 0;
    return message;
  },
};
