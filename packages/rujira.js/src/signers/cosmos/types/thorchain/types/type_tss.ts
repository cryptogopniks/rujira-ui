// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/type_tss.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "../../binary";
import { DeepPartial, Exact, isSet } from "../../helpers";
export const protobufPackage = "types";

export interface TssVoter {
  id: string;
  poolPubKey: string;
  pubKeys: string[];
  blockHeight: number;
  chains: string[];
  signers: string[];
  majorityConsensusBlockHeight: number;
  secp256k1Signatures: string[];
}

function createBaseTssVoter(): TssVoter {
  return {
    id: "",
    poolPubKey: "",
    pubKeys: [],
    blockHeight: 0,
    chains: [],
    signers: [],
    majorityConsensusBlockHeight: 0,
    secp256k1Signatures: [],
  };
}

export const TssVoter = {
  encode(
    message: TssVoter,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.poolPubKey !== "") {
      writer.uint32(18).string(message.poolPubKey);
    }
    for (const v of message.pubKeys) {
      writer.uint32(26).string(v!);
    }
    if (message.blockHeight !== 0) {
      writer.uint32(32).int64(message.blockHeight);
    }
    for (const v of message.chains) {
      writer.uint32(42).string(v!);
    }
    for (const v of message.signers) {
      writer.uint32(50).string(v!);
    }
    if (message.majorityConsensusBlockHeight !== 0) {
      writer.uint32(56).int64(message.majorityConsensusBlockHeight);
    }
    for (const v of message.secp256k1Signatures) {
      writer.uint32(66).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TssVoter {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTssVoter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.poolPubKey = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pubKeys.push(reader.string());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.blockHeight = Number(reader.int64());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.chains.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.signers.push(reader.string());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.majorityConsensusBlockHeight = Number(reader.int64());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.secp256k1Signatures.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TssVoter {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      poolPubKey: isSet(object.poolPubKey)
        ? globalThis.String(object.poolPubKey)
        : "",
      pubKeys: globalThis.Array.isArray(object?.pubKeys)
        ? object.pubKeys.map((e: any) => globalThis.String(e))
        : [],
      blockHeight: isSet(object.blockHeight)
        ? globalThis.Number(object.blockHeight)
        : 0,
      chains: globalThis.Array.isArray(object?.chains)
        ? object.chains.map((e: any) => globalThis.String(e))
        : [],
      signers: globalThis.Array.isArray(object?.signers)
        ? object.signers.map((e: any) => globalThis.String(e))
        : [],
      majorityConsensusBlockHeight: isSet(object.majorityConsensusBlockHeight)
        ? globalThis.Number(object.majorityConsensusBlockHeight)
        : 0,
      secp256k1Signatures: globalThis.Array.isArray(object?.secp256k1Signatures)
        ? object.secp256k1Signatures.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: TssVoter): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.poolPubKey !== "") {
      obj.poolPubKey = message.poolPubKey;
    }
    if (message.pubKeys?.length) {
      obj.pubKeys = message.pubKeys;
    }
    if (message.blockHeight !== 0) {
      obj.blockHeight = Math.round(message.blockHeight);
    }
    if (message.chains?.length) {
      obj.chains = message.chains;
    }
    if (message.signers?.length) {
      obj.signers = message.signers;
    }
    if (message.majorityConsensusBlockHeight !== 0) {
      obj.majorityConsensusBlockHeight = Math.round(
        message.majorityConsensusBlockHeight
      );
    }
    if (message.secp256k1Signatures?.length) {
      obj.secp256k1Signatures = message.secp256k1Signatures;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TssVoter>, I>>(base?: I): TssVoter {
    return TssVoter.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TssVoter>, I>>(object: I): TssVoter {
    const message = createBaseTssVoter();
    message.id = object.id ?? "";
    message.poolPubKey = object.poolPubKey ?? "";
    message.pubKeys = object.pubKeys?.map((e) => e) || [];
    message.blockHeight = object.blockHeight ?? 0;
    message.chains = object.chains?.map((e) => e) || [];
    message.signers = object.signers?.map((e) => e) || [];
    message.majorityConsensusBlockHeight =
      object.majorityConsensusBlockHeight ?? 0;
    message.secp256k1Signatures =
      object.secp256k1Signatures?.map((e) => e) || [];
    return message;
  },
};
