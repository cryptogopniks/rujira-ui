// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: types/query_last_block.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "../../binary";
import { DeepPartial, Exact, isSet } from "../../helpers";
export const protobufPackage = "types";

export interface QueryLastBlocksRequest {
  height: string;
}

export interface QueryChainsLastBlockRequest {
  chain: string;
  height: string;
}

export interface QueryLastBlocksResponse {
  lastBlocks: ChainsLastBlock[];
}

export interface ChainsLastBlock {
  chain: string;
  lastObservedIn: number;
  lastSignedOut: number;
  thorchain: number;
}

function createBaseQueryLastBlocksRequest(): QueryLastBlocksRequest {
  return { height: "" };
}

export const QueryLastBlocksRequest = {
  encode(
    message: QueryLastBlocksRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.height !== "") {
      writer.uint32(10).string(message.height);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryLastBlocksRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryLastBlocksRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryLastBlocksRequest {
    return {
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QueryLastBlocksRequest): unknown {
    const obj: any = {};
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryLastBlocksRequest>, I>>(
    base?: I
  ): QueryLastBlocksRequest {
    return QueryLastBlocksRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryLastBlocksRequest>, I>>(
    object: I
  ): QueryLastBlocksRequest {
    const message = createBaseQueryLastBlocksRequest();
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseQueryChainsLastBlockRequest(): QueryChainsLastBlockRequest {
  return { chain: "", height: "" };
}

export const QueryChainsLastBlockRequest = {
  encode(
    message: QueryChainsLastBlockRequest,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.chain !== "") {
      writer.uint32(10).string(message.chain);
    }
    if (message.height !== "") {
      writer.uint32(18).string(message.height);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryChainsLastBlockRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryChainsLastBlockRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.chain = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.height = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryChainsLastBlockRequest {
    return {
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
      height: isSet(object.height) ? globalThis.String(object.height) : "",
    };
  },

  toJSON(message: QueryChainsLastBlockRequest): unknown {
    const obj: any = {};
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    if (message.height !== "") {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryChainsLastBlockRequest>, I>>(
    base?: I
  ): QueryChainsLastBlockRequest {
    return QueryChainsLastBlockRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryChainsLastBlockRequest>, I>>(
    object: I
  ): QueryChainsLastBlockRequest {
    const message = createBaseQueryChainsLastBlockRequest();
    message.chain = object.chain ?? "";
    message.height = object.height ?? "";
    return message;
  },
};

function createBaseQueryLastBlocksResponse(): QueryLastBlocksResponse {
  return { lastBlocks: [] };
}

export const QueryLastBlocksResponse = {
  encode(
    message: QueryLastBlocksResponse,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    for (const v of message.lastBlocks) {
      ChainsLastBlock.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): QueryLastBlocksResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryLastBlocksResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.lastBlocks.push(
            ChainsLastBlock.decode(reader, reader.uint32())
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryLastBlocksResponse {
    return {
      lastBlocks: globalThis.Array.isArray(object?.lastBlocks)
        ? object.lastBlocks.map((e: any) => ChainsLastBlock.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryLastBlocksResponse): unknown {
    const obj: any = {};
    if (message.lastBlocks?.length) {
      obj.lastBlocks = message.lastBlocks.map((e) => ChainsLastBlock.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryLastBlocksResponse>, I>>(
    base?: I
  ): QueryLastBlocksResponse {
    return QueryLastBlocksResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryLastBlocksResponse>, I>>(
    object: I
  ): QueryLastBlocksResponse {
    const message = createBaseQueryLastBlocksResponse();
    message.lastBlocks =
      object.lastBlocks?.map((e) => ChainsLastBlock.fromPartial(e)) || [];
    return message;
  },
};

function createBaseChainsLastBlock(): ChainsLastBlock {
  return { chain: "", lastObservedIn: 0, lastSignedOut: 0, thorchain: 0 };
}

export const ChainsLastBlock = {
  encode(
    message: ChainsLastBlock,
    writer: BinaryWriter = BinaryWriter.create()
  ): BinaryWriter {
    if (message.chain !== "") {
      writer.uint32(10).string(message.chain);
    }
    if (message.lastObservedIn !== 0) {
      writer.uint32(16).int64(message.lastObservedIn);
    }
    if (message.lastSignedOut !== 0) {
      writer.uint32(24).int64(message.lastSignedOut);
    }
    if (message.thorchain !== 0) {
      writer.uint32(32).int64(message.thorchain);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChainsLastBlock {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChainsLastBlock();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.chain = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.lastObservedIn = Number(reader.int64());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.lastSignedOut = Number(reader.int64());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.thorchain = Number(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChainsLastBlock {
    return {
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
      lastObservedIn: isSet(object.lastObservedIn)
        ? globalThis.Number(object.lastObservedIn)
        : 0,
      lastSignedOut: isSet(object.lastSignedOut)
        ? globalThis.Number(object.lastSignedOut)
        : 0,
      thorchain: isSet(object.thorchain)
        ? globalThis.Number(object.thorchain)
        : 0,
    };
  },

  toJSON(message: ChainsLastBlock): unknown {
    const obj: any = {};
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    if (message.lastObservedIn !== 0) {
      obj.lastObservedIn = Math.round(message.lastObservedIn);
    }
    if (message.lastSignedOut !== 0) {
      obj.lastSignedOut = Math.round(message.lastSignedOut);
    }
    if (message.thorchain !== 0) {
      obj.thorchain = Math.round(message.thorchain);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChainsLastBlock>, I>>(
    base?: I
  ): ChainsLastBlock {
    return ChainsLastBlock.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChainsLastBlock>, I>>(
    object: I
  ): ChainsLastBlock {
    const message = createBaseChainsLastBlock();
    message.chain = object.chain ?? "";
    message.lastObservedIn = object.lastObservedIn ?? 0;
    message.lastSignedOut = object.lastSignedOut ?? 0;
    message.thorchain = object.thorchain ?? 0;
    return message;
  },
};
